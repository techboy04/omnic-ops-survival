settings
{
	main
	{
		Description: "Fight endless waves of omnics on this COD Zombies styled survival. View the github for more information: github.com/techboy04/omnic-ops-survival"
		Mode Name: "Omnic Ops Survival"
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
		Map Rotation: After A Game
		Match Voice Chat: Enabled
		Max Team 1 Players: 4
		Max Team 2 Players: 0
		Return To Lobby: Never
		Swap Teams After Match: No
	}

	modes
	{
		Skirmish
		{
			disabled maps
			{
				Antarctic Peninsula
				Busan
				Colosseo
				Esperança
				Ilios
				Lijiang Tower
				Lijiang Tower Lunar New Year
				Nepal
				New Queen Street
				Numbani
				Oasis
				Paraíso
				Shambali Monastery
				Suravasa
				Watchpoint: Gibraltar
				Workshop Chamber
				Workshop Expanse
				Workshop Expanse Night
				Workshop Green Screen
				Workshop Island
				Workshop Island Night
			}
		}

		General
		{
			Allow Hero Switching: Off
			Game Mode Start: Immediately
			Hero Limit: Off
			Respawn As Random Hero: On
			Spawn Health Packs: Disabled
		}
	}

	heroes
	{
		Team 2
		{
			Orisa
			{
				Damage Received: 20%
				Health: 500%
				Projectile Speed: 95%
			}
		}

		General
		{
			D.Va
			{
				Spawn Without Mech: On
				Ultimate Ability Self-Destruct: Off
			}

			enabled heroes
			{
				D.Va
			}
		}
	}

	workshop
	{
		Difficulty: [2]
		Downed Bleedout Time in Seconds - 0=Disabled: 30.000
		Revive Max Time in Seconds: 3.000
		Soul Box Kill Limit: 10
	}

	extensions
	{
		Buff Status Effects
		Buff and Debuff Sounds
		Energy Explosion Effects
		Kinetic Explosion Effects
		Explosion Sounds
		Spawn More Dummy Bots
		Projectiles
	}
}

variables
{
	global:
		1: Wave
		2: ShowGameStart
		3: PowerLocation
		4: MaxPerkTiers
		5: PlayerSpawn
		6: JugLocation
		7: StaminLocation
		8: ElectricLocation
		9: QuickReviveLocation
		10: Barrier
		11: Power
		12: PerkLocations
		13: ZombiesLeft
		14: BarrierRadius
		15: MysteryBox
		16: ReviveSettings
		17: HeorWeapons
		18: DoublePointsActive
		19: StartDirector
		20: EnemySpawns
		21: RandomStartLines
		22: RandomLoseLines
		23: RandomExfilLines
		24: Modifiers
		25: BossReadyTimer
		26: RequireInteractToRevive
		27: InGamePlayers
		28: VotingEnabled
		29: EnemyTypes
		30: QuickRevivePrice
		31: StaminupPrice
		32: JuggernogPrice
		33: ElectricCherryPrice
		34: PowerPrice
		35: MysteryBoxPrice
		36: UpgradableLevels
		37: ReviveMaxTime
		38: DeathMaxTime
		39: CinematicMode
		40: PackAPunchLocation
		41: PackAPunchPrice
		42: MysteryBoxClass
		43: EE1Location
		44: EE2Location
		45: EE3Location
		46: AnomalyLocation
		47: EE1Active
		48: EE2Active
		49: EE3Active
		50: EERingEffects
		51: EE1Killcount
		52: EE2Killcount
		53: EE3Killcount
		54: KillcountLimit
		55: OpenAnomaly
		56: BossBot
		57: HasGameStarted
		58: StartBossLocation
		59: ActivateBoss
		60: GameOverMenu
		61: TimeElapsed
		62: StartTimer
		63: SpecialRoundEvents
		64: VictoryLines
		65: DidPlayersWin
		66: WaveLimit
		67: StartBonusEvent
		68: Event
		69: DisablePurchases
		70: DefuseBomb
		71: SpecialEventDescription
		72: exfilReadyTimer
		73: SpecialEventEffects
		74: WaveIncrement
		75: EnableSpecialEvents
		76: BombDefuseLocationArray
		77: ChosenBombDefuseLocation
		78: ActivateEELocation
		79: IsEEActivated
		80: MysteryBoxReward
		81: OrbsActivated
		82: ChallengesLocation
		83: Challenge
		84: ChallengeEffects
		85: IsChallengeActive
		86: ChallengeTimer
		87: ChallengeArea
		88: RewardLocation
		89: ChallengePrice
		90: ChallengeMaxTime
		91: UselessTips
		92: ChosenTip
		93: I
		94: enemyTypeHandling
		95: PowerupTimer
		96: StartingPoints
		97: PerkLossType
		98: WeaponLossType
		99: BossStarted
		100: DebugMode
		101: Parts
		102: WorkbenchLoc
		103: CanBuyBuildable
		104: EnableBuildable
		105: PartsLoc
		106: HeroBuildable
		107: ActivatedOrbs
		108: Difficulty
		109: BuildablePrice
		110: SecretEndPortalLocation
		111: ShowBuildablesMenu
		112: isGameEnding
		113: bossAttackPhase
		114: exfilLocation
		115: exfilStartLocation
		116: canExfil
		117: exfilStarted
		118: exfilRoundCounter
		119: canEscapeExfil
		120: exfilTimer
		121: exfilRequirement
		122: exfilKillCounter
		123: ElimPointsType
		124: EnableExfil
		125: PAPLines
		126: SecretPortalLocation
		127: BarrierLines

	player:
		0: PingLocation
		1: Points
		2: Score
		3: Perks
		4: ElectricCherryReady
		5: ChallengeScore
		6: IfBotisStuck
		7: SelfRevives
		8: PackAPunched
		9: RewardType
		10: DeathmachineActive
		11: PlayerReadiedUp
		12: DeathmachineTimer
		13: GodActive
		14: GodTimer
		15: BotTarget
		16: OutOfBounds
		17: Escaped
		18: LastBoughtPerk
		19: PAPLevel
		20: usingCustomAbility
		21: ElectricLevel
		22: JuggLevel
		23: StaminLevel
		24: QuickLevel
		26: backupIsDown
		27: backupBeingRevived
		28: backupRevivee
		29: backupLastLocation
		30: backupDownExpireTimer
		31: backupReviveTimer
		32: ReviveMaxTime
		33: DeathMaxTime
		34: exfilVote
		35: isHUDhidden
		36: ignoreMe
		37: spectatingIndex
}

subroutines
{
	1: RespawnDummy
	2: NextRound
	3: ElectricCherryEffects
	5: ChangeTarget
	7: SpawnEnemyPortals
	8: DummyName
}

rule("Workshop Settings")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.CinematicMode = Workshop Setting Toggle(Custom String("Workshop Developer Settings"), Custom String("Cinematic Mode"),
			False, -2);
		Global.DebugMode = Workshop Setting Toggle(Custom String("Workshop Developer Settings"), Custom String("Debug Mode"), False, -3);
		Global.KillcountLimit = Workshop Setting Integer(Custom String("Story EE Settings"), Custom String("Soul Box Kill Limit"), 5, 0,
			100, -1);
		Global.PowerPrice = Workshop Setting Integer(Custom String("Prices"), Custom String("Power Price"), 5000, 1000, 10000, 0);
		Global.MysteryBoxPrice = Workshop Setting Integer(Custom String("Prices"), Custom String("Mystery Box Price"), 950, 10, 5000, 1);
		Global.QuickRevivePrice = Workshop Setting Integer(Custom String("Prices"), Custom String("Quick Revive Price"), 1500, 1000, 10000,
			2);
		Global.StaminupPrice = Workshop Setting Integer(Custom String("Prices"), Custom String("Staminup Price"), 2000, 1000, 10000, 3);
		Global.JuggernogPrice = Workshop Setting Integer(Custom String("Prices"), Custom String("Juggernog Price"), 2500, 1000, 10000, 4);
		Global.ElectricCherryPrice = Workshop Setting Integer(Custom String("Prices"), Custom String("Electric Cherry Price"), 2000, 1000,
			10000, 5);
		Global.UpgradableLevels = Workshop Setting Integer(Custom String("General Settings"), Custom String("Max PAP Levels"), 5, 0, 99,
			6);
		Global.MaxPerkTiers = Workshop Setting Integer(Custom String("General Settings"), Custom String("Max Perk Levels"), 5, 0, 99, 6);
		Global.PackAPunchPrice = Workshop Setting Integer(Custom String("Prices"), Custom String("Pack A Punch Price"), 5000, 500, 10000,
			7);
		Global.MysteryBoxClass = Workshop Setting Combo(Custom String("General Settings"), Custom String("Mystery Box Weapon Class"), 0,
			Array(Custom String("Default"), Custom String("Snipers Only")), 0);
		Global.WaveLimit = Workshop Setting Integer(Custom String("General Settings"), Custom String("Wave Limit - 0=None"), 0, 0, 100, 0);
		Global.EnableSpecialEvents = Workshop Setting Toggle(Custom String("General Settings"), Custom String("Enable Special Waves"),
			True, 0);
		Global.ChallengePrice = Workshop Setting Integer(Custom String("Prices"), Custom String("Challenge Machine Price"), 600, 500,
			10000, 8);
		Global.ChallengeMaxTime = Workshop Setting Integer(Custom String("General Settings"), Custom String("Challenge start timer"), 0,
			100, 600, 0);
		Global.PowerupTimer = Workshop Setting Integer(Custom String("General Settings"), Custom String("Powerup Max Time"), 60, 0, 120,
			0);
		Global.StartingPoints = Workshop Setting Integer(Custom String("General Settings"), Custom String("Starting Points"), 0, 0,
			1000000, 0);
		Global.PerkLossType = Workshop Setting Combo(Custom String("General Settings"), Custom String("Perk Loss Upon Death"), 0, Array(
			Custom String("Last Bought Perk"), Custom String("All Perks"), Custom String("No Perks")), 0);
		Global.WeaponLossType = Workshop Setting Combo(Custom String("General Settings"), Custom String("Weapon Loss Upon Death"), 0,
			Array(Custom String("Keep Weapon"), Custom String("Back to Starter")), 0);
		Global.BuildablePrice = Workshop Setting Integer(Custom String("Prices"), Custom String("Buildables Price"), 2000, 500, 10000, 7);
		Global.EnableBuildable = Workshop Setting Toggle(Custom String("General Settings"), Custom String("Enable Buildables"), True, 0);
		Global.ElimPointsType = Workshop Setting Combo(Custom String("General Settings"), Custom String("Kill Reward Type"), 0, Array(
			Custom String("Default - Damage gives points"), Custom String("Cold War - Only kills gives points")), 0);
		Global.EnableExfil = Workshop Setting Toggle(Custom String("General Settings"), Custom String("Enable Exfil"), True, 0);
		Global.exfilRequirement = Workshop Setting Integer(Custom String("General Settings"), Custom String("Exfil Kill Requirement"), 25,
			5, 100, 0);
		Global.enemyTypeHandling = Workshop Setting Combo(Custom String("General Settings"), Custom String("Enemy Type Handling"), 0,
			Array(Custom String("Default - New Types over time"), Custom String("All Types at once"), Custom String("Only Omnics"),
			Custom String("Only Ravagers"), Custom String("Only Boomyattas")), 0);
		Global.RequireInteractToRevive = Workshop Setting Toggle(Custom String("General Settings"), Custom String(
			"Require Interact to revive"), True, 7);
		Global.VotingEnabled = Workshop Setting Toggle(Custom String("General Settings"), Custom String(
			"Require Voting to start game/boss"), True, 8);
		Global.ReviveMaxTime = Workshop Setting Real(Custom String("General Settings"), Custom String("Revive Max Time (in Seconds)"), 3,
			0.100, 50, 9);
		Global.DeathMaxTime = Workshop Setting Real(Custom String("General Settings"), Custom String(
			"Downed Bleedout Time (in Seconds) - 0=Disabled"), 30, 0, 300, 11);
		Global.Modifiers = Empty Array;
		Modify Global Variable(Modifiers, Append To Array, Workshop Setting Toggle(Custom String("Modifers"), Custom String(
			"Mystery Heroes - Random hero every wave"), False, 0) ? Custom String("Mystery Heroes") : Null);
		Modify Global Variable(Modifiers, Append To Array, Workshop Setting Toggle(Custom String("Modifers"), Custom String(
			"Mayhem - No Cooldowns and Instant Ultimates"), False, 1) ? Custom String("Mayhem") : Null);
		Modify Global Variable(Modifiers, Append To Array, Workshop Setting Toggle(Custom String("Modifers"), Custom String(
			"Security Measures - Going near enemies will hack you"), False, 3) ? Custom String("Security Measures") : Null);
		Global.Modifiers = Filtered Array(Global.Modifiers, Current Array Element != Null);
		Global.Difficulty = Workshop Setting Combo(Custom String("General Settings"), Custom String("Difficulty"), 0, Array(Custom String(
			"Normal"), Custom String("Hard"), Custom String("Expert")), -1);
		Global.ReviveSettings = Array(Workshop Setting Toggle(Custom String("General Settings"), Custom String(
			"Enable Crawling when downed"), True, 0), Workshop Setting Toggle(Custom String("General Settings"), Custom String(
			"Enable Spectating when downed"), False, 0));
	}
}

rule("Maps")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		If(Current Map == Map(Eichenwalde Halloween) || Current Map == Map(Eichenwalde));
			Global.exfilStartLocation = Vector(77.768, 14.052, -90.757);
			Global.exfilLocation = Vector(82.990, 14.004, -86.957);
			Global.PartsLoc = Array(Vector(60.599, 6.042, -94.424), Vector(59.009, 13.900, -83.425), Vector(103.575, 13.999, -72.868));
			Global.WorkbenchLoc = Vector(73.685, 14.217, -94.902);
			Global.HeroBuildable = Hero(Reinhardt);
			Start Forcing Spawn Room(Team 1, 0);
			Start Forcing Spawn Room(Team 2, 1);
			Global.BarrierRadius = 45;
			Global.Barrier = Vector(82.901, Y Component Of(Global.Barrier) - 6, -86.310);
			Global.PlayerSpawn = Vector(80.282, 14.002, -92.422);
			Global.QuickReviveLocation = Vector(58.867, 8.273, -109.429);
			Global.JugLocation = Vector(100.255, 14.041, -104.681);
			Global.StaminLocation = Vector(57.861, 19.364, -82.995);
			Global.ElectricLocation = Vector(79.317, 13.985, -72.247);
			Global.PowerLocation = Vector(97.899, 14.052, -61.237);
			Global.MysteryBox = Vector(70.911, 14.053, -104.055);
			Global.EnemySpawns = Array(Vector(47.223, 9.752, -92), Vector(66.731, 17.220, -60.246), Vector(93.399, 14.041, -116.360), Vector(
				88.539, 14.027, -66.493));
			Global.PackAPunchLocation = Vector(75.250, 14.042, -50.939);
			Global.EE1Location = Vector(52.385, 19.023, -102.326);
			Global.EE2Location = Vector(83.951, 14.197, -103.130);
			Global.EE3Location = Vector(102.537, 10.885, -91.327);
			Global.AnomalyLocation = Vector(87.982, 13.971, -67.875);
			Global.StartBossLocation = Vector(80.286, 14.077, -81.760);
			Global.BombDefuseLocationArray = Array(Vector(103.407, 1.432, -46.990), Vector(103.407, 1.432, -46.990), Vector(103.407, 1.432,
				-46.990));
			Global.ActivateEELocation = Vector(96.314, 13.273, -50.852);
			Global.RewardLocation = Vector(66.949, 13.977, -102.345);
			Global.ChallengeArea = Vector(78.759, 14.237, -99.165);
			Global.ChallengesLocation = Vector(64.393, 13.778, -101.312);
		Else If(Current Map == Map(Havana));
			Start Forcing Spawn Room(Team 1, 0);
			Start Forcing Spawn Room(Team 2, 1);
			Global.exfilStartLocation = Vector(123.420, 7.223, -28.439);
			Global.exfilLocation = Vector(106.382, 8.345, -46.266);
			Global.Barrier = Vector(139.520, Y Component Of(Global.Barrier) - 6, -46.467);
			Global.PlayerSpawn = Vector(153.803, 11.488, -30.838);
			Global.QuickReviveLocation = Vector(132.141, 11.629, -33.388);
			Global.JugLocation = Vector(121.223, 7.320, -54.434);
			Global.StaminLocation = Vector(143.585, 6.352, -18.829);
			Global.ElectricLocation = Vector(124.279, 7.320, -32.899);
			Global.PowerLocation = Vector(112.855, 8.235, -54.459);
			Global.MysteryBox = Vector(141.631, 7.591, -53.880);
			Global.EnemySpawns = Array(Vector(151.797, 10.486, -62.155), Vector(133.134, 7.320, -63.209), Vector(138.601, 6.262, -18.499),
				Vector(97.449, 8.323, -46.066));
			Global.PackAPunchLocation = Vector(127.357, 7.319, -28.040);
			Global.EE1Location = Vector(124.363, 13.724, -62.147);
			Global.EE2Location = Vector(122.752, 11.302, -31.456);
			Global.EE3Location = Vector(112.884, 8.312, -36.244);
			Global.AnomalyLocation = Vector(142.960, 7.384, -46.558);
			Global.StartBossLocation = Vector(142.960, 7.384, -46.558);
			Global.BombDefuseLocationArray = Array(Vector(89.368, 14.043, -59.500), Vector(60.791, 8.042, -72.333), Vector(0, 0, 0));
			Global.ActivateEELocation = Vector(131.550, 7.320, -28.248);
			Global.RewardLocation = Vector(131.163, 7.546, -35.744);
			Global.ChallengeArea = Vector(106.324, 8.346, -45.985);
			Global.ChallengesLocation = Vector(127.897, 7.330, -50.914);
			Global.PartsLoc = Array(Vector(106.666, 1.044, -53.321), Vector(102.397, 2.858, -23.737), Vector(122.853, 7.559, -36.307));
			Global.WorkbenchLoc = Vector(143.676, 7.405, -38.336);
			Global.HeroBuildable = Hero(Sojourn);
			Global.BarrierRadius = 50;
		Else If(Current Map == Map(Paris));
			Start Forcing Spawn Room(Team 1, 0);
			Start Forcing Spawn Room(Team 2, 1);
			Global.Barrier = Vector(-87.445, 13.327, -66.734);
			Global.PlayerSpawn = Vector(-69.650, 12.027, -29.425);
			Global.QuickReviveLocation = Vector(-49.538, 10.146, -53.259);
			Global.JugLocation = Vector(-72.447, 12.320, -57.364);
			Global.StaminLocation = Vector(-63.971, 14.321, -71.930);
			Global.ElectricLocation = Vector(-113.951, 14.320, -81.377);
			Global.PowerLocation = Vector(-105.715, 16.320, -103.776);
			Global.MysteryBox = Vector(-85.032, 14.320, -106.503);
			Global.EnemySpawns = Array(Vector(-121.355, 11.112, -58.202), Vector(-56.701, 14.321, -81.356), Vector(-99.395, 12.092, -36.853),
				Vector(-122.636, 14.320, -89.119));
			Global.exfilStartLocation = Vector(-100.119, 13.319, -66.147);
			Global.exfilLocation = Vector(-71.659, 11.176, -34.932);
			Global.PackAPunchLocation = Vector(-112.850, 11.320, -53.519);
			Global.EE1Location = Vector(-81.839, 13.320, -77.377);
			Global.EE2Location = Vector(-78.717, 16.319, -87.786);
			Global.EE3Location = Vector(-113.043, 11.319, -69.017);
			Global.AnomalyLocation = Vector(-99.886, 16.320, -92.372);
			Global.StartBossLocation = Vector(-97.965, 13.322, -88.194);
			Global.BombDefuseLocationArray = Array(Vector(-99.276, 13.321, -68.281), Vector(-59.746, 11.104, -50.866), Vector(-111.564, 12.333,
				-40.524));
			Global.ActivateEELocation = Vector(-72.184, 14.321, -79.180);
			Global.RewardLocation = Vector(-85.294, 11.323, -41.081);
			Global.ChallengeArea = Vector(-86.259, 13.319, -64.445);
			Global.ChallengesLocation = Vector(-64.566, 11.323, -41.928);
			Global.BarrierRadius = 50;
			Global.PartsLoc = Array(Vector(-81.345, 11.383, -22.051), Vector(-109.840, 13.320, -91.536), Vector(-128.188, 11.319, -68.540));
			Global.WorkbenchLoc = Vector(-126.263, 14.320, -89.939);
			Global.HeroBuildable = Hero(Winston);
		Else If(Current Map == Map(Blizzard World Winter) || Current Map == Map(Blizzard World));
			Start Forcing Spawn Room(Team 1, 0);
			Start Forcing Spawn Room(Team 2, 1);
			Global.Barrier = Vector(3.112, -0.482, -6.844);
			Global.exfilStartLocation = Vector(13.600, -2.681, -12.494);
			Global.exfilLocation = Vector(-12.675, -2.780, -26.884);
			Global.PlayerSpawn = Vector(-12.720, -2.781, -29.415);
			Global.QuickReviveLocation = Vector(-30.778, -0.681, -1.496);
			Global.JugLocation = Vector(-20.957, -2.680, -19.152);
			Global.StaminLocation = Vector(25.650, -2.680, -16.370);
			Global.ElectricLocation = Vector(-25.761, -0.681, 12.935);
			Global.PowerLocation = Vector(-23.206, -2.681, 4.934);
			Global.MysteryBox = Vector(-24.384, -2.637, -2.264);
			Global.EnemySpawns = Array(Vector(-19.106, -3.773, 14.869), Vector(-19.776, -2.779, -7.848), Vector(24.027, -2.779, -6.967),
				Vector(2.863, 1.222, 20.219));
			Global.PackAPunchLocation = Vector(3.003, 1.320, 6.221);
			Global.EE1Location = Vector(-14.856, -0.680, 21.169);
			Global.EE2Location = Vector(18.344, -3.778, 13.493);
			Global.EE3Location = Vector(-13.059, -2.779, -14.746);
			Global.AnomalyLocation = Vector(10.446, -2.680, -14.380);
			Global.StartBossLocation = Vector(2.975, -3.781, 18.446);
			Global.BombDefuseLocationArray = Array(Vector(-1.844, 1.217, 10.309), Vector(-5.062, -2.667, -1.856), Vector(9.943, -2.670,
				-1.927));
			Global.ActivateEELocation = Vector(-19.595, -2.681, 2.396);
			Global.RewardLocation = Vector(-6.204, -2.680, -22.895);
			Global.ChallengeArea = Vector(2.619, -2.779, -1.176);
			Global.ChallengesLocation = Vector(-2.716, -2.679, -16.875);
			Global.BarrierRadius = 45;
			Global.PartsLoc = Array(Vector(-12.421, -2.782, -7.891), Vector(8.787, 1.320, 20.501), Vector(8.911, -3.281, 13.260));
			Global.WorkbenchLoc = Vector(-26.268, -2.639, 1.314);
			Global.HeroBuildable = Hero(Echo);
		Else If(Current Map == Map(Dorado));
			Start Forcing Spawn Room(Team 1, 0);
			Start Forcing Spawn Room(Team 2, 1);
			Global.Barrier = Vector(115.570, Y Component Of(Global.Barrier) - 6, 24.820);
			Global.PlayerSpawn = Vector(147.497, 12.320, 30.978);
			Global.QuickReviveLocation = Vector(108.023, 12.319, 37.230);
			Global.JugLocation = Vector(123.741, 12.319, 38.806);
			Global.StaminLocation = Vector(111.060, 12.401, 12.692);
			Global.ElectricLocation = Vector(124.668, 8.569, -8.691);
			Global.PowerLocation = Vector(133.522, 12.369, 36.115);
			Global.MysteryBox = Vector(107.423, 12.401, 28.347);
			Global.EnemySpawns = Array(Vector(134.222, 12.332, 47.438), Vector(124.626, 10.151, 1.443), Vector(133.747, 19.070, 9.881), Vector(
				141.886, 11.320, 3.641), Vector(83.784, 8.046, -3.294), Vector(119.032, 8.344, -16.556), Vector(104.476, 19.331, 15.776));
			Global.PackAPunchLocation = Vector(98.570, 14.315, 13.799);
			Global.EE1Location = Vector(119.750, 19.318, 36.825);
			Global.EE2Location = Vector(117.828, 19.251, 6.659);
			Global.EE3Location = Vector(106.953, 12.402, 24.058);
			Global.AnomalyLocation = Vector(131.011, 12.370, 26.064);
			Global.StartBossLocation = Vector(113.444, 12.320, 48.604);
			Global.BombDefuseLocationArray = Array(Vector(153.490, 12.258, 32.035), Vector(150.967, 11.332, 6.509), Vector(94.643, 19.330,
				12.458));
			Global.ActivateEELocation = Vector(138.326, 12.370, 18.737);
			Global.RewardLocation = Vector(125.166, 12.320, 18.719);
			Global.ChallengeArea = Vector(118.887, 12.186, 26.115);
			Global.ChallengesLocation = Vector(129.989, 12.369, 15.761);
			Global.BarrierRadius = 50;
			Global.PartsLoc = Array(Vector(81.324, 15.270, 36.418), Vector(104.889, 13.498, 48.196), Vector(131.819, 11.357, 8.444));
			Global.exfilStartLocation = Vector(116.878, 12.368, 44.730);
			Global.exfilLocation = Vector(115.560, 9.054, -7.544);
			Global.WorkbenchLoc = Vector(142.934, 12.319, 21.002);
			Global.HeroBuildable = Hero(Soldier: 76);
		Else If(Current Map == Map(Hanamura) || Current Map == Map(Hanamura Winter));
			Start Forcing Spawn Room(Team 1, 0);
			Start Forcing Spawn Room(Team 2, 1);
			Global.Barrier = Vector(-7.272, -6, -73.589);
			Global.PlayerSpawn = Vector(4.102, 0.320, -69.411);
			Global.QuickReviveLocation = Vector(-13.029, 2.320, -61.989);
			Global.JugLocation = Vector(15.516, -3.680, -95.010);
			Global.StaminLocation = Vector(8.767, 0.319, -75.772);
			Global.ElectricLocation = Vector(14.882, 8.329, -85.896);
			Global.PowerLocation = Vector(-8.655, 0.394, -74.818);
			Global.MysteryBox = Vector(-4.031, 0.395, -93.479);
			Global.EnemySpawns = Array(Vector(-19.835, 5.318, -57.111), Vector(8.185, -3.782, -87.763), Vector(-26.036, 2.319, -90.867),
				Vector(-14.121, -3.780, -69.877), Vector(19.004, -0.606, -66.210));
			Global.PackAPunchLocation = Vector(-0.309, -3.779, -74.292);
			Global.EE1Location = Vector(5.642, 8.329, -89.533);
			Global.EE2Location = Vector(4.956, 6.320, -69.699);
			Global.EE3Location = Vector(-29.297, 2.320, -66.782);
			Global.AnomalyLocation = Vector(-5.913, 0.395, -79.766);
			Global.StartBossLocation = Vector(-37.575, 2.320, -63.399);
			Global.BombDefuseLocationArray = Array(Vector(12.693, -3.681, -92.554), Vector(-19.336, 2.319, -93.355), Vector(-22.121, 2.319,
				-59.281));
			Global.ActivateEELocation = Vector(-16.994, 0.571, -90.862);
			Global.RewardLocation = Vector(-13.203, 0.396, -95.596);
			Global.ChallengeArea = Vector(-0.847, 1.180, -74.741);
			Global.ChallengesLocation = Vector(-21.972, 0.395, -87.112);
			Global.BarrierRadius = 35;
			Global.PartsLoc = Array(Vector(-8.971, 4.318, -59.321), Vector(-0.795, -3.681, -69.834), Vector(-33.008, 2.319, -79.679));
			Global.WorkbenchLoc = Vector(-1.247, 0.396, -82.565);
			Global.HeroBuildable = Hero(Genji);
			Global.exfilStartLocation = Vector(-18.515, 0.394, -72.170);
			Global.exfilLocation = Vector(13.381, -0.378, -60.447);
		Else If(Current Map == Map(King's Row) || Current Map == Map(King's Row Winter));
			Start Forcing Spawn Room(Team 1, 0);
			Start Forcing Spawn Room(Team 2, 0);
			Global.Barrier = Vector(-19.472, 1.201, -32.899);
			Global.PlayerSpawn = Vector(-28.052, 1.220, -24.004);
			Global.QuickReviveLocation = Vector(-2.077, 1.298, -44.932);
			Global.JugLocation = Vector(4.422, 1.383, -32.512);
			Global.StaminLocation = Vector(-12.275, 1.370, -11.927);
			Global.ElectricLocation = Vector(-48.922, 1.259, -24.884);
			Global.PowerLocation = Vector(-30.765, 7.320, -50.920);
			Global.MysteryBox = Vector(-8.378, 1.197, -26.986);
			Global.EnemySpawns = Array(Vector(-18.873, 1.200, -4.823), Vector(-48.889, 1.154, -33.777), Vector(-28.892, 1.429, -17.022),
				Vector(3.098, 1.381, -31.404), Vector(-23.422, 2.319, -56.182));
			Global.PackAPunchLocation = Vector(-42.774, 1.415, -38.130);
			Global.EE1Location = Vector(-33.534, 10.319, -34.384);
			Global.EE2Location = Vector(-0.750, 1.209, -11.775);
			Global.EE3Location = Vector(-7.041, 7.327, -40.715);
			Global.AnomalyLocation = Vector(-18.993, 1.395, -36.809);
			Global.StartBossLocation = Vector(-25.247, 1.372, -17.393);
			Global.BombDefuseLocationArray = Array(Vector(2.234, 7.344, -44.845), Vector(0, 0, 0), Vector(0, 0, 0));
			Global.ActivateEELocation = Vector(-19.152, 2.328, -13.509);
			Global.RewardLocation = Vector(1.502, 1.359, -23.801);
			Global.ChallengeArea = Vector(-18.742, 1.206, -32.934);
			Global.ChallengesLocation = Vector(0.206, 1.392, -26.571);
			Global.BarrierRadius = 35;
			Global.PartsLoc = Array(Vector(11.378, 1.387, -20.966), Vector(-51.363, 1.411, -42.002), Vector(-11.044, 1.390, -35.119));
			Global.WorkbenchLoc = Vector(-14.975, 2.322, -20.326);
			Global.HeroBuildable = Hero(Tracer);
			Global.exfilStartLocation = Vector(-28.687, 1.395, -29.721);
			Global.exfilLocation = Vector(-48.785, 1.138, -33.077);
		Else If(Current Map == Map(Junkertown));
			Start Forcing Spawn Room(Team 1, 1);
			Start Forcing Spawn Room(Team 2, 1);
			Global.Barrier = Vector(-18.384, 6.465, -32.227);
			Global.PlayerSpawn = Vector(-19.409, 5.841, -39.176);
			Global.QuickReviveLocation = Vector(10.472, 12.289, -46.050);
			Global.JugLocation = Vector(-25.098, 6.316, -33.995);
			Global.StaminLocation = Vector(8.340, 8.507, -36.569);
			Global.ElectricLocation = Vector(7.721, 8.275, -51.670);
			Global.PowerLocation = Vector(-8.496, 8.376, -56.048);
			Global.MysteryBox = Vector(-5.553, 8.377, -53.356);
			Global.EnemySpawns = Array(Vector(4.090, 8.048, -52.547), Vector(-9.909, 6.265, -28.569), Vector(-47.956, 6.282, -26.923), Vector(
				-22.683, 6.064, -64.292), Vector(7.618, 8.391, -41.187));
			Global.PackAPunchLocation = Vector(-26.385, 5.778, -53.588);
			Global.EE1Location = Vector(12.078, 7.668, -27.752);
			Global.EE2Location = Vector(-37.528, 5.396, -17.896);
			Global.EE3Location = Vector(4.668, 13.566, -52.306);
			Global.AnomalyLocation = Vector(-28.962, 7, -48.404);
			Global.StartBossLocation = Vector(-36.014, 5.747, -57.125);
			Global.BombDefuseLocationArray = Array(Vector(-25.704, 6.121, -28.297), Vector(-48.265, 10.808, -44.866), Vector(-7.702, 12.106,
				-50.650));
			Global.ActivateEELocation = Vector(-21.846, 6.242, -52.418);
			Global.RewardLocation = Vector(-0.679, 7.963, -38.826);
			Global.ChallengeArea = Vector(-18.303, 6.162, -35.523);
			Global.ChallengesLocation = Vector(4.949, 8.089, -34.886);
			Global.BarrierRadius = 35;
			Global.PartsLoc = Array(Vector(-4.425, 2.850, -17.218), Vector(-41.887, 5.658, -21.919), Vector(12.721, 8.285, -43.346));
			Global.WorkbenchLoc = Vector(-10.264, 7.502, -48.259);
			Global.HeroBuildable = Hero(Junkrat);
			Global.exfilStartLocation = Vector(-12.231, 6.277, -34.956);
			Global.exfilLocation = Vector(-32.090, 5.748, -51.235);
		Else If(Current Map == Map(New Junk City));
			Start Forcing Spawn Room(Team 1, 0);
			Start Forcing Spawn Room(Team 2, 1);
			Global.Barrier = Vector(0, 1, 0);
			Global.PlayerSpawn = Vector(-20.682, 5.215, 0.009);
			Global.QuickReviveLocation = Vector(7.353, 0.320, -14.994);
			Global.JugLocation = Vector(-5.766, 0.319, -15.016);
			Global.StaminLocation = Vector(-8.292, 0.324, 16.090);
			Global.ElectricLocation = Vector(7.321, 0.325, 16.362);
			Global.PowerLocation = Vector(-11.574, 5.360, -18.276);
			Global.MysteryBox = Vector(-10.378, 5.361, 19.780);
			Global.EnemySpawns = Array(Vector(1.897, 5.548, 23.364), Vector(2.232, 5.402, -22.297), Vector(-23.593, 6.318, -0.012), Vector(
				2.072, 0.320, -25.444), Vector(2.469, 0.319, 25.230));
			Global.PackAPunchLocation = Vector(-5.897, 1.466, -0.187);
			Global.EE1Location = Vector(10.523, 5.344, 11.616);
			Global.EE2Location = Vector(-10.297, 4.135, -0.139);
			Global.EE3Location = Vector(11.481, 5.190, -10.497);
			Global.AnomalyLocation = Vector(6.335, 5, 0.085);
			Global.StartBossLocation = Vector(18.450, 0.349, 0.140);
			Global.BombDefuseLocationArray = Array(Vector(-0.398, 5.340, -18.642), Vector(-9.300, 0.319, 23.653), Vector(-16.981, 5.361,
				18.654));
			Global.ActivateEELocation = Vector(2.501, 1.466, 1.884);
			Global.RewardLocation = Vector(15.755, 0.348, 6.340);
			Global.ChallengeArea = Vector(-13.541, 5.098, -0.122);
			Global.ChallengesLocation = Vector(16.701, 0.347, -5.980);
			Global.BarrierRadius = 28;
			Global.PartsLoc = Array(Vector(15.540, 0.320, -21.390), Vector(15.578, 0.323, 21.339), Vector(-2.392, 1.473, -0.449));
			Global.WorkbenchLoc = Vector(-18.780, 5.545, -6.733);
			Global.HeroBuildable = Hero(Junker Queen);
			Global.exfilStartLocation = Vector(-17.724, 5.336, 8.180);
			Global.exfilLocation = Vector(-9.737, 4.128, -0.345);
		Else If(Current Map == Map(Rialto));
			Start Forcing Spawn Room(Team 1, 1);
			Start Forcing Spawn Room(Team 2, 0);
			Global.Barrier = Vector(58.879, 1.069, -63.917);
			Global.PlayerSpawn = Vector(59.645, 0.920, -45.096);
			Global.QuickReviveLocation = Vector(44.414, 1.069, -57.001);
			Global.JugLocation = Vector(40.672, 1.069, -75.548);
			Global.StaminLocation = Vector(35.642, 7.074, -64.808);
			Global.ElectricLocation = Vector(31.268, 0.070, -79.718);
			Global.PowerLocation = Vector(40.797, 1.070, -85.991);
			Global.MysteryBox = Vector(48.310, 1.070, -40.922);
			Global.EnemySpawns = Array(Vector(54.010, 1.069, -80.322), Vector(52.653, 1.082, -35.867), Vector(78.996, 0.919, -50.044), Vector(
				69.679, 0.538, -37.022), Vector(38.282, 1.070, -53.571));
			Global.PackAPunchLocation = Vector(67.356, 1.152, -63.476);
			Global.EE1Location = Vector(38.182, 1.080, -68.555);
			Global.EE2Location = Vector(53.584, 5.060, -85.622);
			Global.EE3Location = Vector(66.968, 0.919, -47.926);
			Global.AnomalyLocation = Vector(55.227, 1.070, -65.917);
			Global.StartBossLocation = Vector(54.259, 1.067, -50.370);
			Global.BombDefuseLocationArray = Array(Vector(67.070, 0.133, -33.439), Vector(40.592, 6.950, -44.039), Vector(45.133, 1.998,
				-41.311));
			Global.ActivateEELocation = Vector(35.873, 1.069, -60.451);
			Global.RewardLocation = Vector(66.621, 1.069, -75.568);
			Global.ChallengeArea = Vector(58.011, 2.135, -56.055);
			Global.ChallengesLocation = Vector(60.126, 1.068, -74.323);
			Global.BarrierRadius = 35;
			Global.PartsLoc = Array(Vector(33.243, 1.968, -43.996), Vector(78.616, 1.927, -39.779), Vector(62.650, 3.166, -60.549));
			Global.WorkbenchLoc = Vector(49.160, 1.069, -74.186);
			Global.HeroBuildable = Hero(Reaper);
			Global.exfilStartLocation = Vector(52.846, 1.070, -75.533);
			Global.exfilLocation = Vector(50.003, 0.915, -55.369);
		Else If(Current Map == Map(Volskaya Industries));
			Start Forcing Spawn Room(Team 1, 0);
			Start Forcing Spawn Room(Team 2, 0);
			Global.Barrier = Vector(-12.671, -2.372, 90.295);
			Global.PlayerSpawn = Vector(-17.629, -1.797, 66.666);
			Global.QuickReviveLocation = Vector(4.268, -1.662, 56.451);
			Global.JugLocation = Vector(-33.936, -2.661, 93.897);
			Global.StaminLocation = Vector(3.634, -1.799, 65.397);
			Global.ElectricLocation = Vector(-27.841, 3.338, 92.379);
			Global.PowerLocation = Vector(17.597, 3.345, 93.970);
			Global.MysteryBox = Vector(-9.288, -2.369, 100.270);
			Global.EnemySpawns = Array(Vector(-9.686, -2.329, 49.804), Vector(13.421, -0.661, 69.170), Vector(27.626, -2.726, 80.278), Vector(
				-17.979, -1.662, 116.949), Vector(-54.285, -3.658, 96.551), Vector(-27.198, 3.338, 104.369), Vector(-27.851, -0.658, 62.142));
			Global.PackAPunchLocation = Vector(-29.250, 3.345, 83.376);
			Global.EE1Location = Vector(-26.841, 3.338, 100.593);
			Global.EE2Location = Vector(-2.170, 3.255, 95.058);
			Global.EE3Location = Vector(-12.692, -2.730, 106.809);
			Global.AnomalyLocation = Vector(-13.921, -2.521, 95.686);
			Global.StartBossLocation = Vector(-52.717, -2.656, 81.254);
			Global.BombDefuseLocationArray = Array(Vector(-50.758, -2.841, 72.801), Vector(23.074, -2.720, 100.806), Vector(15.840, -0.656,
				58.660));
			Global.ActivateEELocation = Vector(17.141, -2.653, 91.043);
			Global.RewardLocation = Vector(-8.138, -2.651, 79.788);
			Global.ChallengeArea = Vector(-13.498, -2.373, 90.444);
			Global.ChallengesLocation = Vector(-15.926, -2.655, 78.174);
			Global.BarrierRadius = 45;
			Global.PartsLoc = Array(Vector(-27.373, -1.357, 82.194), Vector(-37.826, -1.583, 55.513), Vector(-29.820, -1.633, 51.235));
			Global.WorkbenchLoc = Vector(9.032, -2.658, 92.312);
			Global.HeroBuildable = Hero(Zarya);
			Global.exfilLocation = Vector(-7.550, -1.978, 68.272);
			Global.exfilStartLocation = Vector(-38.489, -2.659, 79.680);
		Else If(Current Map == Map(Horizon Lunar Colony));
			Start Forcing Spawn Room(Team 1, 0);
			Start Forcing Spawn Room(Team 2, 0);
			Global.Barrier = Vector(67.453, 9.228, -78.221);
			Global.PlayerSpawn = Vector(54.809, 7.487, -63.888);
			Global.QuickReviveLocation = Vector(68.124, 8.327, -41.360);
			Global.JugLocation = Vector(71.687, 15.330, -75.121);
			Global.StaminLocation = Vector(95.236, 13.486, -59.571);
			Global.ElectricLocation = Vector(43.846, 15.329, -57.858);
			Global.PowerLocation = Vector(71.008, 8.338, -63.212);
			Global.MysteryBox = Vector(59.522, 8.327, -60.768);
			Global.EnemySpawns = Array(Vector(47.757, 7.319, -40.311), Vector(91.607, 12.186, -55.278), Vector(68.888, 9.325, -86.557), Vector(
				35.856, 9.322, -100.390), Vector(36.779, 15.322, -57.332), Vector(72.224, 8.321, -62.295));
			Global.PackAPunchLocation = Vector(32.282, 9.325, -72.331);
			Global.EE1Location = Vector(47.445, 15.328, -60.685);
			Global.EE2Location = Vector(53.743, 10.176, -85.243);
			Global.EE3Location = Vector(54.511, 8.320, -55.865);
			Global.AnomalyLocation = Vector(55.234, 7.313, -71.189);
			Global.StartBossLocation = Vector(52.982, 15.327, -74.143);
			Global.BombDefuseLocationArray = Array(Vector(26.967, 9.322, -80.794), Vector(101.030, 14.588, -82.390), Vector(33.140, 8.325,
				-52.692));
			Global.ActivateEELocation = Vector(41.448, 8.325, -58.988);
			Global.RewardLocation = Vector(36.741, 8.325, -55.027);
			Global.ChallengeArea = Vector(56.315, 7.311, -68.534);
			Global.ChallengesLocation = Vector(43.378, 8.325, -50.047);
			Global.BarrierRadius = 45;
			Global.PartsLoc = Array(Vector(77.665, 7.854, -37.211), Vector(86.926, 7.938, -63.185), Vector(30.286, 9.692, -93.523));
			Global.WorkbenchLoc = Vector(86.410, 7.937, -71.818);
			Global.HeroBuildable = Hero(Wrecking Ball);
			Global.exfilLocation = Vector(96.691, 13.137, -67.391);
			Global.exfilStartLocation = Vector(44.737, 7.320, -66.887);
		Else If(Current Map == Map(Temple of Anubis));
			Start Forcing Spawn Room(Team 1, 0);
			Start Forcing Spawn Room(Team 2, 0);
			Global.Barrier = Vector(-52.854, 2.821, 44.584);
			Global.PlayerSpawn = Vector(-28.730, 2.644, 41.178);
			Global.QuickReviveLocation = Vector(-33.581, 3.134, 12.438);
			Global.JugLocation = Vector(-49.388, 6.836, 21.864);
			Global.StaminLocation = Vector(-35.512, 2.827, 69.520);
			Global.ElectricLocation = Vector(-54.501, 3.457, 37.841);
			Global.PowerLocation = Vector(-17.919, 2.858, 48.791);
			Global.MysteryBox = Vector(-29.944, 2.901, 33.784);
			Global.EnemySpawns = Array(Vector(-38.722, 6.824, 64.378), Vector(-21.886, 7.715, 61.375), Vector(-17.161, 5.830, 36.775), Vector(
				-39.460, 6.336, 10.103), Vector(-40.339, 10.834, 23.787), Vector(-60.235, 2.843, 49.910));
			Global.PackAPunchLocation = Vector(-37.837, 2.822, 57.796);
			Global.EE1Location = Vector(-60.627, 7.835, 44.479);
			Global.EE2Location = Vector(-49.400, 10.840, 36.064);
			Global.EE3Location = Vector(-24.673, 5.833, 36.142);
			Global.AnomalyLocation = Vector(-38.816, 2.847, 39.729);
			Global.StartBossLocation = Vector(-28.536, 2.789, 55.419);
			Global.BombDefuseLocationArray = Array(Vector(0, 0, 0), Vector(0, 0, 0), Vector(0, 0, 0));
			Global.ActivateEELocation = Vector(-33.049, 3.320, 46.619);
			Global.RewardLocation = Vector(-35.762, 2.998, 42.465);
			Global.ChallengeArea = Vector(-45.496, 4.722, 43.333);
			Global.ChallengesLocation = Vector(-41.093, 2.828, 46.760);
			Global.BarrierRadius = 40;
			Global.PartsLoc = Array(Vector(-17.800, 3.134, 27.919), Vector(-19.522, 3.930, 64.917), Vector(-36.249, 6.962, 19.184));
			Global.WorkbenchLoc = Vector(-49.386, 2.843, 52);
			Global.HeroBuildable = Hero(Pharah);
			Global.exfilLocation = Vector(-27.479, 2.800, 20.914);
			Global.exfilStartLocation = Vector(-34.137, 3.131, 22.423);
		Else If(Current Map == Map(Route 66));
			Start Forcing Spawn Room(Team 1, 2);
			Start Forcing Spawn Room(Team 2, 1);
			Global.Barrier = Vector(-31.269, 4.756, -20.063);
			Global.PlayerSpawn = Vector(-27.435, 4.631, -39.558);
			Global.QuickReviveLocation = Vector(-9.441, 4.337, -2.432);
			Global.JugLocation = Vector(-28.739, 4.745, -14.210);
			Global.StaminLocation = Vector(-46.233, 4.630, -33.720);
			Global.ElectricLocation = Vector(-26.720, 4.633, -44.396);
			Global.PowerLocation = Vector(-18.328, 4.807, -41.537);
			Global.MysteryBox = Vector(-26.247, 4.807, -28.074);
			Global.EnemySpawns = Array(Vector(-59.447, 4.620, -40.237), Vector(-55.027, 4.625, -16.478), Vector(-56.745, 6.087, 6.795), Vector(
				-22.640, 4.610, 3.134), Vector(0.323, 3.726, -12.493), Vector(4.346, 9.421, -22.686), Vector(-44.775, 11.109, -38.993), Vector(
				-27.911, 9.750, -18.275));
			Global.PackAPunchLocation = Vector(-50.597, 4.606, 1.589);
			Global.EE1Location = Vector(-24.596, 11.168, -36.490);
			Global.EE2Location = Vector(-22.612, 9.738, -20.184);
			Global.EE3Location = Vector(-29.369, 4.631, -36.224);
			Global.AnomalyLocation = Vector(-11.212, 4.628, -18.784);
			Global.StartBossLocation = Vector(-20.929, 4.597, -50.955);
			Global.BombDefuseLocationArray = Array(Vector(-5.851, 4.756, -46.421), Vector(-35.205, 4.678, 5.548), Vector(6.585, 3.378,
				-19.804));
			Global.ActivateEELocation = Vector(-38.234, 4.639, -3.234);
			Global.RewardLocation = Vector(-16.983, 5.398, 3.243);
			Global.ChallengeArea = Vector(-25.531, 4.632, -36.595);
			Global.ChallengesLocation = Vector(-21.038, 5.405, 10.250);
			Global.BarrierRadius = 40;
			Global.PartsLoc = Array(Vector(-32.626, 4.786, -7.695), Vector(-35.610, 4.627, -29.516), Vector(-32.462, 4.744, -12.235));
			Global.WorkbenchLoc = Vector(-34.269, 4.753, -22.795);
			Global.HeroBuildable = Hero(Ashe);
			Global.exfilLocation = Vector(-14.838, 9.861, -45.258);
			Global.exfilStartLocation = Vector(-10.911, 4.581, -12.658);
		Else If(Current Map == Map(Hollywood) || Current Map == Map(Hollywood Halloween));
			Start Forcing Spawn Room(Team 1, 0);
			Start Forcing Spawn Room(Team 2, 1);
			Global.Barrier = Vector(10.487, 3.326, -55.021);
			Global.PlayerSpawn = Vector(7.120, 2.925, -48.375);
			Global.QuickReviveLocation = Vector(23.846, 3.185, -80.256);
			Global.JugLocation = Vector(7.746, 3.324, -64.654);
			Global.StaminLocation = Vector(4.612, 3.082, -29.450);
			Global.ElectricLocation = Vector(-15.490, 3.051, -63.555);
			Global.PowerLocation = Vector(-7.805, 2.923, -73.342);
			Global.MysteryBox = Vector(10.369, 3.329, -67.047);
			Global.EnemySpawns = Array(Vector(30.412, 3.178, -77.588), Vector(10.831, 5.068, -94.124), Vector(-16.585, 7.067, -63.552), Vector(
				-7.159, 2.930, -21.049), Vector(14.114, 3.084, -16.988), Vector(41.136, 4.079, -33.848), Vector(0.319, 12.335, -62.164));
			Global.PackAPunchLocation = Vector(36.105, 4.081, -57.150);
			Global.EE1Location = Vector(8.068, 14.234, -48.969);
			Global.EE2Location = Vector(12.066, 7.328, -57.604);
			Global.EE3Location = Vector(18.324, 2.926, -70.658);
			Global.AnomalyLocation = Vector(21.109, 2.926, -51.109);
			Global.StartBossLocation = Vector(42.179, 3.075, -68.150);
			Global.BombDefuseLocationArray = Array(Vector(0.036, 3.076, -32.152), Vector(4.726, 7.084, -32.367), Vector(39.652, 4.078,
				-57.331));
			Global.ActivateEELocation = Vector(-1.013, 3.332, -61.745);
			Global.RewardLocation = Vector(-11.847, 3.175, -35.564);
			Global.ChallengeArea = Vector(22.470, 2.929, -53.532);
			Global.ChallengesLocation = Vector(-11.331, 3.255, -25.264);
			Global.BarrierRadius = 42;
			Global.PartsLoc = Array(Vector(16.616, 3.078, -41.046), Vector(-1.237, 12.333, -66.485), Vector(31.095, 2.939, -89.808));
			Global.WorkbenchLoc = Vector(28.769, 2.953, -39.293);
			Global.HeroBuildable = Hero(Doomfist);
			Global.exfilLocation = Vector(0.073, 2.926, -77.402);
			Global.exfilStartLocation = Vector(24.184, 2.929, -48.795);
		Else If(Current Map == Map(Circuit royal));
			Start Forcing Spawn Room(Team 1, 2);
			Start Forcing Spawn Room(Team 2, 2);
			Global.Barrier = Vector(-50.904, 5.355, -41.853);
			Global.PlayerSpawn = Vector(-49.498, 5.516, -36.576);
			Global.QuickReviveLocation = Vector(-27.783, 7.319, -54.900);
			Global.JugLocation = Vector(-36.175, 5.578, -22.270);
			Global.StaminLocation = Vector(-13.622, 7.343, -19.900);
			Global.ElectricLocation = Vector(-61.441, 5.527, -30.522);
			Global.PowerLocation = Vector(-39.116, 11.328, -34.199);
			Global.MysteryBox = Vector(-28.918, 7.341, -13.842);
			Global.EnemySpawns = Array(Vector(-76.014, 5.344, -73.230), Vector(-47.688, 5.571, -85.152), Vector(-16.950, 12.324, -60.240),
				Vector(-7.935, 12.322, -14.280), Vector(-21.570, 7.144, -6.270), Vector(-69.461, 7.363, -13.130));
			Global.PackAPunchLocation = Vector(-47.656, 7.368, -18.540);
			Global.EE1Location = Vector(-53.688, 5.314, -67.109);
			Global.EE2Location = Vector(-42.672, 11.324, -34.864);
			Global.EE3Location = Vector(-15.111, 14.331, -40.305);
			Global.AnomalyLocation = Vector(-46.035, 7.275, -42.880);
			Global.StartBossLocation = Vector(-38.993, 7.332, -61.037);
			Global.BombDefuseLocationArray = Array(Vector(-80.536, 7.663, -14.178), Vector(-37.795, 5.598, -26.341), Vector(-28.055, 7.322,
				-57.211));
			Global.ActivateEELocation = Vector(-46.174, 5.364, -44.743);
			Global.RewardLocation = Vector(-49.580, 5.357, -67.936);
			Global.ChallengeArea = Vector(-25.255, 7.181, -39.392);
			Global.ChallengesLocation = Vector(-57.608, 5.339, -75.534);
			Global.BarrierRadius = 50;
			Global.PartsLoc = Array(Vector(-60.729, 7, -47.771), Vector(-40.833, 5.759, -62.492), Vector(-25.945, 7.177, -20.779));
			Global.WorkbenchLoc = Vector(-44.640, 5.515, -50.405);
			Global.HeroBuildable = Hero(Baptiste);
			Global.exfilLocation = Vector(-57.038, 5.278, -71.141);
			Global.exfilStartLocation = Vector(-57.105, 5.537, -55.059);
	}
}

disabled rule("Settings HUD")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		disabled Create HUD Text(Event Player, Custom String("General Settings"), Null, Null, Right, -1, Color(Blue), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(Is Button Held(Event Player, Button(Jump)) ? Event Player : Null, Global.ChallengeMaxTime == 100 ? Custom String(
			"Challenge Start Timer: 100 seconds") : Custom String("Challenge Start Timer: {0} seconds - MODIFIED",
			Global.ChallengeMaxTime), Null, Null, Right, 1, Global.ChallengeMaxTime == 100 ? Color(Aqua) : Color(Sky Blue), Color(White),
			Color(White), Visible To Sort Order String and Color, Default Visibility);
		Create HUD Text(Is Button Held(Event Player, Button(Jump)) ? Event Player : Null,
			Global.EnableSpecialEvents == True ? Custom String("Enable Special waves: On") : Custom String(
			"Enable Special waves: Off - MODIFIED"), Null, Null, Right, 2, Global.EnableSpecialEvents == True ? Color(Aqua) : Color(
			Sky Blue), Color(White), Color(White), Visible To Sort Order String and Color, Default Visibility);
		disabled Create HUD Text(Event Player, Global.MysteryBoxClass == 0 ? Custom String("Mystery Box Weapon Class -  Default") : Custom String(
			"Mystery Box Weapon Class - {0} - MODIFIED", Global.MysteryBoxClass), Null, Null, Right, 3,
			Global.MysteryBoxClass == 0 ? Color(Aqua) : Color(Sky Blue), Color(White), Color(White),
			Visible To Sort Order String and Color, Default Visibility);
		disabled Create HUD Text(Event Player, Global.StartTimer == 100 ? Custom String("Perk Loss Upon Death: Last Bought") : Custom String(
			"Perk Loss Upon Deat***********DIFIED", Global.StartTimer), Null, Null, Right, 4, Global.StartTimer == 100 ? Color(Aqua)
			: Color(Sky Blue), Color(White), Color(White), Visible To Sort Order String and Color, Default Visibility);
		Create HUD Text(Is Button Held(Event Player, Button(Jump)) ? Event Player : Null, Global.PowerupTimer == 60 ? Custom String(
			"Powerup Max Time: 60 seconds") : Custom String("Powerup Max Time: {0} seconds - MODIFIED", Global.PowerupTimer), Null, Null,
			Right, 5, Global.PowerupTimer == 60 ? Color(Aqua) : Color(Sky Blue), Color(White), Color(White),
			Visible To Sort Order String and Color, Default Visibility);
		Create HUD Text(Is Button Held(Event Player, Button(Jump)) ? Event Player : Null, Global.StartingPoints == 0 ? Custom String(
			"Starting Points: 0 points") : Custom String("Starting Points: {0} points - MODIFIED", Global.StartingPoints), Null, Null,
			Right, 6, Global.StartingPoints == 0 ? Color(Aqua) : Color(Sky Blue), Color(White), Color(White),
			Visible To Sort Order String and Color, Default Visibility);
		Create HUD Text(Is Button Held(Event Player, Button(Jump)) ? Event Player : Null, Global.WaveLimit == 0 ? Custom String(
			"Wave Limit: None") : Custom String("Wave Limit: {0} - MODIFIED", Global.WaveLimit), Null, Null, Right, 7,
			Global.WaveLimit == 0 ? Color(Aqua) : Color(Sky Blue), Color(White), Color(White), Visible To Sort Order String and Color,
			Default Visibility);
		Create HUD Text(Is Button Held(Event Player, Button(Jump)) ? Event Player : Null, Global.WeaponLossType == 0 ? Custom String(
			"Weapon Loss Upon Death: Keep Weapon") : Custom String("Weapon Loss Upon Death: Default Weapon - MODIFIED"), Null, Null, Right,
			8, Global.WeaponLossType == 0 ? Color(Aqua) : Color(Sky Blue), Color(White), Color(White),
			Visible To Sort Order String and Color, Default Visibility);
		Create HUD Text(Is Button Held(Event Player, Button(Jump)) ? Event Player : Null, Global.ElimPointsType == 0 ? Custom String(
			"Elim Points Type: Classic - Dmg and Kills earns points") : Custom String(
			"Elim Points Type: Cold War - Only kills earns points - MODIFIED"), Null, Null, Right, 9, Global.ElimPointsType == 0 ? Color(
			Aqua) : Color(Sky Blue), Color(White), Color(White), Visible To Sort Order String and Color, Default Visibility);
		Create HUD Text(Is Button Held(Event Player, Button(Jump)) ? Event Player : Null, Global.EnableExfil == True ? Custom String(
			"Enable Exfil: On") : Custom String("Enable Exfil: Off - MODIFIED"), Null, Null, Right, 10, Global.EnableExfil == True ? Color(
			Aqua) : Color(Sky Blue), Color(White), Color(White), Visible To Sort Order String and Color, Default Visibility);
		Create HUD Text(Is Button Held(Event Player, Button(Jump)) ? Event Player : Null, Global.exfilRequirement == 25 ? Custom String(
			"Exfil Requirement: 25 kills") : Custom String("Exfil Requirement: {0} kills - MODIFIED", Global.exfilRequirement), Null, Null,
			Right, 11, Global.exfilRequirement == 25 ? Color(Aqua) : Color(Sky Blue), Color(White), Color(White),
			Visible To Sort Order String and Color, Default Visibility);
		"Prices"
		Create HUD Text(Is Button Held(Event Player, Button(Jump)) ? Event Player : Null, Global.PowerPrice == 5000 ? Custom String(
			"Power Price: 5000 points") : Custom String("Power Price: {0} - MODIFIED", Global.PowerPrice), Null, Null, Right, 20,
			Global.PowerPrice == 5000 ? Color(Aqua) : Color(Sky Blue), Color(White), Color(White), Visible To Sort Order String and Color,
			Default Visibility);
		Create HUD Text(Is Button Held(Event Player, Button(Jump)) ? Event Player : Null, Global.MysteryBoxPrice == 950 ? Custom String(
			"Mystery Box Price: 950 points") : Custom String("Mystery Box Price: {0} - MODIFIED", Global.MysteryBoxPrice), Null, Null,
			Right, 21, Global.MysteryBoxPrice == 950 ? Color(Aqua) : Color(Sky Blue), Color(White), Color(White),
			Visible To Sort Order String and Color, Default Visibility);
		Create HUD Text(Is Button Held(Event Player, Button(Jump)) ? Event Player : Null, Global.QuickRevivePrice == 1500 ? Custom String(
			"Quick Revive Price: 1500 points") : Custom String("Quick Revive Price: {0} - MODIFIED", Global.QuickRevivePrice), Null, Null,
			Right, 22, Global.QuickRevivePrice == 1500 ? Color(Aqua) : Color(Sky Blue), Color(White), Color(White),
			Visible To Sort Order String and Color, Default Visibility);
		Create HUD Text(Is Button Held(Event Player, Button(Jump)) ? Event Player : Null, Global.StaminupPrice == 2000 ? Custom String(
			"Staminup Price: 2000 points") : Custom String("Staminup Price: {0} - MODIFIED", Global.StaminupPrice), Null, Null, Right, 23,
			Global.StaminupPrice == 2000 ? Color(Aqua) : Color(Sky Blue), Color(White), Color(White),
			Visible To Sort Order String and Color, Default Visibility);
		Create HUD Text(Is Button Held(Event Player, Button(Jump)) ? Event Player : Null, Global.JuggernogPrice == 2500 ? Custom String(
			"Juggernog Price: 2500 points") : Custom String("Quick Revive Price: {0} - MODIFIED", Global.JuggernogPrice), Null, Null,
			Right, 24, Global.JuggernogPrice == 2500 ? Color(Aqua) : Color(Sky Blue), Color(White), Color(White),
			Visible To Sort Order String and Color, Default Visibility);
		Create HUD Text(Is Button Held(Event Player, Button(Jump)) ? Event Player : Null,
			Global.ElectricCherryPrice == 2000 ? Custom String("Electric Cherry Price: 2000 points") : Custom String(
			"Electric Cherry Price: {0} - MODIFIED", Global.ElectricCherryPrice), Null, Null, Right, 25,
			Global.ElectricCherryPrice == 2000 ? Color(Aqua) : Color(Sky Blue), Color(White), Color(White),
			Visible To Sort Order String and Color, Default Visibility);
		Create HUD Text(Is Button Held(Event Player, Button(Jump)) ? Event Player : Null, Global.UpgradableLevels == 5 ? Custom String(
			"Max PAP Levels: 5") : Custom String("Max PAP Levels: {0} - MODIFIED", Global.UpgradableLevels), Null, Null, Right, 26,
			Global.UpgradableLevels == 5 ? Color(Aqua) : Color(Sky Blue), Color(White), Color(White),
			Visible To Sort Order String and Color, Default Visibility);
		Create HUD Text(Is Button Held(Event Player, Button(Jump)) ? Event Player : Null, Global.PackAPunchPrice == 5000 ? Custom String(
			"Pack a Punch Price: 5000 points") : Custom String("Pack a Punch Price: {0} - MODIFIED", Global.PackAPunchPrice), Null, Null,
			Right, 27, Global.PackAPunchPrice == 5000 ? Color(Aqua) : Color(Sky Blue), Color(White), Color(White),
			Visible To Sort Order String and Color, Default Visibility);
		Create HUD Text(Is Button Held(Event Player, Button(Jump)) ? Event Player : Null, Global.ChallengePrice == 600 ? Custom String(
			"Challenge Machine Price: 600 points") : Custom String("Challenge Machine Price: {0} - MODIFIED", Global.ChallengePrice), Null,
			Null, Right, 28, Global.ChallengePrice == 600 ? Color(Aqua) : Color(Sky Blue), Color(White), Color(White),
			Visible To Sort Order String and Color, Default Visibility);
		disabled Create HUD Text(Event Player, Custom String("Price Settings"), Null, Null, Right, 19, Color(Blue), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(Is Button Held(Event Player, Button(Jump)) ? Event Player : Null, Global.EnableBuildable ? (
			Global.BuildablePrice == 2000 ? Custom String("Buildable Price: 2000 Points") : Custom String(
			"Buildable Price: {0} - MODIFIED", Global.BuildablePrice)) : Custom String("Buildable Price: Buildables Disabled"), Null, Null,
			Right, 29, Global.EnableBuildable ? (Global.BuildablePrice == 2000 ? Color(Aqua) : Color(Sky Blue)) : Color(Red), Color(White),
			Color(White), Visible To Sort Order String and Color, Default Visibility);
		Create HUD Text(Is Button Held(Event Player, Button(Jump)) ? Event Player : Null, Global.enemyTypeHandling == 0 ? Custom String(
			"Enemy Type Handling: New Types over time") : (Global.enemyTypeHandling == 1 ? Custom String(
			"Enemy Type Handling: All unlocked - MODIFIED") : (Global.enemyTypeHandling == 2 ? Custom String(
			"Enemy Type Handling: All Omnics - MODIFIED") : (Global.enemyTypeHandling == 3 ? Custom String(
			"Enemy Type Handling: All Ravagers - MODIFIED") : Custom String("Enemy Type Handling: All Boomyattas - MODIFIED")))), Null,
			Null, Right, 9, Global.enemyTypeHandling == 0 ? Color(Aqua) : Color(Sky Blue), Color(White), Color(White),
			Visible To Sort Order String and Color, Default Visibility);
		Create HUD Text(Is Button Held(Event Player, Button(Jump)) ? Event Player : Null, Global.MaxPerkTiers == 5 ? Custom String(
			"Max Perk Levels: 5") : Custom String("Max Perk Levels: {0} - MODIFIED", Global.MaxPerkTiers), Null, Null, Right, 26,
			Global.MaxPerkTiers == 5 ? Color(Aqua) : Color(Sky Blue), Color(White), Color(White), Visible To Sort Order String and Color,
			Default Visibility);
	}
}

rule("Variables")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.EnemyTypes = Empty Array;
		Global.Power = False;
		Global.PerkLocations = Array(Global.JugLocation, Global.StaminLocation, Global.ElectricLocation, Global.QuickReviveLocation);
		disabled Global.BarrierRadius = 45;
		Global.DoublePointsActive = True;
		Global.RandomStartLines = Array(Custom String("Alright team, survive as long as possible!"), Custom String(
			"Team, you need to survive as long as you can!"), Custom String(
			"A large wave of Omnics are on their way! Keep your eyes open."));
		Global.RandomLoseLines = Array(Custom String("Team? TEAM?... Damn, they went dark."), Custom String(
			"Fallback! I repeat! Fallback!"), Custom String("Team became dark! I repeat, the team went dark!"));
		Global.RandomExfilLines = Array(Custom String("Exfil is on its way! Survive until then!"), Custom String(
			"You're lucky the chopper was near, hold off until they arrive!"), Custom String(
			"Help is on its way! Hold off until then team!"));
		disabled If(Global.MysteryBoxClass == Custom String("Default"));
		Global.HeorWeapons = Array(Hero(Hanzo), Hero(Junkrat), Hero(Mei), Hero(Reaper), Hero(Cassidy), Hero(Sombra), Hero(Soldier: 76),
			Hero(Echo), Hero(Sojourn), Hero(Ashe), Hero(Tracer), Hero(Symmetra), Hero(Doomfist), Hero(Junker Queen), Hero(Lúcio), Hero(
			Genji), Hero(Reinhardt), Hero(Torbjörn), Hero(Widowmaker), Hero(Zarya), Hero(Wrecking Ball), Hero(Baptiste));
		disabled Else If(Global.MysteryBoxClass == Custom String("Snipers Only"));
		disabled Global.HeorWeapons = Array(Hero(Hanzo), Hero(Ashe), Hero(Widowmaker));
		Global.HasGameStarted = False;
		Global.VictoryLines = Array(Custom String("Nice job team! Rounds on me!"), Custom String(
			"Mission Successful! Lets bring them home!"), Custom String("Nice work team! Lets meetup and debrief!"));
		Global.SpecialRoundEvents = Array(Custom String("Defuse the Bomb"), Custom String("Low Gravity"), Custom String(
			"Purchases Disabled"));
		Global.UselessTips = Array(Custom String("Dont get caught in the darkness!"), Custom String(
			"Play challenges to unlock unique rewards!"), Custom String("Special waves occur every 5 waves"), Custom String(
			"Dark portals show where the enemies will spawn"), Custom String("Some heroes give a better point advantage than others"),
			Custom String("Multiple teammates can revive a downed teammate! This makes it quicker!"), Custom String(
			"Downed alot? Try changing up your strategy!"), Custom String("Watch your six! Enemies could attack from anywhere!"));
		Global.Parts = Array(Null, Null, Null);
		Global.exfilRoundCounter = -5;
		Global.exfilTimer = Global.exfilRequirement * 5;
		disabled Disable Inspector Recording;
		Global.PAPLines = Array(Custom String("*hums the Doom theme*"), Custom String("\"Hoho I can make use of this strange power!\""),
			Custom String("\"Put gun in, and out comes powerful gun\""), Custom String("\"This POWER feels strange...\""));
		Global.BarrierLines = Array(Custom String("\"Get out of there! You cannot take on the darkness!\""), Custom String(
			"\"The darkness will consume you! Get out of it!\""), Custom String(
			"\"Id advise you to avoid the darkness at all costs! You will be eliminated!\""));
		If(Global.enemyTypeHandling <= 2);
			Modify Global Variable(EnemyTypes, Append To Array, Array(Hero(Bastion), Hero(Bastion), Hero(Bastion), Hero(Bastion), Hero(
				Bastion)));
		End;
		If(Global.enemyTypeHandling == 1 || Global.enemyTypeHandling == 3);
			Modify Global Variable(EnemyTypes, Append To Array, Hero(Ramattra));
		End;
		If(Global.enemyTypeHandling == 1 || Global.enemyTypeHandling == 4);
			Modify Global Variable(EnemyTypes, Append To Array, Hero(Zenyatta));
		End;
		disabled Disable Inspector Recording;
		Global.ActivatedOrbs = Empty Array;
		Pause Match Time;
		Disable Built-In Game Mode Completion;
	}
}

rule("Spawn Effects")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Global.DebugMode == False;
	}

	actions
	{
		Create In-World Text(Global.Power == True ? Filtered Array(All Players(All Teams), !Current Array Element.isHUDhidden) : Null,
			Custom String("Buy Quick Revive - {0} Points", Global.QuickRevivePrice), Vector(X Component Of(Global.QuickReviveLocation),
			Y Component Of(Global.QuickReviveLocation) - 0.500, Z Component Of(Global.QuickReviveLocation)), 1, Clip Against Surfaces,
			Visible To Position and String, Color(Aqua), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Global.Power == True ? Color(Aqua) : Color(Gray), Global.QuickReviveLocation, 1,
			Visible To Position Radius and Color);
		Create Effect(All Players(All Teams), Ring, Global.Power == True ? Color(Red) : Color(Gray), Global.JugLocation, 1,
			Visible To Position Radius and Color);
		Create Effect(All Players(All Teams), Ring, Global.Power == True ? Color(Orange) : Color(Gray), Global.StaminLocation, 1,
			Visible To Position Radius and Color);
		Create Effect(All Players(All Teams), Ring, Global.Power == True ? Color(Turquoise) : Color(Gray), Global.ElectricLocation, 1,
			Visible To Position Radius and Color);
		Create Effect(All Players(All Teams), Ring, Global.Power == True ? Color(Green) : Color(White), Global.PowerLocation, 1,
			Visible To Position and Radius);
		Create In-World Text(Filtered Array(All Players(All Teams), !Current Array Element.isHUDhidden), Icon String(Bolt),
			Global.PowerLocation, 2, Do Not Clip, Visible To Position and String, Color(White), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Orange), Global.MysteryBox, 1, Visible To Position and Radius);
		Create In-World Text(Filtered Array(All Players(All Teams), !Current Array Element.isHUDhidden), Icon String(Question Mark),
			Global.MysteryBox, 2, Do Not Clip, Visible To Position and String, Color(White), Default Visibility);
		Disable Death Spectate All Players(All Players(All Teams));
		Create Effect(All Players(All Teams), Ring, Global.Power == True ? Color(Sky Blue) : Color(Gray), Global.PackAPunchLocation, 1,
			Visible To Position Radius and Color);
		Create Effect(All Players(All Teams), Ring, Color(Lime Green), Global.ChallengesLocation, 1, Visible To Position and Radius);
		Create In-World Text(Filtered Array(All Players(All Teams), !Current Array Element.isHUDhidden), Icon String(Club),
			Global.ChallengesLocation, 1, Do Not Clip, Visible To Position and String, Color(Lime Green), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Black), Global.RewardLocation, 1, Visible To Position and Radius);
		Create In-World Text(Global.CanBuyBuildable == True ? Filtered Array(All Players(All Teams), !Current Array Element.isHUDhidden)
			: Null, Custom String("Buy {1} - {0} Points", Global.BuildablePrice, Hero Icon String(Global.HeroBuildable)), Vector(
			X Component Of(Global.WorkbenchLoc), Y Component Of(Global.WorkbenchLoc) - 0.500, Z Component Of(Global.WorkbenchLoc)), 1,
			Clip Against Surfaces, Visible To Position and String, Color(Aqua), Default Visibility);
		Create In-World Text(Global.Power == True ? Filtered Array(All Players(All Teams), !Current Array Element.isHUDhidden) : Null,
			Custom String("Buy Juggernog - {0} Points", Global.JuggernogPrice), Vector(X Component Of(Global.JugLocation), Y Component Of(
			Global.JugLocation) - 0.500, Z Component Of(Global.JugLocation)), 1, Clip Against Surfaces, Visible To Position and String,
			Color(Red), Default Visibility);
		Create In-World Text(Global.Power == True ? Filtered Array(All Players(All Teams), !Current Array Element.isHUDhidden) : Null,
			Icon String(Plus), Global.JugLocation, 2, Do Not Clip, Visible To Position and String, Color(Red), Default Visibility);
		Create In-World Text(Global.Power == True ? Filtered Array(All Players(All Teams), !Current Array Element.isHUDhidden) : Null,
			Icon String(Dizzy), Global.ElectricLocation, 2, Do Not Clip, Visible To Position and String, Color(Turquoise),
			Default Visibility);
		Create In-World Text(Global.Power == True ? Filtered Array(All Players(All Teams), !Current Array Element.isHUDhidden) : Null,
			Icon String(Halo), Global.QuickReviveLocation, 2, Do Not Clip, Visible To Position and String, Color(Aqua),
			Default Visibility);
		Create In-World Text(Global.Power == True ? Filtered Array(All Players(All Teams), !Current Array Element.isHUDhidden) : Null,
			Icon String(Spiral), Global.StaminLocation, 2, Do Not Clip, Visible To Position and String, Color(Orange), Default Visibility);
		Create In-World Text(Global.Power == True ? Filtered Array(All Players(All Teams), !Current Array Element.isHUDhidden) : Null,
			Icon String(Fire), Global.PackAPunchLocation, 2, Do Not Clip, Visible To Position and String, Color(Sky Blue),
			Default Visibility);
		Create In-World Text(Global.Power == True ? Filtered Array(All Players(All Teams), !Current Array Element.isHUDhidden) : Null,
			Custom String("Buy Electric Cherry - {0} Points", Global.ElectricCherryPrice), Vector(X Component Of(Global.ElectricLocation),
			Y Component Of(Global.ElectricLocation) - 0.500, Z Component Of(Global.ElectricLocation)), 1, Clip Against Surfaces,
			Visible To Position and String, Color(Turquoise), Default Visibility);
		Create In-World Text(Global.Power == True ? Filtered Array(All Players(All Teams), !Current Array Element.isHUDhidden) : Null,
			Custom String("Buy Staminup - {0} Points", Global.StaminupPrice), Vector(X Component Of(Global.StaminLocation), Y Component Of(
			Global.StaminLocation) - 0.500, Z Component Of(Global.StaminLocation)), 1, Clip Against Surfaces,
			Visible To Position and String, Color(Orange), Default Visibility);
		Create In-World Text(Global.Power == True ? Filtered Array(All Players(All Teams), !Current Array Element.isHUDhidden) : Null,
			Custom String("Upgrade your Weapon - {0} Points", Global.PackAPunchPrice), Vector(X Component Of(Global.PackAPunchLocation),
			Y Component Of(Global.PackAPunchLocation) - 0.500, Z Component Of(Global.PackAPunchLocation)), 1, Clip Against Surfaces,
			Visible To Position and String, Color(Sky Blue), Default Visibility);
		Create Effect(Global.OrbsActivated == 3 ? All Players(All Teams) : Null, Good Aura, Color(Purple), Global.StartBossLocation, 1,
			Visible To Position and Radius);
		Create In-World Text(Global.OrbsActivated == 3 ? All Players(All Teams) : Null, Custom String(
			"Start Final Battle - There is no turning back!"), Global.StartBossLocation, 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(Global.OrbsActivated == 3 ? All Players(All Teams) : Null, Ring, Color(Purple), Global.StartBossLocation, 3,
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Ring, Color(Violet), Global.WorkbenchLoc, 1, Visible To Position Radius and Color);
		Create In-World Text(Filtered Array(All Players(All Teams), !Current Array Element.isHUDhidden), Ability Icon String(Hero(
			Torbjörn), Button(Ability 2)), Global.WorkbenchLoc, 2, Do Not Clip, Visible To Position and String, Color(White),
			Default Visibility);
		"Parts"
		Create Effect(Array Contains(Global.Parts, Custom String("One")) ? Null : All Players(All Teams), Sparkles, Color(Gray),
			Global.PartsLoc[0], 0.050, Visible To Position Radius and Color);
		Wait(0.250, Ignore Condition);
		"Parts"
		Create Effect(Array Contains(Global.Parts, Custom String("Two")) ? Null : All Players(All Teams), Sparkles, Color(Gray),
			Global.PartsLoc[1], 0.050, Visible To Position Radius and Color);
		Wait(0.250, Ignore Condition);
		"Parts"
		Create Effect(Array Contains(Global.Parts, Custom String("Three")) ? Null : All Players(All Teams), Sparkles, Color(Gray),
			Global.PartsLoc[2], 0.050, Visible To Position Radius and Color);
		Create Effect(Global.canExfil ? All Players(All Teams) : Null, Orb, Color(White), Global.exfilStartLocation, 3,
			Visible To Position and Radius);
		Create In-World Text(Global.canExfil ? Filtered Array(All Players(All Teams), !Current Array Element.isHUDhidden) : Null,
			Custom String("{0} - Exfil", Icon String(Bolt)), Global.exfilStartLocation, 1, Do Not Clip, Visible To Position and String,
			Color(White), Default Visibility);
		Create Effect(Global.canEscapeExfil ? All Players(All Teams) : Null, Light Shaft, Color(Violet), Vector(X Component Of(
			Global.exfilLocation), Y Component Of(Global.exfilLocation) - 1, Z Component Of(Global.exfilLocation)), 5,
			Visible To Position and Radius);
		Create Effect(Global.exfilStarted ? (Global.canEscapeExfil ? Null : All Players(All Teams)) : Null, Sphere, Color(Turquoise),
			Global.exfilLocation, 5, Visible To Position and Radius);
		Create In-World Text(Global.exfilStarted ? Filtered Array(All Players(All Teams), !Current Array Element.isHUDhidden) : Null,
			Custom String("EXFIL PORTAL"), Global.exfilLocation, 4, Do Not Clip, Visible To Position and String, Color(Violet),
			Default Visibility);
		Create Effect(All Players(All Teams), Sphere, Color(Violet), Global.Barrier, Global.BarrierRadius, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Sphere, Color(Purple), Global.Barrier, Global.BarrierRadius, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Sphere, Color(Violet), Global.Barrier, Global.BarrierRadius, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Sphere, Color(Violet), Global.Barrier, Global.BarrierRadius, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Sphere, Color(Purple), Global.Barrier, Global.BarrierRadius, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Sphere, Color(Violet), Global.Barrier, Global.BarrierRadius, Visible To Position and Radius);
		Create Effect(Global.Power == True && Global.IsEEActivated == False ? All Players(All Teams) : Null, Heal Target Effect, Color(
			Turquoise), Global.ActivateEELocation, 0.500, Visible To Position and Radius);
	}
}

rule("Custom HUD - Event Player")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.ShowGameStart == True;
		Global.DebugMode == False;
		Global.HasGameStarted == True;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Create HUD Text(Event Player.isHUDhidden ? Null : Event Player, Global.WaveLimit == 0 ? Custom String("Wave {0}", Global.Wave)
			: Custom String("Wave {0}/{1}", Global.Wave, Global.WaveLimit), Global.StartBonusEvent ? Global.Event : Custom String(""),
			Global.StartBonusEvent ? Global.SpecialEventDescription : Custom String(""), Left, 0, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		disabled Create HUD Text(Event Player, Custom String("{0} - {1}", Ability Icon String(Hero Of(Event Player), Button(Primary Fire)), Ammo(
			Event Player, 0)), Null, Null, Left, 3, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player.isHUDhidden ? Null : Event Player, Custom String("Points: {0}", Event Player.Points),
			Event Player.PAPLevel > 0 ? Custom String("Upgraded Level:") : Custom String(""), Event Player.PAPLevel > 0 ? (
			Event Player.PAPLevel >= Global.UpgradableLevels ? Custom String("MAX") : Event Player.PAPLevel) : Custom String(""), Left, 10,
			Color(Rose), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player.isHUDhidden ? Null : Event Player, Custom String("Enemies Left: {0}",
			Global.BossStarted ? Icon String(Question Mark) : Global.ZombiesLeft), Global.ZombiesLeft == 1 ? Custom String(
			"Distance - {0}", Distance Between(Event Player, All Living Players(Team 2))) : Custom String(""), Null, Left, 3, Color(Red),
			Color(Rose), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player.isHUDhidden ? Null : Event Player, Custom String("Perks:"), Null, Null, Left, 5, Color(Gray), Color(
			White), Color(White), Visible To and String, Default Visibility);
		disabled Create HUD Text(Event Player, Null, Null, Custom String("{0}\r\n{1}", Custom String("{0}\r\n{1}", Event Player.Perks[1],
			Event Player.Perks[2]), Custom String("{0}\r\n{1}", Event Player.Perks[3], Event Player.Perks[4])), Left, 6, Color(Gray),
			Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player.isHUDhidden ? Null : Event Player, Event Player.SelfRevives >= 1 ? Custom String("Self Revives: {0}",
			Event Player.SelfRevives) : Custom String(""), Null, Null, Left, 7, Color(Violet), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(Global.IsChallengeActive && !Event Player.isHUDhidden ? Event Player : Null,
			Event Player.RewardType == 4 ? Custom String("CLAIM YOUR REWARD - {0}", Global.ChallengeTimer) : Custom String(
			"{0} - {1}s {2}", Global.Challenge, Global.ChallengeTimer, Event Player.ChallengeScore), Null, Null, Right, 6,
			Event Player.RewardType == 1 ? Color(Green) : (Event Player.RewardType == 2 ? Color(Purple) : (
			Event Player.RewardType == 3 ? Color(Rose) : (Event Player.RewardType == 4 ? Color(Orange) : Color(White)))), Color(White),
			Color(White), Visible To String and Color, Default Visibility);
		disabled Create HUD Text(Entity Exists(Event Player) ? Remove From Array(Filtered Array(All Players(Team 1),
			!Current Array Element.isHUDhidden), Event Player) : Null, Custom String("{2} {0}: {1}", Event Player, Event Player.Points,
			Event Player.backupIsDown ? Icon String(Halo) : (Is Dead(Event Player) ? Icon String(Skull) : Hero Icon String(Hero Of(
			Event Player)))), Event Player.PAPLevel > 0 ? Custom String("Upgrade Lvl: {0}", Event Player.PAPLevel) : Custom String(""),
			Event Player.backupIsDown ? Custom String("Downed") : (Is Dead(Event Player) ? Custom String("Dead") : Custom String(
			"{1} {0}%", Round To Integer(Normalized Health(Event Player) * 100, To Nearest), Icon String(Heart))), Left, 11, Color(Red),
			Color(White), Is Dead(Event Player) || Event Player.backupIsDown ? Color(White) : (Normalized Health(Event Player)
			> 0.750 ? Color(Green) : (Normalized Health(Event Player) <= 0.750 && Normalized Health(Event Player) >= 0.450 ? Color(Yellow)
			: Color(Red))), Visible To String and Color, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("{0}\r\n{1}\r\n{2}", Custom String(" "), Custom String(" "), Custom String(" ")),
			Null, Left, 9, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Disable Kill Feed(Event Player);
		Create Progress Bar HUD Text(Global.BossStarted && !Event Player.isHUDhidden ? Event Player : Null, Normalized Health(
			Global.BossBot) * 100, Custom String("Boss Health"), Top, -1, Color(Red), Color(Red), Visible To Values and Color,
			Default Visibility);
		Create HUD Text(Global.ShowBuildablesMenu && !Event Player.isHUDhidden ? Event Player : Null, Custom String("{0}{1}{2}",
			Array Contains(Global.Parts, Custom String("One")) ? Ability Icon String(Global.HeroBuildable, Button(Ability 1)) : Null,
			Array Contains(Global.Parts, Custom String("Two")) ? Ability Icon String(Global.HeroBuildable, Button(Ability 2)) : Null,
			Array Contains(Global.Parts, Custom String("Three")) ? Ability Icon String(Global.HeroBuildable, Button(Ultimate)) : Null),
			Null, Null, Right, 0, Global.CanBuyBuildable ? Color(Green) : Color(White), Color(White), Color(White),
			Visible To Sort Order String and Color, Default Visibility);
		Create HUD Text(Global.exfilStarted && !Event Player.isHUDhidden ? Event Player : Null, Custom String("Exfil Timer: {0}",
			Global.exfilTimer), Global.canEscapeExfil ? Custom String("Group up in the exfil portal") : Custom String(
			"Eliminate enemies to open the portal"), Global.canEscapeExfil ? Custom String("{0}/{1}", Count Of(Filtered Array(
			Players Within Radius(Global.exfilLocation, 5, Team 1, Off), Is Alive(Current Array Element)
			|| !Current Array Element.backupIsDown)), Count Of(Filtered Array(All Players(Team 1), Is Alive(Current Array Element)
			|| !Current Array Element.backupIsDown))) : Custom String("{0}/{1}", Global.exfilKillCounter, Global.exfilRequirement), Right,
			3, Color(Aqua), Color(White), Color(White), Visible To and String, Default Visibility);
		Create Effect(Is Dead(Event Player) ? Null : (Event Player.OutOfBounds ? Event Player : Null), Cloud, Color(Purple), Eye Position(
			Event Player), 5, Visible To Position and Radius);
		Create HUD Text(Event Player.OutOfBounds && !Event Player.isHUDhidden ? Event Player : Null, Custom String(
			"{0} YOU ARE IN THE DARKNESS! {0}", Icon String(Warning)), Null, Null, Top, 0, Color(Violet), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create Effect(Is Dead(Event Player) ? Null : (Event Player.OutOfBounds ? Event Player : Null), Cloud, Color(Purple), Eye Position(
			Event Player), 4, Visible To Position and Radius);
		Create Effect(Is Dead(Event Player) ? Null : (Event Player.OutOfBounds ? Event Player : Null), Cloud, Color(Purple), Eye Position(
			Event Player), 3, Visible To Position and Radius);
		Create Effect(Is Dead(Event Player) ? Null : (Event Player.OutOfBounds ? Event Player : Null), Sphere, Color(Purple), Eye Position(
			Event Player), 1, Visible To Position and Radius);
		Event Player.PAPLevel = 0;
		disabled Disable Nameplates(All Players(Team 2), Event Player);
		Disable Game Mode HUD(Event Player);
		Create HUD Text(Event Player.isHUDhidden ? Null : Event Player, Null, Null, Custom String("{0}\r\n{1}", Custom String("{0}\r\n{1}",
			Array Contains(Event Player.Perks, Custom String("QuickRevive")) ? Custom String("Quick Revive - Tier {0}",
			Event Player.QuickLevel >= Global.MaxPerkTiers ? Custom String("MAX") : Event Player.QuickLevel) : Custom String(" "),
			Array Contains(Event Player.Perks, Custom String("Juggernog")) ? Custom String("Juggernog - Tier {0}",
			Event Player.JuggLevel >= Global.MaxPerkTiers ? Custom String("MAX") : Event Player.JuggLevel) : Custom String(" ")),
			Custom String("{0}\r\n{1}", Array Contains(Event Player.Perks, Custom String("ElectricCherry")) ? Custom String(
			"Electric Cherry - Tier {0}", Event Player.ElectricLevel >= Global.MaxPerkTiers ? Custom String("MAX")
			: Event Player.ElectricLevel) : Custom String(" "), Array Contains(Event Player.Perks, Custom String("StaminUp"))
			? Custom String("Staminup - Tier {0}", Event Player.StaminLevel >= Global.MaxPerkTiers ? Custom String("MAX")
			: Event Player.StaminLevel) : Custom String(" "))), Left, 6, Color(Gray), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Start Healing Modification(Event Player, All Players(All Teams), Event Player.OutOfBounds ? 0 : 100,
			Receivers Healers and Healing Percent);
		Create Effect(Is True For Any(All Players(Team Of(Event Player)),
			Current Array Element.backupRevivee == Event Player && Event Player.backupBeingRevived) ? All Players(All Teams) : Null,
			Ana Nano Boosted Sound, Color(White), Event Player, 200, Visible To Position and Radius);
		Create Effect(Is True For Any(All Players(Team Of(Event Player)),
			Current Array Element.backupRevivee == Event Player && Event Player.backupBeingRevived) ? All Players(All Teams) : Null,
			Sparkles, Team Of(Event Player), Event Player, 5, Visible To Position and Radius);
		Create In-World Text(Event Player.backupIsDown ? Remove From Array(All Players(Team Of(Event Player)), Event Player) : Null,
			Is True For Any(All Players(Team Of(Event Player)),
			Current Array Element.backupRevivee == Event Player && Event Player.backupBeingRevived) ? Custom String("Reviving - {0}%",
			Round To Integer(Event Player.backupReviveTimer / Event Player.ReviveMaxTime * 100, To Nearest)) : (
			Event Player.backupDownExpireTimer != 0 ? (Global.DeathMaxTime == 0 ? Custom String("Revive") : Custom String("Revive - {0}",
			Round To Integer(Event Player.backupDownExpireTimer, To Nearest))) : Custom String("Revive")), Event Player, 1, Do Not Clip,
			Visible To Position String and Color, Is True For Any(All Players(Team Of(Event Player)),
			Current Array Element.backupRevivee == Event Player && Event Player.backupBeingRevived) ? Color(Yellow) : Color(Blue),
			Default Visibility);
		Create Icon(Event Player.backupIsDown ? Remove From Array(All Players(Team Of(Event Player)), Event Player) : Null, Event Player,
			Halo, Visible To and Position, Color(Yellow), True);
		Create Effect(Event Player.backupIsDown ? All Players(Team Of(Event Player)) : Null, Ring, Color(White), Event Player, 5,
			Visible To Position and Radius);
		Create Progress Bar HUD Text(
			Event Player.backupIsDown && Event Player.backupDownExpireTimer != 0 && Global.DeathMaxTime != 0 ? Event Player : Null,
			Event Player.backupDownExpireTimer / Global.DeathMaxTime * 100, Custom String("DOWNED"), Top, 0, Color(Red), Color(Red),
			Visible To Values and Color, Default Visibility);
		Create Progress Bar HUD Text(Event Player.backupBeingRevived ? Event Player : Null,
			Event Player.backupReviveTimer / Event Player.ReviveMaxTime * 100, Custom String("BEING REVIVED"), Top, 0, Color(Yellow),
			Color(Yellow), Visible To Values and Color, Default Visibility);
		Create Progress Bar HUD Text(
			Event Player.backupRevivee.backupBeingRevived && Event Player != Event Player.backupRevivee ? Event Player : Null,
			Event Player.backupRevivee.backupReviveTimer / Event Player.ReviveMaxTime * 100, Custom String("REVIVING {0}",
			Event Player.backupRevivee), Top, 0, Color(Yellow), Color(Yellow), Visible To Values and Color, Default Visibility);
		Disable Built-In Game Mode Respawning(Event Player);
		Disable Movement Collision With Players(Event Player);
		Event Player.PlayerReadiedUp = False;
		Create HUD Text(Global.BossReadyTimer == 0 || Global.BossStarted == True ? Null : Event Player, Custom String("{2}\r\n{1} - {0}",
			Global.BossReadyTimer, Custom String("Hold {0} to vote - {1}/{2}", Custom String("{0}+{1}", Input Binding String(Button(
			Interact)), Input Binding String(Button(Crouch))), Count Of(Filtered Array(All Players(Team 1),
			Current Array Element.PlayerReadiedUp == True)), Number Of Players(Team 1)), Custom String("Someone wants to start the boss")),
			Null, Null, Right, 0, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.Perks = Empty Array;
		If(Global.RequireInteractToRevive);
			Create HUD Text(Count Of(Filtered Array(All Players(Team 1), Distance Between(Current Array Element, Event Player)
				<= 5 && Current Array Element.backupIsDown)) >= 1 ? (Event Player.backupIsDown ? Null : Event Player) : Null, Custom String(
				"Press {0} to revive {1}{2}", Input Binding String(Button(Interact)), Hero Icon String(Hero Of(First Of(Sorted Array(
				Filtered Array(All Players(Team 1), Distance Between(Event Player, Current Array Element)
				<= 5 && Current Array Element.backupIsDown), Distance Between(Event Player, Current Array Element))))), First Of(Sorted Array(
				Filtered Array(All Players(Team 1), Distance Between(Event Player, Current Array Element)
				<= 5 && Current Array Element.backupIsDown), Distance Between(Event Player, Current Array Element)))), Null, Null, Top, 22,
				Color(Orange), Color(White), Color(White), Visible To Sort Order String and Color, Default Visibility);
		End;
		Create HUD Text(Global.exfilReadyTimer == 0 || Global.exfilStarted == True ? Null : Event Player, Custom String("{2}\r\n{1} - {0}",
			Global.exfilReadyTimer, Custom String("Hold {0} to vote - {1}/{2}", Custom String("{0}+{1}", Input Binding String(Button(
			Interact)), Input Binding String(Button(Crouch))), Count Of(Filtered Array(All Players(Team 1),
			Current Array Element.exfilVote == True)), Number Of Players(Team 1)), Custom String("Someone wants to exfil!")), Null, Null,
			Right, 1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player.backupIsDown && Is Alive(Event Player) && Global.ReviveSettings[1] ? Event Player : Null,
			Custom String("{1}\r\n{0}", Custom String("{0} Previous - {2} - Next {1}", Input Binding String(Button(Secondary Fire)),
			Input Binding String(Button(Primary Fire)), Index Of Array Value(Sorted Array(All Players(Team 1),
			Current Array Element == Event Player ? 100 : 0), Event Player) == Event Player.spectatingIndex ? Custom String("Yourself")
			: Sorted Array(All Players(Team 1), Current Array Element == Event Player ? 100 : 0)[Event Player.spectatingIndex]),
			Custom String("Spectating")), Null, Null, Top, 0, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Create HUD Text(Global.CinematicMode && !Event Player.isHUDhidden ? Event Player : Null, Custom String(""), Custom String(
			"Cinematic Mode Menu"), Custom String("{0}\r\n{1}", Custom String("{0}", Custom String("{0} Ignore Me  - {1}", Custom String(
			"{0}+{1}", Input Binding String(Button(Crouch)), Input Binding String(Button(Ability 2))), Event Player.ignoreMe)),
			Custom String("{0}", Custom String("{0} Toggle HUD - {1}", Custom String("{0}+{1}", Input Binding String(Button(Crouch)),
			Input Binding String(Button(Ability 1)))), Event Player.isHUDhidden)), Right, 0, Color(White), Color(White), Color(White),
			Visible To Sort Order String and Color, Default Visibility);
		Event Player.isHUDhidden = False;
		Event Player.ignoreMe = False;
		Set Invisible(Event Player, None);
		Event Player.Points = Global.StartingPoints;
		Create HUD Text(Entity Exists(Event Player) ? Remove From Array(Filtered Array(All Players(Team 1),
			!Current Array Element.isHUDhidden), Event Player) : Null, Custom String("{2} {0}: {1}", Event Player, Event Player.Points,
			Event Player.backupIsDown ? Icon String(Halo) : (Is Dead(Event Player) ? Icon String(Skull) : Hero Icon String(Hero Of(
			Event Player)))), True ? Custom String("{0}     {1}     {2}", Event Player.PAPLevel == 0 ? Custom String("") : Custom String(
			"{0}{1}", Icon String(Fire), Event Player.PAPLevel), Custom String("{0}     {1}", Array Contains(Event Player.Perks,
			Custom String("QuickRevive")) ? Custom String("{0}{1}", Icon String(Halo), Event Player.QuickLevel) : Custom String(""),
			Array Contains(Event Player.Perks, Custom String("Juggernog")) ? Custom String("{0}{1}", Icon String(Plus),
			Event Player.JuggLevel) : Custom String("")), Custom String("{0}     {1}", Array Contains(Event Player.Perks, Custom String(
			"ElectricCherry")) ? Custom String("{0}{1}", Icon String(Dizzy), Event Player.ElectricLevel) : Custom String(""),
			Array Contains(Event Player.Perks, Custom String("StaminUp")) ? Custom String("{0}{1}", Icon String(Spiral),
			Event Player.StaminLevel) : Custom String(""))) : Custom String(""), Event Player.backupIsDown ? Custom String("Downed") : (
			Is Dead(Event Player) ? Custom String("Dead") : Custom String("{1} {0}%", Round To Integer(Normalized Health(Event Player)
			* 100, To Nearest), Icon String(Heart))), Left, 11, Color(Red), Color(White), Is Dead(Event Player)
			|| Event Player.backupIsDown ? Color(White) : (Normalized Health(Event Player) > 0.750 ? Color(Green) : (Normalized Health(
			Event Player) <= 0.750 && Normalized Health(Event Player) >= 0.450 ? Color(Yellow) : Color(Red))), Visible To String and Color,
			Default Visibility);
		Create HUD Text(Count Of(Global.Modifiers) > 0 ? Event Player : Null, Custom String(""), Custom String("Modifiers"), Custom String(
			"{0}\r\n{1}\r\n{2}", Count Of(Global.Modifiers) > 0 ? Global.Modifiers[0] : Custom String(""), Count Of(Global.Modifiers)
			> 1 ? Global.Modifiers[1] : Custom String(""), Count Of(Global.Modifiers) > 2 ? Global.Modifiers[2] : Custom String("")),
			Right, -5, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("Difficulty: {0}", Global.Difficulty == 0 ? Custom String("Normal") : (
			Global.Difficulty == 1 ? Custom String("Hard") : Custom String("Expert"))), Null, Right, -4, Color(White), Color(Turquoise),
			Color(White), Visible To and String, Default Visibility);
	}
}

disabled rule("Buy Message")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		If(Global.Power == True);
		Else;
			disabled Small Message(All Players(All Teams), Custom String("1"));
			"Jug"
			If(Distance Between(Event Player, Global.JugLocation) <= 2);
				Small Message(All Players(All Teams), Custom String("{0} {1} {2}", Custom String("Press"), Input Binding String(Button(Interact)),
					Custom String("to use")));
			"Quick"
			Else If(Distance Between(Event Player, Global.QuickReviveLocation) <= 2);
				Small Message(All Players(All Teams), Custom String("{0} {1} {2}", Custom String("Press"), Input Binding String(Button(Interact)),
					Custom String("to use")));
			"Double"
			Else If(Distance Between(Event Player, Global.ElectricLocation) <= 2);
				Small Message(All Players(All Teams), Custom String("{0} {1} {2}", Custom String("Press"), Input Binding String(Button(Interact)),
					Custom String("to use")));
			"Stamin"
			Else If(Distance Between(Event Player, Global.StaminLocation) <= 2);
				Small Message(All Players(All Teams), Custom String("{0} {1} {2}", Custom String("Press"), Input Binding String(Button(Interact)),
					Custom String("to use")));
			End;
		End;
		Wait(3, Ignore Condition);
		Wait Until(Distance Between(Event Player, Global.PerkLocations) <= 2, 99999);
		Loop;
	}
}

rule("Barrier")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Spawn Room(Event Player) == False;
		Global.DebugMode == False;
		Event Player.Escaped == False;
		Is Alive(Event Player) == True;
	}

	actions
	{
		If(Distance Between(Event Player, Global.Barrier) >= Global.BarrierRadius + 1);
			Set Status(Team Of(Event Player) == Team 1 ? Event Player : Null, Null, Hacked, 3);
			If(Event Player.OutOfBounds == False);
				Small Message(Event Player, Custom String("{0}: {1}", Hero Icon String(Hero(Soldier: 76)), Random Value In Array(
					Global.BarrierLines)));
			End;
			Event Player.OutOfBounds = True;
			Wait(1, Ignore Condition);
			Damage(Event Player, Null, Team Of(Event Player) == Team 1 ? 50 : 10);
		Else;
			Event Player.OutOfBounds = False;
		End;
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("MysteryBox")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.MysteryBox) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.DisablePurchases != True;
		Global.DebugMode == False;
		Array Contains(Global.Modifiers, Custom String("Mystery Heroes")) == False;
	}

	actions
	{
		If(Event Player.Points >= 950);
			Event Player.Points -= 950;
			Global.MysteryBoxReward = Random Value In Array(Filtered Array(Global.HeorWeapons, Hero Of(Event Player)
				!= Current Array Element && Global.HeroBuildable != Current Array Element));
			If(Global.MysteryBoxReward == Hero Of(Event Player));
				Big Message(Event Player, Custom String("BAD LUCK!"));
				Communicate(Event Player, Sorry);
			Else;
				Start Forcing Player To Be Hero(Event Player, Global.MysteryBoxReward);
				If(Event Player.PAPLevel >= 1);
					Set Max Ammo(Event Player, 0, Max Ammo(Event Player, 0) + Max Ammo(Event Player, 0));
					Set Max Ammo(Event Player, 1, Max Ammo(Event Player, 1) + Max Ammo(Event Player, 1));
					Set Ammo(Event Player, 0, Max Ammo(Event Player, 0));
					Set Ammo(Event Player, 1, Max Ammo(Event Player, 1));
				End;
			End;
		End;
		Wait(3, Ignore Condition);
	}
}

rule("Give Points - Kill")
{
	event
	{
		Player Earned Elimination;
		All;
		All;
	}

	conditions
	{
		Global.DebugMode == False;
	}

	actions
	{
		If(Global.ElimPointsType == 0);
			Event Player.Points += 100;
			Event Player.Score += 100;
			If(Global.DoublePointsActive == True);
				Event Player.Points += 100;
				Event Player.Score += 100;
			End;
		Else;
			Event Player.Points += 130;
			Event Player.Score += 130;
			If(Global.DoublePointsActive == True);
				Event Player.Points += 130;
				Event Player.Score += 130;
			End;
	}
}

rule("Give Points - Damage")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Global.DebugMode == False;
		Global.ElimPointsType == 0;
	}

	actions
	{
		Event Player.Points += 10;
		Event Player.Score += 10;
		If(Global.DoublePointsActive == True);
			Event Player.Points += 10;
			Event Player.Score += 10;
		End;
	}
}

rule("Start Game")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.DebugMode == False;
		Is True For All(All Players(Team 1), Current Array Element.PlayerReadiedUp == True) == True;
		disabled Has Spawned(Host Player) == True;
		Global.HasGameStarted == False;
		Count Of(Filtered Array(All Players(Team 1), Is Alive(Current Array Element))) > 0;
	}

	actions
	{
		disabled Wait Until(Is Button Held(Host Player, Button(Interact)), 99999);
		Global.HasGameStarted = True;
		Wait(15, Ignore Condition);
		Destroy All HUD Text;
		Global.InGamePlayers = All Players(Team 1);
		Enable Hero HUD(All Players(All Teams));
		Enable Messages(All Players(All Teams));
		Global.ShowGameStart = True;
		Call Subroutine(SpawnEnemyPortals);
		Teleport(All Players(Team 1), Global.PlayerSpawn);
		Small Message(All Players(All Teams), Custom String("{0} \"{1}\"", Hero Icon String(Hero(Soldier: 76)), Random Value In Array(
			Global.RandomStartLines)));
		Global.StartDirector = True;
		Global.ZombiesLeft = 5;
		Global.Power = False;
		If(Number Of Players(Team 1) == 1);
			All Players(Team 1).SelfRevives = 3;
		End;
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(X Component Of(Global.EE2Location), Y Component Of(
			Global.EE2Location) - 2, Z Component Of(Global.EE2Location)), Vector(X Component Of(Global.EE2Location) + 0.001,
			Y Component Of(Global.EE2Location) + 2, Z Component Of(Global.EE2Location)), Color(White), Visible To);
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(X Component Of(Global.EE3Location), Y Component Of(
			Global.EE3Location) - 2, Z Component Of(Global.EE3Location)), Vector(X Component Of(Global.EE3Location) + 0.001,
			Y Component Of(Global.EE3Location) + 2, Z Component Of(Global.EE3Location)), Color(White), Visible To);
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(X Component Of(Global.EE1Location), Y Component Of(
			Global.EE1Location) - 2, Z Component Of(Global.EE1Location)), Vector(X Component Of(Global.EE1Location) + 0.001,
			Y Component Of(Global.EE1Location) + 2, Z Component Of(Global.EE1Location)), Color(White), Visible To);
		Global.OpenAnomaly = False;
		Global.AnomalyLocation = Vector(X Component Of(Global.AnomalyLocation), Y Component Of(Global.AnomalyLocation) + 5, Z Component Of(
			Global.AnomalyLocation));
		Create In-World Text(Filtered Array(All Players(All Teams), !Current Array Element.isHUDhidden), Custom String(
			"Random Hero - {0} Points", Global.MysteryBoxPrice), Vector(X Component Of(Global.MysteryBox), Y Component Of(
			Global.MysteryBox) - 0.500, Z Component Of(Global.MysteryBox)), 1, Clip Against Surfaces, Visible To Position and String,
			Color(Orange), Default Visibility);
		Create In-World Text(Filtered Array(All Players(All Teams), !Current Array Element.isHUDhidden), Custom String(
			"Turn on Power - {0} Points", Global.PowerPrice), Vector(X Component Of(Global.PowerLocation), Y Component Of(
			Global.PowerLocation) - 0.500, Z Component Of(Global.PowerLocation)), 1, Clip Against Surfaces, Visible To Position and String,
			Color(White), Default Visibility);
		Global.HasGameStarted = True;
		Clear Status(All Players(All Teams), Stunned);
		Stop Camera(All Players(All Teams));
		Global.StartTimer = True;
		Pause Match Time;
		Create In-World Text(Filtered Array(All Players(All Teams), !Current Array Element.isHUDhidden), Custom String(
			"Play a Challenge - {0} Points", Global.ChallengePrice), Vector(X Component Of(Global.ChallengesLocation), Y Component Of(
			Global.ChallengesLocation) - 0.500, Z Component Of(Global.ChallengesLocation)), 1, Clip Against Surfaces,
			Visible To Position and String, Color(Lime Green), Default Visibility);
		All Players(Team 1).Points = Global.StartingPoints;
		Wait(5, Ignore Condition);
		Create Dummy Bot(Random Value In Array(Global.EnemyTypes), Team 2, -1, Random Value In Array(Global.EnemySpawns), Vector(0, 0, 0));
		Create Dummy Bot(Random Value In Array(Global.EnemyTypes), Team 2, -1, Random Value In Array(Global.EnemySpawns), Vector(0, 0, 0));
		Create Dummy Bot(Random Value In Array(Global.EnemyTypes), Team 2, -1, Random Value In Array(Global.EnemySpawns), Vector(0, 0, 0));
		Create Dummy Bot(Random Value In Array(Global.EnemyTypes), Team 2, -1, Random Value In Array(Global.EnemySpawns), Vector(0, 0, 0));
	}
}

rule("Update Bots Difficulty on Repeat")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.DebugMode == False;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Set Max Health(Event Player, 20 + Global.Wave * 5);
		Set Damage Dealt(Event Player, 10 + Global.Wave * 2.500);
		Loop;
	}
}

rule("Bot Dies from Player")
{
	event
	{
		Player Died;
		Team 2;
		All;
	}

	conditions
	{
		Attacker != Null;
		Global.BossBot != Event Player;
		Event Was Environment != True;
		Global.DebugMode == False;
	}

	actions
	{
		If(Global.exfilStarted == True);
			Global.exfilKillCounter += 1;
		End;
		Global.ZombiesLeft -= 1;
		If(Global.ZombiesLeft < Number Of Players(Team 2));
			Disable Built-In Game Mode Respawning(Event Player);
		Else;
			Enable Built-In Game Mode Respawning(All Players(Team 2));
			Wait(5, Ignore Condition);
			Respawn(Victim);
		End;
		If(Global.ZombiesLeft == 0);
			Call Subroutine(NextRound);
		End;
	}
}

rule("StartEnd Round")
{
	event
	{
		Subroutine;
		NextRound;
	}

	actions
	{
		If(Global.EnableExfil && Global.exfilStarted);
			disabled Destroy All Dummy Bots;
			Small Message(All Players(All Teams), Custom String("{0}: \"Portal is opened! Get in before its destroyed!\"", Hero Icon String(
				Hero(Ana))));
			Respawn(Filtered Array(All Dead Players(Team 1), Array Contains(Global.InGamePlayers, Current Array Element)));
			Small Message(All Players(All Teams), Custom String("Exfil Completed!"));
			Global.canEscapeExfil = True;
		Else;
			If(Global.Event == Custom String("Low Gravity"));
				Set Gravity(All Players(All Teams), 100);
			Else If(Global.Event == Custom String("Purchases Disabled"));
				Global.DisablePurchases = False;
			Else If(Global.Event == Custom String("Defuse the Bomb"));
				Global.DefuseBomb = False;
				Destroy Effect(Global.SpecialEventEffects[0]);
				Destroy Effect(Global.SpecialEventEffects[1]);
			End;
			Play Effect(All Players(All Teams), Buff Impact Sound, Color(White), Global.Barrier, 100);
			Global.StartBonusEvent = False;
			Big Message(All Players(All Teams), Custom String("Wave Completed"));
			Respawn(Filtered Array(All Dead Players(Team 1), Array Contains(Global.InGamePlayers, Current Array Element)));
			Wait(5, Ignore Condition);
			If(Global.WaveLimit != 0);
				If(Global.Wave == Global.WaveLimit);
					Global.GameOverMenu = True;
				End;
			Else;
				Global.Wave += 1;
				Global.WaveIncrement += 1;
				Global.exfilRoundCounter += 1;
				If(Global.enemyTypeHandling == 0);
					If(Global.Wave == 11);
						Modify Global Variable(EnemyTypes, Append To Array, Hero(Ramattra));
						Big Message(All Players(All Teams), Custom String("New type of Enemy Detected! - Ravenger"));
					Else If(Global.Wave == 21);
						Modify Global Variable(EnemyTypes, Append To Array, Hero(Zenyatta));
						Big Message(All Players(All Teams), Custom String("New type of Enemy Detected! - Boomyatta"));
					End;
				End;
				Wait(0.250, Ignore Condition);
				Big Message(All Players(All Teams), Custom String("Wave {0}", Global.Wave));
				Global.ZombiesLeft = 6 + Global.Wave + 2;
				Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Global.Barrier, 100);
				Wait(2, Ignore Condition);
				Respawn(All Players(Team 2));
				If(Global.WaveIncrement == 5);
					Global.WaveIncrement = 0;
					If(Global.EnableSpecialEvents == True);
						Global.StartBonusEvent = True;
					End;
				End;
				If(Global.Wave == 1);
					Create Dummy Bot(Random Value In Array(Global.EnemyTypes), Team 2, -1, Random Value In Array(Global.EnemySpawns), Vector(0, 0, 0));
					Create Dummy Bot(Random Value In Array(Global.EnemyTypes), Team 2, -1, Random Value In Array(Global.EnemySpawns), Vector(0, 0, 0));
					Create Dummy Bot(Random Value In Array(Global.EnemyTypes), Team 2, -1, Random Value In Array(Global.EnemySpawns), Vector(0, 0, 0));
				End;
				If(Global.exfilRoundCounter == 6);
					If(Global.Wave >= 10);
						Global.canExfil = True;
						Small Message(All Players(All Teams), Custom String("{0}: \"Good news! Exfil is opened!\"", Hero Icon String(Hero(Soldier: 76))));
					End;
				Else If(Global.exfilRoundCounter == 7);
					If(Global.canExfil == True);
						Small Message(All Players(All Teams), Custom String("{0}: \"Exfil window closed! Will circle back later.\"", Hero Icon String(Hero(
							Ana))));
						Global.exfilRoundCounter = 2;
						Global.canExfil = False;
					End;
				End;
	}
}

rule("Bot Falls Off")
{
	event
	{
		Player Died;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Event Was Environment == True;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Respawn(Event Player);
	}
}

disabled rule("Player Dies - Has Self Revive")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == False;
		Event Player.SelfRevives >= 1;
		Global.DebugMode == False;
	}

	actions
	{
		If(Event Player.SelfRevives >= 1);
			If(Global.PerkLossType == 0);
				If(Count Of(Event Player.Perks) >= 1);
					If(Event Player.Perks[Count Of(Event Player.Perks) - 1] == Custom String("Juggernog"));
						Event Player.JuggLevel = 0;
					Else If(Event Player.Perks[Count Of(Event Player.Perks) - 1] == Custom String("StaminUp"));
						Event Player.StaminLevel = 0;
					Else If(Event Player.Perks[Count Of(Event Player.Perks) - 1] == Custom String("ElectricCherry"));
						Event Player.ElectricLevel = 0;
					Else If(Event Player.Perks[Count Of(Event Player.Perks) - 1] == Custom String("QuickRevive"));
						Event Player.QuickLevel = 0;
					End;
					Event Player.Perks = Remove From Array(Event Player.Perks, Event Player.Perks[Count Of(Event Player.Perks) - 1]);
				End;
			Else If(Global.PerkLossType == 1);
				Event Player.Perks = Empty Array;
			End;
			Wait(5, Abort When False);
			If(Global.WeaponLossType == 1);
				Start Forcing Player To Be Hero(Event Player, Hero(D.Va));
			End;
			Event Player.SelfRevives -= 1;
		Else If(Event Player.SelfRevives <= 0);
			If(Count Of(Event Player.Perks) >= 1);
				If(Event Player.Perks[Count Of(Event Player.Perks) - 1] == Custom String("Juggernog"));
					Event Player.JuggLevel = 0;
				Else If(Event Player.Perks[Count Of(Event Player.Perks) - 1] == Custom String("StaminUp"));
					Event Player.StaminLevel = 0;
				Else If(Event Player.Perks[Count Of(Event Player.Perks) - 1] == Custom String("ElectricCherry"));
					Event Player.ElectricLevel = 0;
				Else If(Event Player.Perks[Count Of(Event Player.Perks) - 1] == Custom String("QuickRevive"));
					Event Player.QuickLevel = 0;
				End;
				Event Player.Perks = Remove From Array(Event Player.Perks, Event Player.Perks[Count Of(Event Player.Perks) - 1]);
			End;
	}
}

rule("Check Perks")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.DebugMode == False;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		If(Array Contains(Event Player.Perks, Custom String("StaminUp")));
			Set Move Speed(Event Player, 100 + 15 * Event Player.StaminLevel);
		Else;
			Set Move Speed(Event Player, 100);
		End;
		If(Array Contains(Event Player.Perks, Custom String("Juggernog")));
			Set Max Health(Event Player, 100 + 15 * Event Player.JuggLevel);
		Else;
			Set Max Health(Event Player, 100);
		End;
		If(Array Contains(Event Player.Perks, Custom String("ElectricCherry")));
			disabled Wait Until(Is Reloading(Event Player), 99999);
			disabled If(Event Player.ElectricCherryReady);
			disabled Call Subroutine(ElectricCherryEffects);
			disabled End;
		Else If(Array Contains(Event Player.Perks, Custom String("Electric Cherry")) == False);
			Event Player.ElectricCherryReady = False;
		End;
		If(Array Contains(Event Player.Perks, Custom String("QuickRevive")));
			If(Event Player.SelfRevives > 0 && Event Player.backupIsDown);
				Event Player.ReviveMaxTime = Global.ReviveMaxTime;
			Else;
				Event Player.ReviveMaxTime = Global.ReviveMaxTime / 2;
			End;
		Else;
			Event Player.ReviveMaxTime = Global.ReviveMaxTime;
		End;
		Set Respawn Max Time(Event Player, 9999);
		Loop;
	}
}

rule("Electric Cherry")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Array Contains(Event Player.Perks, Custom String("ElectricCherry")) == True;
	}

	actions
	{
		Event Player.ElectricCherryReady = True;
		Wait Until(Is Reloading(Event Player), 99999);
		disabled If(Count Of(Players Within Radius(Event Player, 5, Opposite Team Of(Team Of(Event Player)), Surfaces)) >= 1);
		If(Event Player.ElectricCherryReady == True);
			Set Status(Players Within Radius(Event Player, 5 * Event Player.ElectricLevel, Opposite Team Of(Team Of(Event Player)), Off), Null,
				Frozen, 5);
			Play Effect(Event Player, Lúcio Sound Barrier Cast Effect, Color(Team 1), Position Of(Event Player), 3);
			Play Effect(Event Player, Tracer Recall Disappear Sound, Color(White), Event Player, 100);
			Event Player.ElectricCherryReady = False;
			Wait(8, Abort When False);
			Wait Until(!Is Reloading(Event Player), 99999);
			Event Player.ElectricCherryReady = True;
			Play Effect(Event Player, Good Pickup Effect, Color(White), Position Of(Event Player), 3);
			Play Effect(Event Player, Ring Explosion Sound, Color(White), Event Player, 100);
		End;
		Loop If Condition Is True;
	}
}

rule("Power Animation")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.DebugMode == False;
	}

	actions
	{
		Wait Until(Global.Power == True, 99999);
		Play Effect(All Players(All Teams), Sombra EMP Explosion Effect, Color(White), Global.PackAPunchLocation, 20);
		Play Effect(All Players(All Teams), Sombra EMP Explosion Sound, Color(White), Global.PackAPunchLocation, 100);
		Wait(1, Ignore Condition);
		Play Effect(All Players(All Teams), Sombra EMP Explosion Effect, Color(White), Global.JugLocation, 20);
		Play Effect(All Players(All Teams), Sombra EMP Explosion Sound, Color(White), Global.JugLocation, 100);
		Wait(1, Ignore Condition);
		Play Effect(All Players(All Teams), Sombra EMP Explosion Effect, Color(White), Global.ElectricLocation, 20);
		Play Effect(All Players(All Teams), Sombra EMP Explosion Sound, Color(White), Global.ElectricLocation, 100);
		Wait(1, Ignore Condition);
		Play Effect(All Players(All Teams), Sombra EMP Explosion Effect, Color(White), Global.QuickReviveLocation, 20);
		Play Effect(All Players(All Teams), Sombra EMP Explosion Sound, Color(White), Global.QuickReviveLocation, 100);
		Wait(1, Ignore Condition);
		Play Effect(All Players(All Teams), Sombra EMP Explosion Effect, Color(White), Vector(X Component Of(Global.EE1Location),
			Y Component Of(Global.EE1Location) + 2, Z Component Of(Global.EE1Location)), 20);
		Play Effect(All Players(All Teams), Sombra EMP Explosion Sound, Color(White), Vector(X Component Of(Global.EE1Location),
			Y Component Of(Global.EE1Location) + 2, Z Component Of(Global.EE1Location)), 100);
		Create Effect(All Players(All Teams), Orb, Global.EE1Active == True ? Color(Purple) : Color(Gray), Vector(X Component Of(
			Global.EE1Location), Y Component Of(Global.EE1Location) + 2, Z Component Of(Global.EE1Location)), 0.500,
			Visible To Position Radius and Color);
		Wait(1, Ignore Condition);
		Play Effect(All Players(All Teams), Sombra EMP Explosion Effect, Color(White), Vector(X Component Of(Global.EE2Location),
			Y Component Of(Global.EE2Location) + 2, Z Component Of(Global.EE2Location)), 20);
		Play Effect(All Players(All Teams), Sombra EMP Explosion Sound, Color(White), Vector(X Component Of(Global.EE2Location),
			Y Component Of(Global.EE2Location) + 2, Z Component Of(Global.EE2Location)), 100);
		Create Effect(All Players(All Teams), Orb, Global.EE2Active == True ? Color(Purple) : Color(Gray), Vector(X Component Of(
			Global.EE2Location), Y Component Of(Global.EE2Location) + 2, Z Component Of(Global.EE2Location)), 0.500,
			Visible To Position Radius and Color);
		Wait(1, Ignore Condition);
		Play Effect(All Players(All Teams), Sombra EMP Explosion Effect, Color(White), Vector(X Component Of(Global.EE3Location),
			Y Component Of(Global.EE3Location) + 2, Z Component Of(Global.EE3Location)), 20);
		Play Effect(All Players(All Teams), Sombra EMP Explosion Sound, Color(White), Vector(X Component Of(Global.EE3Location),
			Y Component Of(Global.EE3Location) + 2, Z Component Of(Global.EE3Location)), 100);
		Create Effect(All Players(All Teams), Orb, Global.EE3Active == True ? Color(Purple) : Color(Gray), Vector(X Component Of(
			Global.EE3Location), Y Component Of(Global.EE3Location) + 2, Z Component Of(Global.EE3Location)), 0.500,
			Visible To Position Radius and Color);
		Wait(1, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("Power is on! Perks are activated!"));
	}
}

rule("Flip Power")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.PowerLocation) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.DisablePurchases != True;
		Global.DebugMode == False;
	}

	actions
	{
		If(Global.Power == True);
			Small Message(Event Player, Custom String("Power is already on!"));
		Else;
			If(Event Player.Points >= Global.PowerPrice);
				Event Player.Points -= Global.PowerPrice;
				Global.Power = True;
			Else;
				Small Message(Event Player, Custom String("Insufficient Money!"));
			End;
		End;
	}
}

rule("GameOver")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Number Of Dead Players(Team 1) == Number Of Players(Team 1);
		Global.DebugMode == False;
	}

	actions
	{
		Wait(7, Abort When False);
		Destroy All HUD Text;
		Disable Game Mode HUD(All Players(All Teams));
		Disable Hero HUD(All Players(All Teams));
		Respawn(All Players(Team 1));
		Set Status(All Players(All Teams), Null, Invincible, 9999);
		Global.DidPlayersWin = False;
		Global.GameOverMenu = True;
		Small Message(All Players(All Teams), Custom String("{0}: {1}", Hero Icon String(Hero(Soldier: 76)), Global.RandomLoseLines));
	}
}

rule("Create Beams to Middle")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.DebugMode == True;
	}

	actions
	{
		disabled Create Beam Effect(All Players(All Teams), Bad Beam, Global.EE2Location, Global.EE2Location, Color(White),
			Visible To Position and Radius);
		disabled Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(X Component Of(Global.EE2Location), Y Component Of(
			Global.EE2Location) - 2, Z Component Of(Global.EE2Location)), Vector(X Component Of(Global.EE2Location), Y Component Of(
			Global.EE2Location) + 2, Z Component Of(Global.EE2Location)), Color(White), Visible To Position and Radius);
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(X Component Of(Global.EE2Location), Y Component Of(
			Global.EE2Location) - 2, Z Component Of(Global.EE2Location)), Vector(X Component Of(Global.EE2Location) + 0.001,
			Y Component Of(Global.EE2Location) + 2, Z Component Of(Global.EE2Location)), Color(White), None);
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(X Component Of(Global.EE3Location), Y Component Of(
			Global.EE3Location) - 2, Z Component Of(Global.EE3Location)), Vector(X Component Of(Global.EE3Location) + 0.001,
			Y Component Of(Global.EE3Location) + 2, Z Component Of(Global.EE3Location)), Color(White), None);
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(X Component Of(Global.EE1Location), Y Component Of(
			Global.EE1Location) - 2, Z Component Of(Global.EE1Location)), Vector(X Component Of(Global.EE1Location) + 0.001,
			Y Component Of(Global.EE1Location) + 2, Z Component Of(Global.EE1Location)), Color(White), None);
	}
}

rule("Start EE 1")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		All;
	}

	conditions
	{
		Global.EE1Active == False;
		Distance Between(Event Player, Global.EE1Location) <= 3;
		Global.Power == True;
		Global.IsEEActivated == True;
		Global.DebugMode == False;
	}

	actions
	{
		Global.EE1Active = True;
		Create Effect(All Players(All Teams), Ring, Color(White), Global.EE1Location, 3, Visible To Position and Radius);
		Global.EERingEffects[0] = Last Created Entity;
	}
}

rule("EE 1 Progress")
{
	event
	{
		Player Earned Elimination;
		All;
		All;
	}

	conditions
	{
		Global.EE1Active == True;
		Distance Between(Event Player, Global.EE1Location) <= 3;
		Global.EE1Killcount < Global.KillcountLimit;
		Global.DebugMode == False;
	}

	actions
	{
		Global.EE1Killcount += 1;
		If(Global.EE1Killcount >= Global.KillcountLimit);
			Destroy Effect(Global.EERingEffects[0]);
	}
}

rule("Start EE 2")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		All;
	}

	conditions
	{
		Global.EE2Active == False;
		Distance Between(Event Player, Global.EE2Location) <= 3;
		Global.Power == True;
		Global.IsEEActivated == True;
		Global.DebugMode == False;
	}

	actions
	{
		Global.EE2Active = True;
		Create Effect(All Players(All Teams), Ring, Color(White), Global.EE2Location, 3, Visible To Position and Radius);
		Global.EERingEffects[1] = Last Created Entity;
	}
}

rule("EE 2 Progress")
{
	event
	{
		Player Earned Elimination;
		All;
		All;
	}

	conditions
	{
		Global.EE2Active == True;
		Distance Between(Event Player, Global.EE2Location) <= 3;
		Global.EE2Killcount < Global.KillcountLimit;
		Global.DebugMode == False;
	}

	actions
	{
		Global.EE2Killcount += 1;
		If(Global.EE2Killcount >= Global.KillcountLimit);
			Destroy Effect(Global.EERingEffects[1]);
	}
}

rule("Start EE 3")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		All;
	}

	conditions
	{
		Global.EE3Active == False;
		Distance Between(Event Player, Global.EE3Location) <= 3;
		Global.Power == True;
		Global.IsEEActivated == True;
		Global.DebugMode == False;
	}

	actions
	{
		Global.EE3Active = True;
		Create Effect(All Players(All Teams), Ring, Color(White), Global.EE3Location, 3, Visible To Position and Radius);
		Global.EERingEffects[2] = Last Created Entity;
	}
}

rule("EE 3 Progress")
{
	event
	{
		Player Earned Elimination;
		All;
		All;
	}

	conditions
	{
		Global.EE3Active == True;
		Distance Between(Event Player, Global.EE3Location) <= 3;
		Global.EE3Killcount < Global.KillcountLimit;
		Global.DebugMode == False;
	}

	actions
	{
		Global.EE3Killcount += 1;
		If(Global.EE3Killcount >= Global.KillcountLimit);
			Destroy Effect(Global.EERingEffects[2]);
	}
}

rule("All EE is done")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Array Contains(Global.ActivatedOrbs, 1) == True;
		Global.DebugMode == False;
		Array Contains(Global.ActivatedOrbs, 2) == True;
		Array Contains(Global.ActivatedOrbs, 3) == True;
	}

	actions
	{
		Wait(5, Ignore Condition);
		disabled Create Effect(Global.OrbsActivated == 3 ? All Players(All Teams) : Null, Good Aura, Color(Purple), Global.StartBossLocation, 1,
			Visible To Position and Radius);
		disabled Global.EERingEffects[3] = Last Created Entity;
		disabled Create In-World Text(Global.OrbsActivated == 3 ? All Players(All Teams) : Null, Custom String(
			"Start Final Battle - There is no turning back!"), Global.StartBossLocation, 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		disabled Global.EERingEffects[4] = Last Text ID;
		disabled Create Effect(Global.OrbsActivated == 3 ? All Players(All Teams) : Null, Ring, Color(Purple), Global.StartBossLocation, 3,
			Visible To Position and Radius);
		disabled Global.EERingEffects[5] = Last Created Entity;
		Global.ActivateBoss = True;
		Small Message(All Players(All Teams), Custom String("{1}: \"{0}\"", Random Value In Array(Array(Custom String(
			"We getting somewhere!"), Custom String("This looks good!"), Custom String("The strange thing is opened, look out team."))),
			Hero Icon String(Hero(Soldier: 76))));
	}
}

rule("When one of the EE is done")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.OpenAnomaly == True;
		Global.DebugMode == False;
	}

	actions
	{
		Create Effect(All Players(All Teams), Bad Aura, Color(Violet), Global.AnomalyLocation, 5, Visible To Position and Radius);
		Small Message(All Players(All Teams), Custom String("{1}: \"{0}\"", Random Value In Array(Array(Custom String(
			"What... is that? Be careful!"), Custom String("This looks strange, this may be dangerous."), Custom String(
			"Look out team! That may be dangerous!"))), Hero Icon String(Hero(Soldier: 76))));
	}
}

rule("EasterEgg1Activate")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.EE1Killcount == Global.KillcountLimit;
		Distance Between(Event Player, Global.EE1Location) <= 3;
		Global.EE1Active == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.DebugMode == False;
		Array Contains(Global.ActivatedOrbs, 1) == False;
	}

	actions
	{
		Global.OrbsActivated += 1;
		Create Beam Effect(All Players(All Teams), Good Beam, Vector(X Component Of(Global.EE1Location), Y Component Of(Global.EE1Location)
			+ 2, Z Component Of(Global.EE1Location)), Global.AnomalyLocation, Color(Purple), Visible To Position and Radius);
		If(Global.OpenAnomaly == False);
			Global.OpenAnomaly = True;
		End;
		Modify Global Variable(ActivatedOrbs, Append To Array, 1);
	}
}

rule("EasterEgg2Activate")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.EE2Killcount == Global.KillcountLimit;
		Distance Between(Event Player, Global.EE2Location) <= 3;
		Global.EE2Active == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.DebugMode == False;
		Array Contains(Global.ActivatedOrbs, 2) == False;
	}

	actions
	{
		Global.OrbsActivated += 1;
		Create Beam Effect(All Players(All Teams), Good Beam, Vector(X Component Of(Global.EE2Location), Y Component Of(Global.EE2Location)
			+ 2, Z Component Of(Global.EE2Location)), Global.AnomalyLocation, Color(Purple), Visible To Position and Radius);
		If(Global.OpenAnomaly == False);
			Global.OpenAnomaly = True;
		End;
		Modify Global Variable(ActivatedOrbs, Append To Array, 2);
	}
}

rule("EasterEgg3Activate")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.EE3Killcount == Global.KillcountLimit;
		Distance Between(Event Player, Global.EE3Location) <= 3;
		Global.EE3Active == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.DebugMode == False;
		Array Contains(Global.ActivatedOrbs, 3) == False;
	}

	actions
	{
		Global.OrbsActivated += 1;
		Create Beam Effect(All Players(All Teams), Good Beam, Vector(X Component Of(Global.EE3Location), Y Component Of(Global.EE3Location)
			+ 2, Z Component Of(Global.EE3Location)), Global.AnomalyLocation, Color(Purple), Visible To Position and Radius);
		If(Global.OpenAnomaly == False);
			Global.OpenAnomaly = True;
		End;
		Modify Global Variable(ActivatedOrbs, Append To Array, 3);
	}
}

rule("Camera")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.HasGameStarted == False;
		Has Spawned(Event Player) == True;
		Global.DebugMode == False;
	}

	actions
	{
		Start Camera(Event Player, Global.AnomalyLocation, Global.Barrier, 0);
		Set Status(Event Player, Null, Frozen, 9999);
		Log To Inspector(Custom String("Executed this thing of text"));
	}
}

rule("Start Boss - If Ready is Enabled")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.ActivateBoss == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.DebugMode == False;
		Global.StartBonusEvent == False;
		Global.BossStarted == False;
		Global.VotingEnabled == True;
	}

	actions
	{
		If(Distance Between(Event Player, Global.StartBossLocation) <= 3);
			If(Global.BossReadyTimer == 0 && Is True For All(All Players(Team 1), !Current Array Element.exfilVote));
				All Players(Team 1).PlayerReadiedUp = False;
				Global.BossReadyTimer = 15;
				Event Player.PlayerReadiedUp = True;
				Wait Until(Count Of(Filtered Array(All Players(Team 1), Current Array Element.PlayerReadiedUp == True)) == Number Of Players(
					Team 1) || Global.BossReadyTimer == 0, 99999);
				If(Count Of(Filtered Array(All Players(Team 1), Current Array Element.PlayerReadiedUp == True)) == Number Of Players(Team 1));
					Global.BossStarted = True;
					Global.ZombiesLeft = 99999;
					If(Global.enemyTypeHandling == 1 || Global.enemyTypeHandling == 3);
						Modify Global Variable(EnemyTypes, Append To Array, Hero(Ramattra));
					End;
					If(Global.enemyTypeHandling == 1 || Global.enemyTypeHandling == 4);
						Modify Global Variable(EnemyTypes, Append To Array, Hero(Zenyatta));
					End;
					Big Message(All Players(All Teams), Custom String("Defeat the Boss to win!"));
					Create Dummy Bot(Hero(Orisa), Team 2, -1, Global.AnomalyLocation, Vector(0, 0, 0));
					Wait(0.250, Ignore Condition);
					Global.BossBot = Last Created Entity;
					Start Scaling Player(Global.BossBot, 2, True);
					Start Scaling Barriers(Global.BossBot, 2, True);
					Set Move Speed(Global.BossBot, 0.100);
					Set Max Health(Global.BossBot, 900);
					Kill(Players On Hero(Hero(Bastion), Team 2), Null);
					Global.OrbsActivated = 4;
					Create Effect(Global.bossAttackPhase ? Null : All Players(All Teams), Sphere, Color(White), Global.BossBot, 5,
						Visible To Position Radius and Color);
					Heal(Global.BossBot, Null, 99999);
					Respawn(All Dead Players(Team 2));
					Set Damage Received(Global.BossBot, 10);
					Small Message(All Players(All Teams), Custom String("{0}: \"{1}\"", Hero Icon String(Hero(Ana)), Random Value In Array(Array(
						Custom String("Oh no! Its one of those OR15's. eliminate it!"), Custom String("****! A giant OR15!"), Custom String(
						"Woah! A huge OR15.")))));
					Set Knockback Received(Global.BossBot, 0);
					Resurrect(Filtered Array(All Dead Players(Team 1), Array Contains(Global.InGamePlayers, Current Array Element)));
					Enable Built-In Game Mode Respawning(Global.InGamePlayers);
					Set Respawn Max Time(All Players(Team 1), 30);
				Else If(Global.BossReadyTimer == 0);
					All Players(Team 1).PlayerReadiedUp = False;
				End;
			Else;
			End;
		Else;
			If(Event Player.PlayerReadiedUp == False && Count Of(Filtered Array(All Players(Team 1),
				Current Array Element.PlayerReadiedUp != Number Of Players(Team 1))) == True);
				If(Is Button Held(Event Player, Button(Crouch)) == True);
					Event Player.PlayerReadiedUp = True;
	}
}

rule("Start Boss - If Ready is Disabled")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.ActivateBoss == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.DebugMode == False;
		Global.StartBonusEvent == False;
		Global.BossStarted == False;
		Global.VotingEnabled == False;
	}

	actions
	{
		If(Distance Between(Event Player, Global.StartBossLocation) <= 3);
			If(Global.enemyTypeHandling == 1 || Global.enemyTypeHandling == 3);
				Modify Global Variable(EnemyTypes, Append To Array, Hero(Ramattra));
			End;
			If(Global.enemyTypeHandling == 1 || Global.enemyTypeHandling == 4);
				Modify Global Variable(EnemyTypes, Append To Array, Hero(Zenyatta));
			End;
			Big Message(All Players(All Teams), Custom String("Defeat the Boss to win!"));
			Create Dummy Bot(Hero(Orisa), Team 2, -1, Global.AnomalyLocation, Vector(0, 0, 0));
			Wait(0.250, Ignore Condition);
			Global.BossBot = Last Created Entity;
			Start Scaling Player(Global.BossBot, 2, True);
			Start Scaling Barriers(Global.BossBot, 2, True);
			Set Move Speed(Global.BossBot, 0.100);
			Set Max Health(Global.BossBot, 900);
			Global.BossStarted = True;
			Global.ZombiesLeft = 99999;
			Kill(Players On Hero(Hero(Bastion), Team 2), Null);
			Global.OrbsActivated = 4;
			Create Effect(Global.bossAttackPhase ? Null : All Players(All Teams), Sphere, Color(White), Global.BossBot, 5,
				Visible To Position Radius and Color);
			Heal(Global.BossBot, Null, 99999);
			Respawn(All Dead Players(Team 2));
			Set Damage Received(Global.BossBot, 10);
			Small Message(All Players(All Teams), Custom String("{0}: \"{1}\"", Hero Icon String(Hero(Ana)), Random Value In Array(Array(
				Custom String("Oh no! Its one of those OR15's. eliminate it!"), Custom String("****! A giant OR15!"), Custom String(
				"Woah! A huge OR15.")))));
			Set Knockback Received(Global.BossBot, 0);
			Resurrect(Filtered Array(All Dead Players(Team 1), Array Contains(Global.InGamePlayers, Current Array Element)));
			Enable Built-In Game Mode Respawning(Global.InGamePlayers);
			Set Respawn Max Time(All Players(Team 1), 30);
	}
}

rule("Boss Dies")
{
	event
	{
		Player Died;
		Team 2;
		All;
	}

	conditions
	{
		Global.BossBot == Event Player;
		Global.DebugMode == False;
	}

	actions
	{
		Global.StartDirector = False;
		Start Forcing Player To Be Hero(All Players(Team 1), Array(Null));
		Resurrect(All Players(Team 1));
		Big Message(All Players(All Teams), Custom String("BOSS IS DEAD"));
		Destroy All Effects;
		Destroy All HUD Text;
		Destroy All In-World Text;
		Destroy All Progress Bar In-World Text;
		Destroy All Progress Bar HUD Text;
		Wait(4, Ignore Condition);
		Global.GameOverMenu = True;
		Set Status(All Players(All Teams), Null, Frozen, 9999);
		Start Camera(All Players(All Teams), Global.PlayerSpawn, Global.AnomalyLocation, 0);
		Global.DidPlayersWin = True;
		Small Message(All Players(All Teams), Custom String("{1}: \"{0}\"", Random Value In Array(Global.VictoryLines), Hero Icon String(
			Hero(Soldier: 76))));
	}
}

rule("Game Over Screen")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.GameOverMenu == True;
		Global.DebugMode == False;
	}

	actions
	{
		Destroy All Icons;
		Destroy All In-World Text;
		Destroy All HUD Text;
		Wait(0.250, Ignore Condition);
		Create HUD Text(Count Of(Global.Modifiers) > 0 ? Event Player : Null, Custom String(""), Custom String("Modifiers"), Custom String(
			"{0}\r\n{1}\r\n{2}", Count Of(Global.Modifiers) > 0 ? Global.Modifiers[0] : Custom String(""), Count Of(Global.Modifiers)
			> 1 ? Global.Modifiers[1] : Custom String(""), Count Of(Global.Modifiers) > 2 ? Global.Modifiers[2] : Custom String("")), Top,
			50, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("Difficulty: {0}", Global.Difficulty == 0 ? Custom String("Normal") : (
			Global.Difficulty == 1 ? Custom String("Hard") : Custom String("Expert"))), Null, Top, 49, Color(White), Color(Turquoise),
			Color(White), Visible To and String, Default Visibility);
		Set Status(All Players(All Teams), Null, Invincible, 9999);
		Destroy All Dummy Bots;
		Start Camera(All Players(All Teams), Global.AnomalyLocation, Global.PlayerSpawn, 0);
		Disable Hero HUD(All Players(All Teams));
		Global.StartTimer = False;
		Create HUD Text(Event Player, Global.canEscapeExfil ? Custom String("EXFIL COMPLETED") : (Global.DidPlayersWin ? Custom String(
			"GAME WIN") : Custom String("GAME OVER")), Null, Null, Top, 0, Color(Red), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Create HUD Text(Event Player, Null, Null, Custom String("TIME: {0}", Global.TimeElapsed), Top, 1, Color(White), Color(White),
			Color(Red), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Custom String("Waves Survived: {0}", Global.Wave - 1), Null, Null, Top, 2, Color(Red), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Entity Exists(Players In Slot(0, Team 1)) ? Event Player : Null, Custom String("{0}:          {1}          {2}",
			Custom String("{0} {1}", Hero Icon String(Hero Of(Players In Slot(0, Team 1))), Players In Slot(0, Team 1)), Players In Slot(0,
			Team 1).Score, Player Stat(Players In Slot(0, Team 1), Eliminations)), Null, Null, Top, 3, Slot Of(Event Player) == 0 ? Color(
			Rose) : Color(Red), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Entity Exists(Players In Slot(1, Team 1)) ? Event Player : Null, Custom String("{0}:          {1}          {2}",
			Custom String("{0} {1}", Hero Icon String(Hero Of(Players In Slot(1, Team 1))), Players In Slot(1, Team 1)), Players In Slot(1,
			Team 1).Score, Player Stat(Players In Slot(1, Team 1), Eliminations)), Null, Null, Top, 4, Slot Of(Event Player) == 1 ? Color(
			Rose) : Color(Red), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Entity Exists(Players In Slot(2, Team 1)) ? Event Player : Null, Custom String("{0}:          {1}          {2}",
			Custom String("{0} {1}", Hero Icon String(Hero Of(Players In Slot(2, Team 1))), Players In Slot(2, Team 1)), Players In Slot(2,
			Team 1).Score, Player Stat(Players In Slot(2, Team 1), Eliminations)), Null, Null, Top, 5, Slot Of(Event Player) == 2 ? Color(
			Rose) : Color(Red), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Entity Exists(Players In Slot(3, Team 1)) ? Event Player : Null, Custom String("{0}:          {1}          {2}",
			Custom String("{0} {1}", Hero Icon String(Hero Of(Players In Slot(3, Team 1))), Players In Slot(3, Team 1)), Players In Slot(3,
			Team 1).Score, Player Stat(Players In Slot(3, Team 1), Eliminations)), Null, Null, Top, 6, Slot Of(Event Player) == 3 ? Color(
			Rose) : Color(Red), Color(White), Color(White), Visible To and String, Default Visibility);
		Wait(10, Ignore Condition);
		If(Global.DidPlayersWin == True);
			Declare Team Victory(Team 1);
		Else;
			Declare Team Victory(Team 2);
		End;
		Wait(5, Ignore Condition);
		Global.isGameEnding = True;
	}
}

rule("Timer")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.StartTimer == True;
		Global.DebugMode == False;
	}

	actions
	{
		Wait(1, Abort When False);
		Set Match Time(60);
		If(Global.BossReadyTimer > 0);
			Global.BossReadyTimer -= 1;
		End;
		If(Global.exfilReadyTimer > 0);
			Global.exfilReadyTimer -= 1;
		End;
		Global.TimeElapsed += 1;
		Loop If Condition Is True;
	}
}

rule("Special Round")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.StartBonusEvent == True;
		Global.DebugMode == False;
	}

	actions
	{
		Global.Event = Random Value In Array(Remove From Array(Global.SpecialRoundEvents, Custom String("Defuse the Bomb")));
		Wait(0.250, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("BONUS EVENT: {0}", Global.Event));
		If(Global.Event == Custom String("Low Gravity"));
			Set Gravity(All Players(All Teams), 10);
			Global.SpecialEventDescription = Custom String("All Players and enemies get Low Gravity");
		Else If(Global.Event == Custom String("Purchases Disabled"));
			Global.DisablePurchases = True;
			Global.SpecialEventDescription = Custom String("All Purchases are temperarily disabled");
			disabled Else If(Global.Event == Custom String("Defuse the Bomb"));
			disabled Global.ChosenBombDefuseLocation = Random Value In Array(Global.BombDefuseLocationArray);
			disabled Global.DefuseBomb = True;
			disabled Global.SpecialEventDescription = Custom String("Find and defuse a bomb before the round ends!");
			disabled Create Effect(All Players(All Teams), Orb, Color(Black), Global.ChosenBombDefuseLocation, 0.500, Visible To Position and Radius);
			disabled Global.SpecialEventEffects[0] = Last Created Entity;
			disabled Create Effect(All Players(All Teams), Ring, Color(Black), Global.ChosenBombDefuseLocation, 3, Visible To Position and Radius);
			disabled Global.SpecialEventEffects[1] = Last Created Entity;
		End;
		Wait(0.250, Ignore Condition);
		Respawn(All Dead Players(Team 2));
	}
}

rule("Defuse Bomb Event")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.DefuseBomb == True;
		Global.Event == Custom String("Defuse the Bomb");
		Distance Between(Event Player, Global.ChosenBombDefuseLocation) <= 3;
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.DebugMode == False;
	}

	actions
	{
		Wait(1, Abort When False);
		Small Message(All Players(All Teams), Custom String("Defusing in 5..."));
		Wait(1, Abort When False);
		Small Message(All Players(All Teams), Custom String("Defusing in 4..."));
		Wait(1, Abort When False);
		Small Message(All Players(All Teams), Custom String("Defusing in 3..."));
		Wait(1, Abort When False);
		Small Message(All Players(All Teams), Custom String("Defusing in 2..."));
		Wait(1, Abort When False);
		Small Message(All Players(All Teams), Custom String("Defusing in 1..."));
		Wait(1, Abort When False);
		Small Message(All Players(All Teams), Custom String("Defused!"));
		Destroy Effect(Global.SpecialEventEffects[0]);
		Destroy Effect(Global.SpecialEventEffects[1]);
	}
}

rule("Activate Easter Egg")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.IsEEActivated != True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Distance Between(Event Player, Global.ActivateEELocation) <= 2;
		Global.Power == True;
		Global.DebugMode == False;
	}

	actions
	{
		Global.IsEEActivated = True;
		Play Effect(All Players(All Teams), Good Explosion, Color(White), Event Player, 1);
		Wait(1, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("Power Orbs activated! Awaiting fuel..."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("{1} \"{0}\"", Random Value In Array(Array(Custom String(
			"Looks like its looking for some kind of fuel to activate the orbs... But what fuels it up?"), Custom String(
			"Fuel? Last I checked there was nothing fuel related here."), Custom String(
			"Looking for some way to fuel the orbs... got it! It feeds on enemy kills!"))), Hero Icon String(Hero(Soldier: 76))));
	}
}

rule("QuickRevive Effects")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Global.DebugMode == False;
		Event Player.OutOfBounds == False;
		disabled Health(Event Player) != Max Health(Event Player);
	}

	actions
	{
		Stop All Heal Over Time(Event Player);
		Wait(3, Restart When True);
		disabled Heal(Event Player, Null, Event Player.QuickLevel * 2 + 10);
		disabled Loop If Condition Is True;
		Start Heal Over Time(Event Player, Null, 9999, Event Player.QuickLevel * 20 + 25);
	}
}

rule("Start Challenge")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Distance Between(Event Player, Global.ChallengesLocation) <= 2;
		Global.IsChallengeActive != True;
		Event Player.Points >= Global.ChallengePrice;
		Global.DebugMode == False;
	}

	actions
	{
		Global.IsChallengeActive = True;
		Global.ChallengeTimer = Global.ChallengeMaxTime;
		Event Player.Points -= Global.ChallengePrice;
		Global.Challenge = Random Value In Array(Array(Custom String("Get a kill while crouched"), Custom String("Get a critical kill"),
			Custom String("Get a kill within the area")));
		If(Global.Challenge == Custom String("Get a kill within the area"));
			Create Effect(All Players(All Teams), Ring, Color(Lime Green), Global.ChallengeArea, 5, Visible To Position and Radius);
			Global.ChallengeEffects[0] = Last Created Entity;
			Create In-World Text(Event Player, Custom String("{0} CHALLENGE {0}", Icon String(Arrow: Down), Distance Between(Event Player,
				Global.ChallengeArea)), Global.ChallengeArea, 1, Do Not Clip, Visible To Position String and Color, Color(White),
				Default Visibility);
			Global.ChallengeEffects[1] = Last Text ID;
	}
}

rule("Challenge - Kill")
{
	event
	{
		Player Dealt Final Blow;
		All;
		All;
	}

	conditions
	{
		Global.IsChallengeActive == True;
		Global.DebugMode == False;
	}

	actions
	{
		If(Global.Challenge == Custom String("Get a kill while crouched"));
			If(Is Crouching(Event Player));
				Event Player.ChallengeScore += 1;
			End;
		Else If(Global.Challenge == Custom String("Get a kill within the area"));
			If(Distance Between(Event Player, Global.ChallengeArea) <= 5);
				Event Player.ChallengeScore += 1;
			End;
		Else If(Global.Challenge == Custom String("Get a critical kill"));
			If(Event Was Critical Hit == True);
				Event Player.ChallengeScore += 1;
			End;
	}
}

rule("Challenge End")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.IsChallengeActive != True;
		Global.DebugMode == False;
	}

	actions
	{
		disabled Destroy HUD Text(Last Text ID);
		Big Message(Event Player, Custom String("Challenge Over!"));
		Destroy Effect(Global.ChallengeEffects[0]);
		Destroy In-World Text(Global.ChallengeEffects[1]);
	}
}

rule("Rewards")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.DebugMode == False;
	}

	actions
	{
		"Common Reward"
		If(Event Player.ChallengeScore == 10);
		"Uncommon Reward"
		Else If(Event Player.ChallengeScore == 15);
		"Rare Reward"
		Else If(Event Player.ChallengeScore == 20);
		"Legendary Reward"
		Else If(Event Player.ChallengeScore == 25);
	}
}

rule("Challenge Timer")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.IsChallengeActive == True;
		Global.ChallengeTimer > 0;
		Global.DebugMode == False;
	}

	actions
	{
		Wait(1, Abort When False);
		Global.ChallengeTimer -= 1;
		Loop If Condition Is True;
		If(Global.ChallengeTimer <= 10);
			For Global Variable(A, 0, Count Of(All Players(Team 1)), 1);
				Play Effect(All Players(All Teams), Good Pickup Effect, Color(White), Position Of(Global.A), 100);
			End;
		End;
	}
}

rule("Timer reaches 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.IsChallengeActive == True;
		Global.ChallengeTimer == 0;
		Global.DebugMode == False;
	}

	actions
	{
		Global.IsChallengeActive = False;
	}
}

rule("Reward Type")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.DebugMode == False;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		If(Event Player.ChallengeScore >= 10 && Event Player.ChallengeScore < 15);
			Event Player.RewardType = 1;
		Else If(Event Player.ChallengeScore >= 15 && Event Player.ChallengeScore < 20);
			Event Player.RewardType = 2;
		Else If(Event Player.ChallengeScore >= 20 && Event Player.ChallengeScore < 25);
			Event Player.RewardType = 3;
		Else If(Event Player.ChallengeScore == 25);
			Event Player.RewardType = 4;
		End;
		Loop;
	}
}

rule("ClaimReward")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.RewardLocation) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.RewardType != 0;
		Global.DebugMode == False;
	}

	actions
	{
		If(Event Player.RewardType == 1);
			Event Player.Points += 500;
			Event Player.Score += 500;
		Else If(Event Player.RewardType == 2);
			Add Health Pool To Player(Event Player, Shields, 120, False, False);
		Else If(Event Player.RewardType == 3);
			Event Player.DeathmachineActive = True;
		Else If(Event Player.RewardType == 4);
			Event Player.GodActive = True;
		End;
		Event Player.ChallengeScore = 0;
		Event Player.RewardType = 0;
	}
}

rule("Spawn Reward Orb")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.DebugMode == False;
	}

	actions
	{
		Create Effect(Event Player.RewardType > 0 ? Event Player : Null, Orb, Event Player.RewardType == 1 ? Color(Green) : (
			Event Player.RewardType == 2 ? Color(Purple) : (Event Player.RewardType == 3 ? Color(Rose) : Color(Orange))),
			Global.RewardLocation, 0.500, Visible To Position Radius and Color);
		Event Player.DeathmachineTimer = Global.PowerupTimer;
		Event Player.GodTimer = Global.PowerupTimer;
	}
}

rule("Deathmachine")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.DeathmachineActive == True;
		Global.DebugMode == False;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Event Player.DeathmachineTimer -= 1;
		If(Event Player.DeathmachineTimer == 0);
			Event Player.DeathmachineActive = False;
			Event Player.DeathmachineTimer = Global.PowerupTimer;
			Set Ammo(Event Player, 0, 0);
			Set Ammo(Event Player, 1, 0);
		Else;
			Set Ammo(Event Player, 0, 999);
			Set Ammo(Event Player, 1, 999);
			Loop;
	}
}

rule("Invince")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.GodActive == True;
		Global.DebugMode == False;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Event Player.GodTimer -= 1;
		If(Event Player.GodTimer == 0);
			Event Player.GodTimer = False;
			Event Player.GodTimer = Global.PowerupTimer;
			Clear Status(Event Player, Invincible);
		Else;
			Set Status(Event Player, Null, Invincible, 2);
			Loop;
	}
}

rule("In spawn room")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is In Spawn Room(Event Player) == True;
		Global.DebugMode == False;
	}

	actions
	{
		Teleport(Event Player, Global.PlayerSpawn);
		disabled If(Event Player.PackAPunched == True);
		disabled Set Max Ammo(Event Player, 0, Max Ammo(Event Player, 0) + Max Ammo(Event Player, 0));
		disabled Set Max Ammo(Event Player, 1, Max Ammo(Event Player, 1) + Max Ammo(Event Player, 1));
		disabled Set Ammo(Event Player, 0, Max Ammo(Event Player, 0));
		disabled Set Ammo(Event Player, 1, Max Ammo(Event Player, 1));
		disabled End;
		Wait(0.250, Ignore Condition);
		Set Status(Event Player, Null, Invincible, 5);
	}
}

disabled rule("Player Dies with no Self Revives")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.SelfRevives <= 0;
		Is Alive(Event Player) != True;
		Global.DebugMode == False;
	}

	actions
	{
		Else If(Event Player.SelfRevives <= 0);
		If(Count Of(Event Player.Perks) >= 1);
			If(Event Player.Perks[Count Of(Event Player.Perks) - 1] == Custom String("Juggernog"));
				Event Player.JuggLevel = 0;
			Else If(Event Player.Perks[Count Of(Event Player.Perks) - 1] == Custom String("StaminUp"));
				Event Player.StaminLevel = 0;
			Else If(Event Player.Perks[Count Of(Event Player.Perks) - 1] == Custom String("ElectricCherry"));
				Event Player.ElectricLevel = 0;
			Else If(Event Player.Perks[Count Of(Event Player.Perks) - 1] == Custom String("QuickRevive"));
				Event Player.QuickLevel = 0;
			End;
			Event Player.Perks = Remove From Array(Event Player.Perks, Event Player.Perks[Count Of(Event Player.Perks) - 1]);
		End;
	}
}

disabled rule("Director - Fix Facing")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Global.StartDirector == True;
		disabled Hero Of(Event Player) == Hero(Bastion);
		Is In Alternate Form(Event Player) == False;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Event Player.BotTarget), To World);
		Loop;
	}
}

rule("Dummy Bot caught in spawn room")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		Wait(2, Abort When False);
		Call Subroutine(RespawnDummy);
	}
}

rule("Director - Fix dummy bot stuck glitch")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		disabled Event Player.IfBotisStuck == True;
		disabled (Hero Of(Event Player) == Hero(Bastion) || Hero Of(Event Player) == Hero(Ramattra)) == True;
		Is True For Any(Global.EnemyTypes, Hero Of(Event Player) == Current Array Element) == True;
		Distance Between(Event Player, Event Player.backupLastLocation) <= 1;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Rooted) == False;
		Has Status(Event Player, Stunned) == False;
		disabled (Global.Difficulty == 0 ? Ray Cast Hit Player(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * 10, All Players(Team 1), Event Player, False) : True) == False;
		Is True For Any(All Living Players(Team 1), !Is In View Angle(Current Array Element, Event Player, 180)) == True;
	}

	actions
	{
		Wait(5, Abort When False);
		Event Player.IfBotisStuck = False;
		Respawn(Event Player);
	}
}

rule("Director - Movement")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.StartDirector == True;
		Is Dummy Bot(Event Player) == True;
		Is In Alternate Form(Event Player) == False;
		disabled (Hero Of(Event Player) == Hero(Bastion) || Hero Of(Event Player) == Hero(Ramattra)) == True;
		Is True For Any(Global.EnemyTypes, Hero Of(Event Player) == Current Array Element) == True;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.BotTarget)), 1,
			To World, Replace existing throttle, Direction and Magnitude);
	}
}

rule("Director - facing")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.StartDirector == True;
		Is Dummy Bot(Event Player) == True;
		disabled Hero Of(Event Player) == Hero(Bastion);
		Is In Alternate Form(Event Player) == False;
	}

	actions
	{
		Start Facing(Event Player, Event Player.BotTarget == Null ? Facing Direction Of(Event Player) : Direction Towards(Eye Position(
			Event Player), Global.Difficulty == 0 ? (Eye Position(Event Player.BotTarget) + Position Of(Event Player.BotTarget))
			/ 2 : Eye Position(Event Player.BotTarget)), Global.Difficulty == 0 ? 100 : 999, To World, Direction and Turn Rate);
	}
}

rule("Director - Shooting if range")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.StartDirector == True;
		Is Dummy Bot(Event Player) == True;
		Players in View Angle(Event Player, Team 1, 180) == True;
		Is True For Any(Global.EnemyTypes, Hero Of(Event Player) == Current Array Element) == True;
		Is True For Any(All Players(Team 1), Distance Between(Event Player, Current Array Element) < 10) == True;
		(Global.Difficulty == 0 ? Ray Cast Hit Player(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * 10, All Players(Team 1), Event Player, False) : True) == True;
	}

	actions
	{
		Wait(0.500, Restart When True);
		Set Ability Cooldown(Global.Difficulty == 0 ? Null : Event Player, Button(Secondary Fire), 0);
		Press Button(Global.Difficulty == 2 ? Event Player : Null, Button(Secondary Fire));
		Stop Throttle In Direction(Event Player);
		disabled Start Facing(Event Player, Facing Direction Of(Closest Player To(Eye Position(Event Player), Opposite Team Of(Team Of(
			Event Player)))), 1, To World, Direction and Turn Rate);
		Start Holding Button(Event Player, Button(Primary Fire));
		Wait(2, Ignore Condition);
		Stop Holding Button(Event Player, Button(Primary Fire));
		disabled Stop Facing(Event Player);
		Start Throttle In Direction(Event Player, Direction Towards(Event Player, Event Player.BotTarget), 1, To World,
			Replace existing throttle, Direction and Magnitude);
		disabled Event Player.PingLocation = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * 100, All Players(All Teams), Event Player, True);
		Loop If Condition Is True;
	}
}

rule("Spawn in Dummy Bots")
{
	event
	{
		Subroutine;
		RespawnDummy;
	}

	actions
	{
		Enable Built-In Game Mode Respawning(All Players(Team 2));
		Kill(All Players(Team 2), Null);
	}
}

rule("Teleport in Dummy Bot on Spawn")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		Event Player.BotTarget = Random Value In Array(Filtered Array(All Players(Team 1), (
			!Current Array Element.backupIsDown || Is Alive(Current Array Element)) && !Current Array Element.ignoreMe));
		Start Forcing Player To Be Hero(Event Player, Random Value In Array(Global.EnemyTypes));
		If(Global.BossStarted == True);
			Teleport(Event Player, Random Value In Array(Global.AnomalyLocation));
		Else;
			Teleport(Event Player, First Of(Sorted Array(Global.EnemySpawns, Distance Between(Event Player.BotTarget,
				Current Array Element))));
		End;
		Call Subroutine(DummyName);
	}
}

rule("Director - Change Target")
{
	event
	{
		Subroutine;
		ChangeTarget;
	}

	actions
	{
		disabled If(Number Of Players(Team 1) > 1);
		Event Player.BotTarget = Random Value In Array(Filtered Array(All Players(Team 1), (
			!Current Array Element.backupIsDown || Is Alive(Current Array Element)) && !Current Array Element.ignoreMe));
	}
}

rule("Dummy Bot Target Chooser at first spawn")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	actions
	{
		Event Player.BotTarget = Random Value In Array(Filtered Array(All Players(Team 1), (
			!Current Array Element.backupIsDown || Is Alive(Current Array Element)) && !Current Array Element.ignoreMe));
		If(Array Contains(Global.Modifiers, Custom String("Security Measures")) == True);
			Create Effect(Is Alive(Event Player) ? All Players(All Teams) : Null, Sparkles, Color(Violet), Event Player, 5,
				Visible To Position and Radius);
		End;
		Create Effect(Has Status(Event Player, Hacked) && Distance Between(Event Player, Global.Barrier)
			< Global.BarrierRadius ? All Players(All Teams) : Null, Torbjörn Overloading Effect, Color(White), Event Player, 1,
			Visible To Position and Radius);
		Create Effect(Has Status(Event Player, Hacked) && Distance Between(Event Player, Global.Barrier)
			< Global.BarrierRadius ? All Players(All Teams) : Null, Ana Nano Boosted Sound, Color(White), Event Player, 200,
			Visible To Position and Radius);
	}
}

rule("Director - Boss Shooting")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.StartDirector == True;
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player) == Hero(Orisa);
	}

	actions
	{
		Start Holding Button(Event Player, Button(Primary Fire));
		Start Holding Button(Event Player, Button(Ultimate));
	}
}

rule("Change Target every few seconds")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.StartDirector == True;
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player) == Hero(Orisa);
	}

	actions
	{
		Wait(5, Ignore Condition);
		Call Subroutine(ChangeTarget);
		Loop If(Is Alive(Event Player) == True);
	}
}

rule("Dummy Bot Name")
{
	event
	{
		Subroutine;
		DummyName;
	}

	actions
	{
		If(Hero Of(Event Player) == Hero(Bastion));
			Start Forcing Dummy Bot Name(Event Player, Custom String("E-54"));
		Else If(Hero Of(Event Player) == Hero(Orisa));
			Start Forcing Dummy Bot Name(Event Player, Custom String("OR15"));
		Else If(Hero Of(Event Player) == Hero(Ramattra));
			Start Forcing Dummy Bot Name(Event Player, Custom String("Ravager"));
		Else If(Hero Of(Event Player) == Hero(Zenyatta));
			Start Forcing Dummy Bot Name(Event Player, Custom String("Boomyatta"));
	}
}

rule("Lobby Hud")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.HasGameStarted != True;
		Global.DebugMode == False;
	}

	actions
	{
		Set Invisible(Event Player, All);
		Preload Hero(Event Player, Hero(D.Va));
		Create HUD Text(Event Player, Null, Custom String("Difficulty: {0}", Global.Difficulty == 0 ? Custom String("Normal") : (
			Global.Difficulty == 1 ? Custom String("Hard") : Custom String("Expert"))), Null, Top, 2, Color(White), Color(Turquoise),
			Color(White), Visible To and String, Default Visibility);
		Event Player.PlayerReadiedUp = False;
		Create HUD Text(Count Of(Global.Modifiers) > 0 ? Event Player : Null, Custom String(""), Custom String("Modifiers"), Custom String(
			"{0}\r\n{1}\r\n{2}", Count Of(Global.Modifiers) > 0 ? Global.Modifiers[0] : Custom String(""), Count Of(Global.Modifiers)
			> 1 ? Global.Modifiers[1] : Custom String(""), Count Of(Global.Modifiers) > 2 ? Global.Modifiers[2] : Custom String("")), Top,
			6, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Event Player == Host Player ? Custom String("{0} - HOST : {1}", Event Player,
			Event Player.PlayerReadiedUp ? Icon String(Checkmark) : Icon String(X)) : Custom String("{0} : {1}", Event Player,
			Event Player.PlayerReadiedUp ? Icon String(Checkmark) : Icon String(X)), Null, Null, Left, Slot Of(Event Player),
			Host Player == Event Player ? Color(Aqua) : Color(Sky Blue), Color(White), Null, Visible To Sort Order String and Color,
			Default Visibility);
		Create HUD Text(Event Player, Global.HasGameStarted == True ? Custom String("Game is starting...") : Custom String("{0}\r\n{1}",
			Custom String("Press {0} to ready up! {1}/{2}", Input Binding String(Button(Interact)), Count Of(Filtered Array(All Players(
			Team 1), Current Array Element.PlayerReadiedUp)), Number Of Players(Team 1)), Custom String(
			"Game will start once everyone has readied up!")), Null, Null, Top, 2, Global.HasGameStarted == True ? Color(Green) : Color(
			Red), Color(White), Color(White), Visible To Sort Order String and Color, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("Useless Tips:\r {0}", Global.ChosenTip), Null, Top, 1, Color(White), Color(
			White), Color(White), Visible To and String, Default Visibility);
		Disable Hero HUD(Event Player);
		Disable Messages(Event Player);
		Create HUD Text(Event Player, Null, Custom String("{0}\r\n{1}\r\n{2}", Custom String(" "), Custom String(" "), Custom String(" ")),
			Null, Left, -1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("{0}\r\n{1}\r\n{2}", Custom String(" "), Custom String(" "), Custom String(" ")),
			Null, Left, -3, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		disabled Create HUD Text(Event Player, Null, Custom String("{0}\r\n{1}\r\n{2}", Custom String(" "), Custom String(" "), Custom String(" ")),
			Null, Top, 1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("Check out all techs other codes! - techsgames.xyz"), Custom String(
			"Version 1.11 - 10/3/2023"), Right, -3, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("{0}\r\n{1}\r\n{2}", Custom String(" "), Custom String(" "), Custom String(" ")),
			Null, Right, -4, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Set Objective Description(Event Player, Custom String("Welcome to Omnic Ops Survival created by techdude04", Input Binding String(
			Button(Jump))), Visible To and String);
		disabled Create HUD Text(Event Player, Null, Custom String("{0}\r\n{1}\r\n{2}", Custom String(" "), Custom String(" "), Custom String(" ")),
			Null, Top, 1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		disabled Create HUD Text(Event Player, Null, Custom String("{0}\r\n{1}\r\n{2}", Custom String(" "), Custom String(" "), Custom String(" ")),
			Null, Top, 1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Wait Until(Is Button Held(Event Player, Button(Interact)), 99999);
		Event Player.PlayerReadiedUp = True;
	}
}

rule("Tips")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.HasGameStarted != True;
	}

	actions
	{
		Global.ChosenTip = Random Value In Array(Global.UselessTips);
		Wait(5, Abort When False);
		Loop If Condition Is True;
	}
}

rule("Spawn Enemy Portals")
{
	event
	{
		Subroutine;
		SpawnEnemyPortals;
	}

	actions
	{
		For Global Variable(I, 0, Count Of(Global.EnemySpawns), 1);
			Create Effect(Global.BossStarted != True ? All Players(All Teams) : Null, Bad Aura, Color(Purple),
				Global.EnemySpawns[Evaluate Once(Global.I)], 1, Visible To Position Radius and Color);
		End;
	}
}

disabled rule("Map Template")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Start Forcing Spawn Room(Team 1, 0);
		Start Forcing Spawn Room(Team 2, 1);
		Global.Barrier = Vector(0, Y Component Of(Global.Barrier) - 6, 0);
		Global.PlayerSpawn = Vector(0, 0, 0);
		Global.QuickReviveLocation = Vector(0, 0, 0);
		Global.JugLocation = Vector(0, 0, 0);
		Global.StaminLocation = Vector(0, 0, 0);
		Global.ElectricLocation = Vector(0, 0, 0);
		Global.PowerLocation = Vector(0, 0, 0);
		Global.MysteryBox = Vector(0, 0, 0);
		Global.EnemySpawns = Array(Vector(0, 0, 0), Vector(0, 0, 0), Vector(0, 0, 0), Vector(0, 0, 0));
		Global.PackAPunchLocation = Vector(0, 0, 0);
		Global.EE1Location = Vector(0, 0, 0);
		Global.EE2Location = Vector(0, 0, 0);
		Global.EE3Location = Vector(0, 0, 0);
		Global.AnomalyLocation = Vector(0, 0, 0);
		Global.StartBossLocation = Vector(0, 0, 0);
		Global.BombDefuseLocationArray = Array(Vector(0, 0, 0), Vector(0, 0, 0), Vector(0, 0, 0));
		Global.ActivateEELocation = Vector(0, 0, 0);
		Global.RewardLocation = Vector(0, 0, 0);
		Global.ChallengeArea = Vector(0, 0, 0);
		Global.ChallengesLocation = Vector(0, 0, 0);
		Global.BarrierRadius = 45;
		Global.PartsLoc = Array(Vector(0, 0, 0), Vector(0, 0, 0), Vector(0, 0, 0));
		Global.WorkbenchLoc = Vector(0, 0, 0);
		Global.HeroBuildable = Hero(Ana);
		Global.exfilLocation = Vector(0, 0, 0);
		Global.exfilStartLocation = Vector(0, 0, 0);
	}
}

rule("Pickup Part")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.DebugMode == False;
		Global.EnableBuildable == True;
	}

	actions
	{
		If(Distance Between(Global.PartsLoc[0], Position Of(Event Player)) <= 2);
			If(Array Contains(Global.Parts, Custom String("One")) != True);
				Global.Parts[0] = Custom String("One");
				disabled Small Message(All Players(All Teams), Custom String("1"));
				Global.ShowBuildablesMenu = True;
				disabled Wait(3, Restart When True);
				Play Effect(All Players(All Teams), Bad Explosion, Color(White), Global.PartsLoc[0], 5);
				Play Effect(All Players(All Teams), Explosion Sound, Color(White), Global.PartsLoc[0], 100);
				disabled Global.ShowBuildablesMenu = False;
			End;
		Else If(Distance Between(Global.PartsLoc[1], Position Of(Event Player)) <= 2);
			If(Array Contains(Global.Parts, Custom String("Two")) != True);
				Play Effect(All Players(All Teams), Bad Explosion, Color(White), Global.PartsLoc[1], 5);
				Play Effect(All Players(All Teams), Explosion Sound, Color(White), Global.PartsLoc[1], 100);
				disabled Small Message(All Players(All Teams), Custom String("2"));
				Global.Parts[1] = Custom String("Two");
				Global.ShowBuildablesMenu = True;
				disabled Wait(3, Restart When True);
				disabled Global.ShowBuildablesMenu = False;
			End;
		Else If(Distance Between(Global.PartsLoc[2], Position Of(Event Player)) <= 2);
			If(Array Contains(Global.Parts, Custom String("Three")) != True);
				Global.Parts[2] = Custom String("Three");
				disabled Small Message(All Players(All Teams), Custom String("3"));
				Global.ShowBuildablesMenu = True;
				disabled Wait(3, Restart When True);
				disabled Global.ShowBuildablesMenu = False;
				Play Effect(All Players(All Teams), Bad Explosion, Color(White), Global.PartsLoc[2], 5);
				Play Effect(All Players(All Teams), Explosion Sound, Color(White), Global.PartsLoc[2], 100);
			End;
		End;
	}
}

rule("Buy Part")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.WorkbenchLoc) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Array Contains(Global.Modifiers, Custom String("Mystery Heroes")) == False;
	}

	actions
	{
		If(Global.CanBuyBuildable == False);
			If(Array Contains(Global.Parts, Custom String("One")) && Array Contains(Global.Parts, Custom String("Two")) && Array Contains(
				Global.Parts, Custom String("Three")));
				Small Message(Event Player, Custom String("Combining Parts... 3"));
				Wait(1, Abort When False);
				Small Message(Event Player, Custom String("Combining Parts... 2"));
				Wait(1, Abort When False);
				Small Message(Event Player, Custom String("Combining Parts... 1"));
				Wait(1, Abort When False);
				Small Message(Event Player, Custom String("Combining Parts... 0"));
				Wait(1, Abort When False);
				Play Effect(All Players(All Teams), Bad Explosion, Color(White), Global.WorkbenchLoc, 5);
				Play Effect(All Players(All Teams), Explosion Sound, Color(White), Global.WorkbenchLoc, 100);
				Wait(1, Ignore Condition);
				Global.CanBuyBuildable = True;
				Small Message(Event Player, Custom String("Parts combined!"));
				Global.ShowBuildablesMenu = True;
				disabled Wait(3, Restart When True);
				disabled Global.ShowBuildablesMenu = False;
			End;
		Else;
			If(Event Player.Points >= Global.BuildablePrice);
				If(Hero Of(Event Player) != Global.HeroBuildable);
					Start Forcing Player To Be Hero(Event Player, Global.HeroBuildable);
					Event Player.Points -= Global.BuildablePrice;
					If(Event Player.PAPLevel >= 1);
						Set Max Ammo(Event Player, 0, Max Ammo(Event Player, 0) + Max Ammo(Event Player, 0));
						Set Max Ammo(Event Player, 1, Max Ammo(Event Player, 1) + Max Ammo(Event Player, 1));
						Set Ammo(Event Player, 0, Max Ammo(Event Player, 0));
						Set Ammo(Event Player, 1, Max Ammo(Event Player, 1));
					End;
				End;
			End;
		End;
	}
}

rule("Restart Match but its not spammy")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.isGameEnding == True;
	}

	actions
	{
		Restart Match;
	}
}

rule("Boss Phase")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.BossStarted == True;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		If(Global.bossAttackPhase == True);
			Clear Status(Global.BossBot, Invincible);
		Else;
			Set Status(Global.BossBot, Null, Invincible, 9999);
		End;
		Global.BossBot.usingCustomAbility = True;
		Loop If Condition Is True;
	}
}

rule("Boss Phase Change")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.BossStarted == True;
	}

	actions
	{
		Global.bossAttackPhase = True;
		Create Homing Projectile(Pharah Rocket, Closest Player To(Global.EE1Location, Team 1), Global.EE1Location, Null, To World, Damage,
			Global.BossBot, 100, 1, 10, Pharah Rocket Launcher Explosion Effect, Pharah Rocket Launcher Explosion Sound, 0, 10, 99, 0,
			Global.BossBot, 1);
		Create Homing Projectile(Pharah Rocket, Closest Player To(Global.EE2Location, Team 1), Global.EE2Location, Null, To World, Damage,
			Global.BossBot, 100, 1, 10, Pharah Rocket Launcher Explosion Effect, Pharah Rocket Launcher Explosion Sound, 0, 10, 99, 0,
			Global.BossBot, 1);
		Create Homing Projectile(Pharah Rocket, Closest Player To(Global.EE3Location, Team 1), Global.EE3Location, Null, To World, Damage,
			Global.BossBot, 100, 1, 10, Pharah Rocket Launcher Explosion Effect, Pharah Rocket Launcher Explosion Sound, 0, 10, 99, 0,
			Global.BossBot, 1);
		Wait(10, Ignore Condition);
		Global.bossAttackPhase = False;
		Wait(10, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Start Exfil")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.canExfil == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.exfilStarted == False;
	}

	actions
	{
		If(Distance Between(Event Player, Global.exfilStartLocation) <= 3);
			If(Global.exfilReadyTimer == 0 && Is True For All(All Players(Team 1), !Current Array Element.PlayerReadiedUp));
				If(Global.VotingEnabled == True);
					All Players(Team 1).exfilVote = False;
				Else;
					All Players(Team 1).exfilVote = True;
				End;
				Global.exfilReadyTimer = 15;
				Event Player.exfilVote = True;
				Wait Until(Count Of(Filtered Array(All Players(Team 1), Current Array Element.exfilVote == True)) == Number Of Players(Team 1)
					|| Global.exfilReadyTimer == 0, 99999);
				If(Count Of(Filtered Array(All Players(Team 1), Current Array Element.exfilVote == True)) == Number Of Players(Team 1));
					Global.exfilStarted = True;
					Respawn(All Dead Players(Team 2));
					Global.ZombiesLeft = Global.exfilRequirement;
					Small Message(All Players(All Teams), Custom String("{0}: {1}", Hero Icon String(Hero(Ana)), Random Value In Array(
						Global.RandomExfilLines)));
					Big Message(All Players(All Teams), Custom String("Exfil Started!"));
					Set Ultimate Charge(All Players(Team 1), 100);
					If(Global.enemyTypeHandling == 1 || Global.enemyTypeHandling == 3);
						Modify Global Variable(EnemyTypes, Append To Array, Hero(Ramattra));
					End;
					If(Global.enemyTypeHandling == 1 || Global.enemyTypeHandling == 4);
						Modify Global Variable(EnemyTypes, Append To Array, Hero(Zenyatta));
					End;
					Wait Until(Global.exfilKillCounter == Global.exfilRequirement, 99999);
					Big Message(All Players(All Teams), Custom String("Exfil Portal opened!"));
				Else If(Global.exfilReadyTimer == 0);
					All Players(Team 1).exfilVote = False;
				End;
			Else;
			End;
		End;
		If(Event Player.exfilVote == False && Count Of(Filtered Array(All Players(Team 1),
			Current Array Element.exfilVote != Number Of Players(Team 1))) == True);
			If(Is Button Held(Event Player, Button(Crouch)) == True);
				Event Player.exfilVote = True;
	}
}

rule("Exfil Timer")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.exfilStarted == True;
	}

	actions
	{
		Wait(1, Ignore Condition);
		If(Global.exfilTimer <= 0);
			If(Count Of(Players Within Radius(Global.exfilLocation, 5, Team 1, Off)) >= 1);
				Small Message(All Players(All Teams), Custom String("{0}: {1}", Hero Icon String(Hero(Ana)), Global.VictoryLines));
				Players Within Radius(Global.exfilLocation, 5, Team 1, Off).Escaped = True;
				Global.BarrierRadius = 0;
				Set Gravity(Players Within Radius(Global.exfilLocation, 5, Team 1, Off), 0);
				Wait(10, Ignore Condition);
				Destroy All Effects;
				Global.GameOverMenu = True;
				Global.DidPlayersWin = True;
			Else;
				Set Slow Motion(50);
				Small Message(All Players(All Teams), Custom String("{0}: {1}", Hero Icon String(Hero(Soldier: 76)), Global.RandomLoseLines));
				Play Effect(All Players(All Teams), DVa Self Destruct Explosion Effect, Color(Red), Global.exfilLocation, 5);
				Play Effect(All Players(All Teams), DVa Self Destruct Explosion Sound, Color(White), Global.exfilLocation, 100);
				Small Message(All Players(All Teams), Custom String("{0}: \"Exfil portal destroyed!\"", Hero Icon String(Hero(Ana))));
				Respawn(All Dead Players(Team 1));
				Kill(All Players(All Teams), All Players(All Teams));
				Global.canEscapeExfil = False;
				Global.exfilStarted = False;
				Wait(2, Ignore Condition);
				Global.GameOverMenu = True;
				Global.DidPlayersWin = False;
			End;
		Else;
			Global.exfilTimer -= 1;
			Loop If Condition Is True;
		End;
	}
}

rule("Rise escaped players")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Escaped == True;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		disabled Teleport(Event Player, Vector(X Component Of(Position Of(Event Player)), Y Component Of(Position Of(Event Player)) + 0.250,
			Z Component Of(Position Of(Event Player))));
		Apply Impulse(Event Player, Up, 70, To World, Cancel Contrary Motion);
		Loop If Condition Is True;
	}
}

rule("Rule 90")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.DebugMode == True;
	}

	actions
	{
		Teleport(Event Player, Vector(X Component Of(Position Of(Event Player)), Y Component Of(Position Of(Event Player)), Z Component Of(
			Position Of(Event Player)) + -5));
	}
}

rule("Spawn Secrets")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		(Current Map == Map(Blizzard World) || Current Map == Map(Blizzard World Winter)) == True;
	}

	actions
	{
		Global.SecretPortalLocation = Vector(2.834, 3.320, 67.916);
		Global.SecretEndPortalLocation = Vector(28.662, -4.581, -28.343);
		Create Effect(All Players(All Teams), Orb, Color(Turquoise), Vector(28.111, -4.581, -38.377), 1, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Bad Aura, Color(Rose), Global.SecretPortalLocation, 1, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Sphere, Color(Rose), Vector(28.111, -4.581, -38.377), 1, Visible To Position and Radius);
	}
}

rule("Teleporter")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.SecretPortalLocation) <= 3;
		(Current Map == Map(Blizzard World) || Current Map == Map(Blizzard World Winter)) == True;
	}

	actions
	{
		Heal(Event Player, Null, 999);
		Teleport(Event Player, Global.SecretEndPortalLocation);
		Global.SecretPortalLocation = Vector(9999, 9999, 9999);
		Play Effect(All Players(All Teams), Doomfist Meteor Strike Impact Effect, Color(White), Event Player, 1);
		Play Effect(Event Player, Doomfist Meteor Strike Impact Sound, Color(White), Event Player, 100);
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("{0}: \"{1}\"", Hero Icon String(Hero(Soldier: 76)), Random Value In Array(
			Array(Custom String("This looks different... wonder what it is..."), Custom String("Is that part of the darkness?"),
			Custom String("A strange artifact looking thing is spotted... what is it?")))));
		Wait(5, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("{0}: \"{1}\"", Hero Icon String(Hero(Winston)), Random Value In Array(Array(
			Custom String("Its an artifact, might be the core of the darkness, be careful..."), Custom String(
			"Its some sort of core... with the darkness thats spreading? Be careful when interacting with it..."), Custom String(
			"Be careful! Its a core to the darkness. If you touch it, it may consume you!")))));
		Wait(10, Ignore Condition);
		Teleport(Event Player, Global.PlayerSpawn);
		Play Effect(All Players(All Teams), Doomfist Meteor Strike Impact Effect, Color(White), Event Player, 1);
		Play Effect(Event Player, Doomfist Meteor Strike Impact Sound, Color(White), Event Player, 100);
		Set Status(Event Player, Null, Invincible, 5);
		Small Message(All Players(All Teams), Custom String("{0}: \"{1}\"", Hero Icon String(Hero(Winston)), Random Value In Array(Array(
			Custom String("They got teleported back, are they harmed?"), Custom String(
			"Seems like they got teleported back, dont know if thats a good thing."), Custom String(
			"Seems like they got teleported back and doesnt seem to have any side effects.")))));
		Wait(5, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("{0}: \"{1}\"", Hero Icon String(Hero(Soldier: 76)), Random Value In Array(
			Array(Custom String("Everything seems to be normal."), Custom String(
			"Status shows they are fine, seems like that might be our key to remove the darkness."), Custom String(
			"All systems seem nominal, strange.")))));
	}
}

rule("Initial Dummy Bot Names")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Preload Hero(Event Player, Global.EnemyTypes);
		Call Subroutine(DummyName);
	}
}

rule("Dva Upgrade Effect")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
		Event Player.PAPLevel == Global.UpgradableLevels;
		(Global.HeroBuildable == Hero Of(Event Player) || Hero(D.Va) == Hero Of(Event Player)) == True;
	}

	actions
	{
		Create Projectile(Pharah Rocket, Event Player, Null, Null, To Player, Damage, Team 2, 50, 0, Event Player.PAPLevel + 3,
			Pharah Rocket Launcher Explosion Effect, Pharah Rocket Launcher Explosion Sound, 0, 30, 5, 0, 0, 0);
		Wait(0.250, Abort When False);
		Loop If Condition Is True;
	}
}

rule("Director - Explode Zen if near player")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		disabled Count Of(Players Within Radius(Event Player, 5, All Teams, Surfaces)) >= 1;
		Hero Of(Event Player) == Hero(Zenyatta);
		Is Dummy Bot(Event Player) == True;
		Is Alive(Event Player) == True;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Stunned) == False;
	}

	actions
	{
		If(Count Of(Players Within Radius(Position Of(Event Player), 5, Team 1, Surfaces)) >= 1);
			Play Effect(All Players(All Teams), Junkrat RIP Tire Explosion Effect, Color(White), Event Player, 5);
			Play Effect(All Players(All Teams), Junkrat RIP Tire Explosion Sound, Color(White), Event Player, 100);
			Damage(Players Within Radius(Event Player, 5, Team 1, Surfaces), Event Player, 10);
			Apply Impulse(Players Within Radius(Position Of(Event Player), 5, All Teams, Surfaces), Vector(0, 8, -15), 30, To Player,
				Cancel Contrary Motion);
			Kill(Event Player, Event Player);
		End;
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Create Icons for Zenyatta")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Create Icon(Is Alive(Event Player) && Hero Of(Event Player) == Hero(Zenyatta) ? Players Within Radius(Position Of(Event Player),
			10, Team 1, Off) : Null, Event Player, Warning, Visible To and Position, Color(Red), True);
		Create Effect(Hero Of(Event Player) == Hero(Zenyatta) ? All Players(All Teams) : Null, Ana Nano Boosted Effect, Color(Team 1),
			Event Player, 1, Visible To Position and Radius);
	}
}

rule("Director - Ravager uses ability")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player) == Hero(Ramattra);
	}

	actions
	{
		Wait(0.250, Abort When False);
		Wait Until(!Is Using Ability 1(Event Player), 99999);
		Set Ability Cooldown(Event Player, Button(Ability 1), 0);
		Press Button(Event Player, Button(Ability 1));
		Loop If Condition Is True;
	}
}

rule("Director - Respawn if out of view")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Global.BossBot != Event Player;
		Is In View Angle(Event Player, Position Of(Event Player.BotTarget), 90) == False;
		Players in View Angle(Event Player, Team 1, 90) == False;
		Event Player.BotTarget != Null;
	}

	actions
	{
		Wait(5, Abort When False);
		Call Subroutine(RespawnDummy);
	}
}

disabled rule("DIrector - If Target dies, change new target")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	conditions
	{
		Is True For Any(All Players(Team 2), Current Array Element.BotTarget == Event Player) == True;
		disabled (Event Player.backupIsDown || Is Dead(Event Player)) == True;
	}

	actions
	{
		Filtered Array(All Players(Team 2), Current Array Element.BotTarget == Event Player).BotTarget = First Of(Sorted Array(
			Filtered Array(All Players(Team 1), !Current Array Element.backupIsDown || Is Alive(Current Array Element)), Distance Between(
			Event Player, Current Array Element)));
	}
}

rule("Director - If player leaves, change target.")
{
	event
	{
		Player Left Match;
		Team 1;
		All;
	}

	conditions
	{
		Is True For Any(All Players(Team 2), Current Array Element.BotTarget == Event Player) == True;
	}

	actions
	{
		Filtered Array(All Players(Team 2), Current Array Element.BotTarget == Event Player).BotTarget = First Of(Sorted Array(
			Filtered Array(All Players(Team 1), !Current Array Element.backupIsDown || Is Alive(Current Array Element)
			|| !Current Array Element.ignoreMe), Distance Between(Event Player, Current Array Element)));
	}
}

rule("Boss Ability")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Global.BossBot == Event Player;
		Event Player.usingCustomAbility == True;
	}

	actions
	{
		Create Homing Projectile(Pharah Rocket, Event Player, Null, Null, To World, Damage, Team 1, 50, 1, 10,
			Pharah Rocket Launcher Explosion Effect, Pharah Rocket Launcher Explosion Sound, 0, 10, 5, 0, Random Value In Array(
			All Living Players(Team 1)), 1);
		Wait(0.250, Ignore Condition);
		Create Homing Projectile(Pharah Rocket, Event Player, Null, Null, To World, Damage, Team 1, 50, 1, 10,
			Pharah Rocket Launcher Explosion Effect, Pharah Rocket Launcher Explosion Sound, 0, 10, 5, 0, Random Value In Array(
			All Living Players(Team 1)), 1);
		Wait(0.250, Ignore Condition);
		Create Homing Projectile(Pharah Rocket, Event Player, Null, Null, To World, Damage, Team 1, 50, 1, 10,
			Pharah Rocket Launcher Explosion Effect, Pharah Rocket Launcher Explosion Sound, 0, 10, 5, 0, Random Value In Array(
			All Living Players(Team 1)), 1);
		Wait(0.250, Ignore Condition);
		Create Homing Projectile(Pharah Rocket, Event Player, Null, Null, To World, Damage, Team 1, 50, 1, 10,
			Pharah Rocket Launcher Explosion Effect, Pharah Rocket Launcher Explosion Sound, 0, 10, 5, 0, Random Value In Array(
			All Living Players(Team 1)), 1);
		Wait(5, Ignore Condition);
		Event Player.usingCustomAbility = False;
	}
}

rule("Buy Perk")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.Power == True;
		Global.DisablePurchases != True;
		Global.DebugMode == False;
	}

	actions
	{
		disabled If(Distance Between(Event Player, Global.QuickReviveLocation) <= 2);
		disabled If(Array Contains(Event Player.Perks, Custom String("QuickRevive")));
		disabled Small Message(Event Player, Custom String("You already have this perk!"));
		disabled Else;
		disabled If(Event Player.Points >= Global.QuickRevivePrice);
		disabled Play Effect(Event Player, Ana Biotic Grenade Explosion Effect, Color(Aqua), Global.QuickReviveLocation, 1);
		disabled Play Effect(Event Player, Ana Biotic Grenade Explosion Sound, Color(Aqua), Global.QuickReviveLocation, 100);
		disabled Event Player.Points -= Global.QuickRevivePrice;
		disabled Event Player.Perks = Append To Array(Event Player.Perks, Custom String("QuickRevive"));
		disabled Else;
		disabled Small Message(Event Player, Custom String("Insufficient Money!"));
		disabled End;
		disabled End;
		disabled Else If(Distance Between(Event Player, Global.StaminLocation) <= 2);
		disabled If(Array Contains(Event Player.Perks, Custom String("StaminUp")));
		disabled Small Message(Event Player, Custom String("You already have this perk!"));
		disabled Else;
		disabled If(Event Player.Points >= Global.StaminupPrice);
		disabled Event Player.Points -= Global.StaminupPrice;
		disabled Event Player.Perks = Append To Array(Event Player.Perks, Custom String("StaminUp"));
		disabled Play Effect(Event Player, Ana Biotic Grenade Explosion Effect, Color(Aqua), Global.StaminLocation, 1);
		disabled Play Effect(Event Player, Ana Biotic Grenade Explosion Sound, Color(Orange), Global.StaminLocation, 100);
		disabled Else;
		disabled Small Message(Event Player, Custom String("Insufficient Money!"));
		disabled End;
		disabled End;
		disabled Else If(Distance Between(Event Player, Global.JugLocation) <= 2);
		disabled If(Array Contains(Event Player.Perks, Custom String("Juggernog")));
		disabled Small Message(Event Player, Custom String("You already have this perk!"));
		disabled Else;
		disabled If(Event Player.Points >= Global.JuggernogPrice);
		disabled Event Player.Points -= Global.JuggernogPrice;
		disabled Event Player.Perks = Append To Array(Event Player.Perks, Custom String("Juggernog"));
		disabled Play Effect(Event Player, Ana Biotic Grenade Explosion Effect, Color(Red), Global.JugLocation, 1);
		disabled Play Effect(Event Player, Ana Biotic Grenade Explosion Sound, Color(Red), Global.JugLocation, 100);
		disabled Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		disabled Else;
		disabled Small Message(Event Player, Custom String("Insufficient Money!"));
		disabled End;
		disabled End;
		disabled Else If(Distance Between(Event Player, Global.ElectricLocation) <= 2);
		disabled If(Array Contains(Event Player.Perks, Custom String("ElectricCherry")));
		disabled Small Message(Event Player, Custom String("You already have this perk!"));
		disabled Else;
		disabled If(Event Player.Points >= Global.ElectricCherryPrice);
		disabled Event Player.Points -= Global.ElectricCherryPrice;
		disabled Event Player.Perks = Append To Array(Event Player.Perks, Custom String("ElectricCherry"));
		disabled Play Effect(Event Player, Ana Biotic Grenade Explosion Effect, Color(Sky Blue), Global.ElectricLocation, 1);
		disabled Play Effect(Event Player, Ana Biotic Grenade Explosion Sound, Color(Sky Blue), Global.ElectricLocation, 100);
		disabled Event Player.ElectricCherryReady = True;
		disabled Else;
		disabled Small Message(Event Player, Custom String("Insufficient Money!"));
		disabled End;
		disabled End;
		If(Distance Between(Event Player, Global.PackAPunchLocation) <= 2);
			If(Event Player.PackAPunched && Event Player.PAPLevel >= Global.UpgradableLevels);
				Small Message(Event Player, Custom String("You are fully upgraded!"));
			Else;
				If(Event Player.Points >= Global.PackAPunchPrice);
					If(Event Player.PAPLevel <= Global.UpgradableLevels);
						Event Player.PAPLevel += 1;
						Event Player.Points -= Global.PackAPunchPrice;
						Event Player.PackAPunched = True;
						Set Damage Dealt(Event Player, (Event Player.PAPLevel + 1) * 100);
						If(Event Player.PAPLevel == 1);
							Set Max Ammo(Event Player, 0, Max Ammo(Event Player, 0) + Max Ammo(Event Player, 0));
							Set Max Ammo(Event Player, 1, Max Ammo(Event Player, 1) + Max Ammo(Event Player, 1));
						End;
						Play Effect(All Players(All Teams), Sombra EMP Explosion Effect, Color(White), Global.PackAPunchLocation, 1);
						Play Effect(Event Player, Sombra EMP Explosion Sound, Color(White), Global.PackAPunchLocation, 100);
						Set Ammo(Event Player, 0, Max Ammo(Event Player, 0));
						Set Ammo(Event Player, 1, Max Ammo(Event Player, 1));
						Small Message(Event Player, Custom String("{0}{1}: {2}", Hero Icon String(Hero Of(Event Player)), Event Player,
							Random Value In Array(Global.PAPLines)));
					End;
				Else;
					Small Message(Event Player, Custom String("Insufficient Money!"));
				End;
			End;
	}
}

rule("Quick Revive")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.Power == True;
		Global.DisablePurchases != True;
		Global.DebugMode == False;
		Event Player.Points >= Global.QuickRevivePrice;
	}

	actions
	{
		If(Distance Between(Event Player, Global.QuickReviveLocation) <= 2);
			Event Player.LastBoughtPerk = Custom String("QuickRevive");
			If(Array Contains(Event Player.Perks, Custom String("QuickRevive")));
				If(Event Player.QuickLevel >= Global.MaxPerkTiers);
					Small Message(Event Player, Custom String("Perk is fully upgraded"));
				Else;
					Event Player.QuickLevel += 1;
					Play Effect(Event Player, Ana Biotic Grenade Explosion Effect, Color(Aqua), Global.QuickReviveLocation, 1);
					Play Effect(Event Player, Ana Biotic Grenade Explosion Sound, Color(Aqua), Global.QuickReviveLocation, 100);
					Event Player.Points -= Global.QuickRevivePrice;
					Small Message(Event Player, Custom String("Perk upgraded to level {0}", Event Player.QuickLevel));
				End;
			Else;
				If(Event Player.Points >= Global.QuickRevivePrice);
					Play Effect(Event Player, Ana Biotic Grenade Explosion Effect, Color(Aqua), Global.QuickReviveLocation, 1);
					Play Effect(Event Player, Ana Biotic Grenade Explosion Sound, Color(Aqua), Global.QuickReviveLocation, 100);
					Event Player.Points -= Global.QuickRevivePrice;
					Small Message(Event Player, Custom String("Perk upgraded to level {0}", Event Player.QuickLevel));
					Event Player.Perks = Append To Array(Event Player.Perks, Custom String("QuickRevive"));
					Event Player.QuickLevel += 1;
				Else;
					Small Message(Event Player, Custom String("Insufficient Money!"));
				End;
			End;
	}
}

rule("Juggernog")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.Power == True;
		Global.DisablePurchases != True;
		Global.DebugMode == False;
		Event Player.Points >= Global.JuggernogPrice;
	}

	actions
	{
		If(Distance Between(Event Player, Global.JugLocation) <= 2);
			Event Player.LastBoughtPerk = Custom String("Juggernog");
			If(Array Contains(Event Player.Perks, Custom String("Juggernog")));
				If(Event Player.JuggLevel >= Global.MaxPerkTiers);
					Small Message(Event Player, Custom String("Perk is fully upgraded"));
				Else;
					Event Player.JuggLevel += 1;
					Play Effect(Event Player, Ana Biotic Grenade Explosion Effect, Color(Aqua), Global.JugLocation, 1);
					Play Effect(Event Player, Ana Biotic Grenade Explosion Sound, Color(Aqua), Global.JugLocation, 100);
					Event Player.Points -= Global.JuggernogPrice;
					Small Message(Event Player, Custom String("Perk upgraded to level {0}", Event Player.JuggLevel));
					Wait(0.250, Ignore Condition);
					Heal(Event Player, Null, 99999);
				End;
			Else;
				If(Event Player.Points >= Global.JuggernogPrice);
					Event Player.Points -= Global.JuggernogPrice;
					Event Player.Perks = Append To Array(Event Player.Perks, Custom String("Juggernog"));
					Play Effect(Event Player, Ana Biotic Grenade Explosion Effect, Color(Red), Global.JugLocation, 1);
					Play Effect(Event Player, Ana Biotic Grenade Explosion Sound, Color(Red), Global.JugLocation, 100);
					Event Player.JuggLevel += 1;
					Small Message(Event Player, Custom String("Perk upgraded to level {0}", Event Player.JuggLevel));
					Wait(0.250, Ignore Condition);
					Heal(Event Player, Null, 99999);
				Else;
					Small Message(Event Player, Custom String("Insufficient Money!"));
				End;
			End;
	}
}

rule("Staminup")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.Power == True;
		Global.DisablePurchases != True;
		Global.DebugMode == False;
		Event Player.Points >= Global.StaminupPrice;
	}

	actions
	{
		If(Distance Between(Event Player, Global.StaminLocation) <= 2);
			Event Player.LastBoughtPerk = Custom String("StaminUp");
			If(Array Contains(Event Player.Perks, Custom String("StaminUp")));
				If(Event Player.StaminLevel >= Global.MaxPerkTiers);
					Small Message(Event Player, Custom String("Perk is fully upgraded"));
				Else;
					Event Player.StaminLevel += 1;
					Play Effect(Event Player, Ana Biotic Grenade Explosion Effect, Color(Aqua), Global.StaminLocation, 1);
					Play Effect(Event Player, Ana Biotic Grenade Explosion Sound, Color(Aqua), Global.StaminLocation, 100);
					Event Player.Points -= Global.StaminupPrice;
					Small Message(Event Player, Custom String("Perk upgraded to level {0}", Event Player.StaminLevel));
				End;
			Else;
				If(Event Player.Points >= Global.StaminupPrice);
					Event Player.Points -= Global.StaminupPrice;
					Event Player.Perks = Append To Array(Event Player.Perks, Custom String("StaminUp"));
					Play Effect(Event Player, Ana Biotic Grenade Explosion Effect, Color(Aqua), Global.StaminLocation, 1);
					Play Effect(Event Player, Ana Biotic Grenade Explosion Sound, Color(Orange), Global.StaminLocation, 100);
					Event Player.StaminLevel += 1;
					Small Message(Event Player, Custom String("Perk upgraded to level {0}", Event Player.StaminLevel));
				Else;
					Small Message(Event Player, Custom String("Insufficient Money!"));
				End;
			End;
	}
}

rule("Electric Cherry")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.Power == True;
		Global.DisablePurchases != True;
		Global.DebugMode == False;
		Event Player.Points >= Global.ElectricCherryPrice;
	}

	actions
	{
		If(Distance Between(Event Player, Global.ElectricLocation) <= 2);
			Event Player.LastBoughtPerk = Custom String("ElectricCherry");
			If(Array Contains(Event Player.Perks, Custom String("ElectricCherry")));
				If(Event Player.ElectricLevel >= Global.MaxPerkTiers);
					Small Message(Event Player, Custom String("Perk is fully upgraded"));
				Else;
					Event Player.ElectricLevel += 1;
					Play Effect(Event Player, Ana Biotic Grenade Explosion Effect, Color(Aqua), Global.ElectricLocation, 1);
					Play Effect(Event Player, Ana Biotic Grenade Explosion Sound, Color(Aqua), Global.ElectricLocation, 100);
					Event Player.Points -= Global.ElectricCherryPrice;
					Small Message(Event Player, Custom String("Perk upgraded to level {0}", Event Player.ElectricLevel));
				End;
			Else;
				If(Event Player.Points >= Global.ElectricCherryPrice);
					Event Player.Points -= Global.ElectricCherryPrice;
					Event Player.Perks = Append To Array(Event Player.Perks, Custom String("ElectricCherry"));
					Play Effect(Event Player, Ana Biotic Grenade Explosion Effect, Color(Sky Blue), Global.ElectricLocation, 1);
					Play Effect(Event Player, Ana Biotic Grenade Explosion Sound, Color(Sky Blue), Global.ElectricLocation, 100);
					Event Player.ElectricCherryReady = True;
					Event Player.ElectricLevel += 1;
					Small Message(Event Player, Custom String("Perk upgraded to level {0}", Event Player.ElectricLevel));
				Else;
					Small Message(Event Player, Custom String("Insufficient Money!"));
				End;
			End;
	}
}

disabled rule("Map Template")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Else If(Current Map == Map(Circuit royal));
		Start Forcing Spawn Room(Team 1, 2);
		Start Forcing Spawn Room(Team 2, 2);
		Global.Barrier = Vector(-50.904, 5.355, -41.853);
		Global.PlayerSpawn = Vector(-49.498, 5.516, -36.576);
		Global.QuickReviveLocation = Vector(-27.783, 7.319, -54.900);
		Global.JugLocation = Vector(-36.175, 5.578, -22.270);
		Global.StaminLocation = Vector(-13.622, 7.343, -19.900);
		Global.ElectricLocation = Vector(-61.441, 5.527, -30.522);
		Global.PowerLocation = Vector(-39.116, 11.328, -34.199);
		Global.MysteryBox = Vector(-28.918, 7.341, -13.842);
		Global.EnemySpawns = Array(Vector(-76.014, 5.344, -73.230), Vector(-47.688, 5.571, -85.152), Vector(-16.950, 12.324, -60.240),
			Vector(-7.935, 12.322, -14.280), Vector(-21.570, 7.144, -6.270), Vector(-69.461, 7.363, -13.130));
		Global.PackAPunchLocation = Vector(-47.656, 7.368, -18.540);
		Global.EE1Location = Vector(-53.688, 5.314, -67.109);
		Global.EE2Location = Vector(-42.672, 11.324, -34.864);
		Global.EE3Location = Vector(-15.111, 14.331, -40.305);
		Global.AnomalyLocation = Vector(-46.035, 7.275, -42.880);
		Global.StartBossLocation = Vector(-38.993, 7.332, -61.037);
		Global.BombDefuseLocationArray = Array(Vector(-80.536, 7.663, -14.178), Vector(-37.795, 5.598, -26.341), Vector(-28.055, 7.322,
			-57.211));
		Global.ActivateEELocation = Vector(-46.174, 5.364, -44.743);
		Global.RewardLocation = Vector(-49.580, 5.357, -67.936);
		Global.ChallengeArea = Vector(-25.255, 7.181, -39.392);
		Global.ChallengesLocation = Vector(-57.608, 5.339, -75.534);
		Global.BarrierRadius = 50;
		Global.PartsLoc = Array(Vector(-60.729, 7.000, -47.771), Vector(-40.833, 5.759, -62.492), Vector(-25.945, 7.177, -20.779));
		Global.WorkbenchLoc = Vector(-44.640, 5.515, -50.405);
		Global.HeroBuildable = Hero(Baptiste);
		Global.exfilLocation = Vector(-57.038, 5.278, -71.141);
		Global.exfilStartLocation = Vector(-57.105, 5.537, -55.059);
	}
}

disabled rule("Revive System - Is Dead")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Team Of(Event Player) == Team 1;
		Global.HasGameStarted == True;
		Global.ShowGameStart == True;
		Array Contains(Global.InGamePlayers, Event Player) == True;
	}

	actions
	{
		Wait(0.016, Ignore Condition);
		Event Player.spectatingIndex = Index Of Array Value(Sorted Array(All Players(Team 1), Current Array Element), Event Player);
		If(Event Player.backupIsDown == False);
			Resurrect(Event Player);
			If(Is On Objective(Event Player) || Event Was Environment || Event Player.OutOfBounds);
				Teleport(Event Player, Event Player.backupLastLocation);
			End;
			Big Message(All Players(All Teams), Custom String("{0} {1} needs to be revived!", Hero Icon String(Hero Of(Event Player)),
				Event Player));
			disabled Start Camera(Event Player, Event Player + World Vector Of(Vector(0, 6, -1), Event Player, Rotation), Event Player, 25);
			Start Camera(Event Player, Ray Cast Hit Position(All Players(Team 1)[Event Player.spectatingIndex], Eye Position(All Players(
				Team 1)[Event Player.spectatingIndex]) + World Vector Of(Vector(1 * Min(-2.500 / 2.500, -0.750), 0, 0), All Players(Team 1)
				[Event Player.spectatingIndex], Rotation) + Facing Direction Of(All Players(Team 1)[Event Player.spectatingIndex]) * -2.500,
				All Players(All Teams), All Players(Team 1)[Event Player.spectatingIndex], False), Ray Cast Hit Position(Eye Position(
				All Players(Team 1)[Event Player.spectatingIndex]), Eye Position(All Players(Team 1)[Event Player.spectatingIndex])
				+ Facing Direction Of(All Players(Team 1)[Event Player.spectatingIndex]) * 200, All Players(All Teams), All Players(Team 1)
				[Event Player.spectatingIndex], False), 60);
			disabled Start Camera(Event Player, Event Player + World Vector Of(Vector(0, 6, -1), Event Player, Rotation), Event Player, 25);
			Set Status(Event Player, Null, Knocked Down, 9999);
			Set Status(Event Player, Null, Invincible, 9999);
			Event Player.backupIsDown = True;
			Communicate(Event Player, Need Help);
			If(Event Player.SelfRevives == 0 && Number Of Players(Team 1) == 1);
				Kill(Event Player, Null);
			End;
			If(Event Player.SelfRevives >= 1);
				If(Global.PerkLossType == 0);
					Event Player.LastBoughtPerk = First Of(Event Player.Perks);
					If(Count Of(Event Player.Perks) >= 1);
						If(Event Player.LastBoughtPerk == Custom String("Juggernog"));
							Event Player.JuggLevel = 0;
						Else If(Event Player.LastBoughtPerk == Custom String("StaminUp"));
							Event Player.StaminLevel = 0;
						Else If(Event Player.LastBoughtPerk == Custom String("ElectricCherry"));
							Event Player.ElectricLevel = 0;
						Else If(Event Player.LastBoughtPerk == Custom String("QuickRevive"));
							Event Player.QuickLevel = 0;
						End;
						Modify Player Variable(Event Player, Perks, Remove From Array By Value, First Of(Event Player.Perks));
					End;
				Else If(Global.PerkLossType == 1);
					Event Player.Perks = Empty Array;
				End;
				If(Global.WeaponLossType == 1);
					Start Forcing Player To Be Hero(Event Player, Hero(D.Va));
				End;
				Event Player.SelfRevives -= 1;
				"Begin Self Revive"
				Event Player.backupRevivee = First Of(Sorted Array(Filtered Array(All Players(Team Of(Event Player)),
					Current Array Element.backupIsDown), Distance Between(Event Player, Current Array Element)));
				Event Player.backupRevivee.backupBeingRevived = True;
				Event Player.backupRevivee.backupReviveTimer = 0;
				While(Event Player.backupRevivee.backupReviveTimer <= Event Player.ReviveMaxTime);
					Wait(0.020, Abort When False);
					Event Player.backupRevivee.backupReviveTimer += 0.020;
				End;
				Event Player.backupRevivee.backupIsDown = False;
				Clear Status(Event Player.backupRevivee, Knocked Down);
				Event Player.backupRevivee.backupDownExpireTimer = Global.DeathMaxTime;
				Clear Status(Event Player.backupRevivee, Invincible);
				Play Effect(All Players(All Teams), Good Explosion, Color(White), Event Player.backupRevivee, 5);
				Stop Camera(Event Player.backupRevivee);
				Play Effect(All Players(All Teams), Brigitte Repair Pack Armor Effect, Color(White), Event Player.backupRevivee, 5);
				Event Player.backupRevivee.backupBeingRevived = False;
				Set Status(Event Player.backupRevivee, Null, Invincible, 5);
				Play Effect(All Players(All Teams), Junkrat RIP Tire Explosion Effect, Color(White), Event Player.backupRevivee, 5);
				Play Effect(All Players(All Teams), Junkrat RIP Tire Explosion Sound, Color(White), Event Player.backupRevivee, 100);
				Set Status(Players Within Radius(Event Player.backupRevivee, 5, Team 2, Off), Null, Stunned, 5);
				Big Message(All Players(All Teams), Custom String("{0} {1} was revived!", Hero Icon String(Hero Of(Event Player)), Event Player));
				Event Player.backupRevivee = Null;
			Else If(Event Player.SelfRevives <= 0);
				Event Player.LastBoughtPerk = First Of(Event Player.Perks);
				If(Count Of(Event Player.Perks) >= 1);
					If(Event Player.LastBoughtPerk == Custom String("Juggernog"));
						Event Player.JuggLevel = 0;
					Else If(Event Player.LastBoughtPerk == Custom String("StaminUp"));
						Event Player.StaminLevel = 0;
					Else If(Event Player.LastBoughtPerk == Custom String("ElectricCherry"));
						Event Player.ElectricLevel = 0;
					Else If(Event Player.LastBoughtPerk == Custom String("QuickRevive"));
						Event Player.QuickLevel = 0;
					End;
					Modify Player Variable(Event Player, Perks, Remove From Array By Value, First Of(Event Player.Perks));
				End;
			End;
			disabled Start Camera(Event Player, Event Player + World Vector Of(Vector(0, 6, -1), Event Player, Rotation), Event Player, 25);
			disabled Set Status(Event Player, Null, Knocked Down, 9999);
			disabled Set Status(Event Player, Null, Invincible, 9999);
			disabled Event Player.backupIsDown = True;
		Else If(Event Player.backupIsDown == True);
			Clear Status(Event Player, Knocked Down);
			Clear Status(Event Player, Invincible);
			Event Player.backupIsDown = False;
			Event Player.backupDownExpireTimer = Global.DeathMaxTime;
			Stop Camera(Event Player);
	}
}

rule("Revive System - Revive Downed Player")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.backupIsDown == False;
		Distance Between(Event Player, First Of(Sorted Array(Filtered Array(All Players(Team Of(Event Player)),
			Current Array Element.backupIsDown), Distance Between(Event Player, Current Array Element)))) <= 5;
		(Global.RequireInteractToRevive ? Is Button Held(Event Player, Button(Interact)) : True) == True;
		Event Player.backupBeingRevived == False;
		Team Of(Event Player) == Team 1;
		Global.HasGameStarted == True;
		Global.ShowGameStart == True;
		Array Contains(Global.InGamePlayers, Event Player) == True;
	}

	actions
	{
		"Begin Self Revive"
		Event Player.backupRevivee = First Of(Sorted Array(Filtered Array(All Players(Team Of(Event Player)),
			Current Array Element.backupIsDown), Distance Between(Event Player, Current Array Element)));
		If(Is True For Any(Remove From Array(All Players(Team 1), Event Player),
			Current Array Element.backupRevivee != Event Player.backupRevivee));
			Event Player.backupRevivee.backupBeingRevived = True;
			Event Player.backupRevivee.backupReviveTimer = 0;
			While(Event Player.backupRevivee.backupReviveTimer <= Event Player.ReviveMaxTime);
				Wait(0.200, Abort When False);
				Event Player.backupRevivee.backupReviveTimer += 0.200;
			End;
			Big Message(All Players(All Teams), Custom String("{0} {1} was revived!", Hero Icon String(Hero Of(Event Player.backupRevivee)),
				Event Player.backupRevivee));
			Event Player.backupRevivee.backupIsDown = False;
			Clear Status(Event Player.backupRevivee, Knocked Down);
			Event Player.backupRevivee.backupDownExpireTimer = Global.DeathMaxTime;
			Clear Status(Event Player.backupRevivee, Invincible);
			Play Effect(All Players(All Teams), Good Explosion, Color(White), Event Player.backupRevivee, 5);
			Stop Camera(Event Player.backupRevivee);
			Play Effect(All Players(All Teams), Brigitte Repair Pack Armor Effect, Color(White), Event Player.backupRevivee, 5);
			Event Player.backupRevivee.backupBeingRevived = False;
			Set Status(Event Player.backupRevivee, Null, Invincible, 5);
			Communicate(Event Player.backupRevivee, Thanks);
			Play Effect(All Players(All Teams), Junkrat RIP Tire Explosion Effect, Color(White), Event Player.backupRevivee, 5);
			Play Effect(All Players(All Teams), Junkrat RIP Tire Explosion Sound, Color(White), Event Player.backupRevivee, 100);
			Stop Holding Button(Global.ReviveSettings[0] ? Event Player.backupRevivee : Null, Button(Crouch));
			Allow Button(Global.ReviveSettings[0] ? Event Player.backupRevivee : Null, Button(Primary Fire));
			Allow Button(Global.ReviveSettings[0] ? Event Player.backupRevivee : Null, Button(Secondary Fire));
			Allow Button(Global.ReviveSettings[0] ? Event Player.backupRevivee : Null, Button(Melee));
			Set Status(Players Within Radius(Event Player.backupRevivee, 5, Team 2, Off), Null, Stunned, 5);
			Wait(0.250, Ignore Condition);
			Event Player.backupRevivee = Null;
	}
}

rule("Revive System - Init Player")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Team Of(Event Player) == Team 1;
		Global.HasGameStarted == True;
		Global.ShowGameStart == True;
	}

	actions
	{
		Event Player.backupIsDown = False;
		Event Player.backupRevivee = Null;
		Event Player.backupDownExpireTimer = Global.DeathMaxTime;
		Event Player.backupBeingRevived = False;
		Event Player.backupLastLocation = False;
		Event Player.backupReviveTimer = False;
		disabled Event Player.ReviveMaxTime = 0;
		disabled Event Player.DeathMaxTime = 30;
	}
}

rule("Revive System - On Ground Location")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is On Ground(Event Player) == True;
		Is On Objective(Event Player) == False;
		Is On Wall(Event Player) == False;
		disabled Team Of(Event Player) == Team 1;
		Global.HasGameStarted == True;
		Global.ShowGameStart == True;
		Distance Between(Event Player, Global.Barrier) <= Global.BarrierRadius - 1;
	}

	actions
	{
		Wait(0.500, Abort When False);
		Event Player.backupLastLocation = Position Of(Event Player);
		Loop If Condition Is True;
	}
}

rule("Revive System - Everyone on a Team is Downed")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is True For All(All Living Players(Team 1),
			Current Array Element.backupIsDown == True && Current Array Element.SelfRevives == 0 && Current Array Element.backupBeingRevived == False)
			== True;
		Team Of(Event Player) == Team 1;
		Global.HasGameStarted == True;
		Global.ShowGameStart == True;
		Number Of Players(Team 1) != 1;
	}

	actions
	{
		Wait(0.250, Abort When False);
		Kill(Event Player, Null);
		Stop Holding Button(Global.ReviveSettings[0] ? Event Player : Null, Button(Crouch));
		Allow Button(Global.ReviveSettings[0] ? Event Player : Null, Button(Primary Fire));
		Allow Button(Global.ReviveSettings[0] ? Event Player : Null, Button(Secondary Fire));
		Allow Button(Global.ReviveSettings[0] ? Event Player : Null, Button(Melee));
	}
}

rule("Revive System - Suspend Player Movement when Reviving")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Team Of(Event Player) == Team 1;
		Global.HasGameStarted == True;
		Global.ShowGameStart == True;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		If(Event Player.backupIsDown == True);
			Set Status(Event Player, Null, Phased Out, 9999);
			If(Has Status(Event Player, Knocked Down) == False);
				Set Status(Event Player, Null, Knocked Down, 9999);
			End;
		Else If(Event Player.backupIsDown == False);
			Clear Status(Event Player, Phased Out);
		End;
		Loop;
	}
}

rule("Revive System - Revive Downed Player Cancel")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.backupIsDown == False;
		(Distance Between(Event Player, First Of(Sorted Array(Filtered Array(All Players(Team Of(Event Player)),
			Current Array Element.backupIsDown), Distance Between(Event Player, Current Array Element)))) > 5 || (
			Global.RequireInteractToRevive ? !Is Button Held(Event Player, Button(Interact)) : False)) == True;
		Team Of(Event Player) == Team 1;
		Global.HasGameStarted == True;
		Global.ShowGameStart == True;
	}

	actions
	{
		Event Player.backupRevivee.backupBeingRevived = False;
		Event Player.backupReviveTimer = 0;
		Event Player.backupRevivee = Null;
	}
}

disabled rule("Revive System - Commit not alive if able to")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.backupIsDown == True;
		Is Button Held(Event Player, Button(Jump)) == True;
		Team Of(Event Player) == Team 1;
		Global.HasGameStarted == True;
		Global.ShowGameStart == True;
	}

	actions
	{
		Wait(5, Abort When False);
		Kill(Event Player, Null);
	}
}

rule("Revive System - Downed Timer")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.backupIsDown == True;
		Event Player.backupBeingRevived == False;
		Team Of(Event Player) == Team 1;
		Global.HasGameStarted == True;
		Global.ShowGameStart == True;
		Global.DeathMaxTime != 0;
	}

	actions
	{
		While(Event Player.backupDownExpireTimer > 0);
			Wait(0.020, Abort When False);
			Event Player.backupDownExpireTimer -= 0.020;
		End;
		Disable Built-In Game Mode Respawning(Event Player);
		Wait(0.020, Abort When False);
		Kill(Event Player, Null);
		Big Message(All Players(All Teams), Custom String("{0} {1}'s revive expired!", Hero Icon String(Hero Of(Event Player)),
			Event Player));
		Stop Holding Button(Global.ReviveSettings[0] ? Event Player : Null, Button(Crouch));
		Allow Button(Global.ReviveSettings[0] ? Event Player : Null, Button(Primary Fire));
		Allow Button(Global.ReviveSettings[0] ? Event Player : Null, Button(Secondary Fire));
		Allow Button(Global.ReviveSettings[0] ? Event Player : Null, Button(Melee));
	}
}

rule("Revive System - Revive when Wave is Finished")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Team Of(Event Player) == Team 1;
		Global.ZombiesLeft == 0;
		Global.HasGameStarted == True;
		Global.ShowGameStart == True;
		Event Player.backupIsDown == True;
		Global.exfilStarted == False;
	}

	actions
	{
		Event Player.backupIsDown = False;
		Clear Status(Event Player, Knocked Down);
		Event Player.backupDownExpireTimer = Global.DeathMaxTime;
		Clear Status(Event Player, Invincible);
		Play Effect(All Players(All Teams), Good Explosion, Color(White), Event Player, 5);
		Stop Camera(Event Player);
		Play Effect(All Players(All Teams), Brigitte Repair Pack Armor Effect, Color(White), Event Player, 5);
		Event Player.backupBeingRevived = False;
		Set Status(Event Player, Null, Invincible, 5);
		Event Player.backupRevivee = Null;
		Stop Holding Button(Global.ReviveSettings[0] ? Event Player : Null, Button(Crouch));
		Allow Button(Global.ReviveSettings[0] ? Event Player : Null, Button(Primary Fire));
		Allow Button(Global.ReviveSettings[0] ? Event Player : Null, Button(Secondary Fire));
		Allow Button(Global.ReviveSettings[0] ? Event Player : Null, Button(Melee));
	}
}

rule("Director - Push Enemies away from player")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		disabled Is True For Any(All Players(Team 1), Distance Between(Current Array Element, Event Player) <= 3) == True;
		Global.BossBot != Event Player;
		Distance Between(Event Player.BotTarget, Event Player) <= 3;
	}

	actions
	{
		Wait(0.250, Abort When False);
		Set Status(Event Player, Null, Rooted, 1);
		Loop If Condition Is True;
	}
}

rule("Director - Change Target if Target is down")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.BotTarget.backupIsDown == True;
	}

	actions
	{
		Event Player.BotTarget = Random Value In Array(Filtered Array(All Players(Team 1), (
			!Current Array Element.backupIsDown || Is Alive(Current Array Element)) && !Current Array Element.ignoreMe));
		Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.BotTarget)), 1,
			To World, Replace existing throttle, Direction and Magnitude);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.BotTarget)), 100, To World,
			Direction and Turn Rate);
	}
}

rule("Kill if Joined midgame")
{
	event
	{
		Player Joined Match;
		Team 1;
		All;
	}

	conditions
	{
		Array Contains(Global.InGamePlayers, Event Player) != True;
		Global.HasGameStarted == True;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		disabled Wait Until(Has Spawned(Event Player), 99999);
		disabled Wait(0.250, Ignore Condition);
		disabled Kill(Event Player, Null);
		disabled Wait(0.250, Ignore Condition);
		disabled Event Player.BotTarget = First Of(Filtered Array(Sorted Array(All Living Players(Team 1), Distance Between(Event Player,
			Current Array Element)), !Current Array Element.backupIsDown));
		Modify Global Variable(InGamePlayers, Append To Array, Event Player);
	}
}

rule("Voting Disabled during Lobby")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Host Player != Event Player;
		Global.VotingEnabled == False;
		Global.HasGameStarted == False;
	}

	actions
	{
		Event Player.PlayerReadiedUp = True;
		disabled Press Button(Event Player, Button(Interact));
	}
}

rule("Everyone is in Exfil on success")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Count Of(Filtered Array(Players Within Radius(Global.exfilLocation, 5, Team 1, Off), Is Alive(Current Array Element)
			|| !Current Array Element.backupIsDown)) == Number Of Living Players(Team 1);
		Global.exfilStarted == True;
		Global.canEscapeExfil == True;
	}

	actions
	{
		All Players(Team 1).Escaped = True;
		Wait(6, Ignore Condition);
		Global.GameOverMenu = True;
		Global.DidPlayersWin = True;
	}
}

rule("Cinematic Mode - Toggle HUD")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Crouching(Event Player) == True;
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Global.CinematicMode == True;
	}

	actions
	{
		If(Event Player.isHUDhidden);
			Enable Hero HUD(Event Player);
			Enable Messages(Event Player);
			Event Player.isHUDhidden = False;
		Else;
			Event Player.isHUDhidden = True;
			Disable Hero HUD(Event Player);
			Disable Messages(Event Player);
	}
}

rule("Cinematic Mode - Toggle Ignore Me")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Crouching(Event Player) == True;
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Global.CinematicMode == True;
	}

	actions
	{
		If(Event Player.ignoreMe);
			Event Player.ignoreMe = False;
			Filtered Array(All Players(Team 2), Current Array Element.BotTarget == Null).BotTarget = First Of(Sorted Array(Filtered Array(
				All Players(Team 1), (!Current Array Element.backupIsDown || Is Alive(Current Array Element))
				&& !Current Array Element.ignoreMe), Distance Between(Event Player, Current Array Element)));
		Else;
			Event Player.ignoreMe = True;
			Filtered Array(All Players(Team 2), Current Array Element.BotTarget == Event Player).BotTarget = First Of(Sorted Array(
				Filtered Array(All Players(Team 1), (!Current Array Element.backupIsDown || Is Alive(Current Array Element))
				&& !Current Array Element.ignoreMe), Distance Between(Event Player, Current Array Element)));
	}
}

rule("Spectating - Next")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Event Player.backupIsDown == True;
		Global.ReviveSettings[1] == True;
	}

	actions
	{
		Event Player.spectatingIndex += 1;
		If(Event Player.spectatingIndex >= Count Of(All Players(Team 1)));
			Event Player.spectatingIndex = 0;
		End;
	}
}

rule("Spectating - Prev")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Event Player.backupIsDown == True;
		Global.ReviveSettings[1] == True;
	}

	actions
	{
		Event Player.spectatingIndex -= 1;
		If(Event Player.spectatingIndex < 0);
			Event Player.spectatingIndex = Count Of(All Players(Team 1)) - 1;
		End;
	}
}

rule("Revive System - Is Dead")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Team Of(Event Player) == Team 1;
		Global.HasGameStarted == True;
		Global.ShowGameStart == True;
		Array Contains(Global.InGamePlayers, Event Player) == True;
	}

	actions
	{
		Wait(0.016, Ignore Condition);
		Event Player.spectatingIndex = Index Of Array Value(Sorted Array(All Players(Team 1),
			Event Player == Current Array Element ? 100 : 0), Event Player);
		If(Event Player.backupIsDown == False);
			Resurrect(Event Player);
			If(Is On Objective(Event Player) || Event Was Environment || Event Player.OutOfBounds);
				Teleport(Event Player, Event Player.backupLastLocation);
			End;
			Start Camera(Event Player, Ray Cast Hit Position(Sorted Array(All Players(Team 1), Event Player == Current Array Element ? 100 : 0)
				[Event Player.spectatingIndex], Eye Position(Sorted Array(All Players(Team 1), Event Player == Current Array Element ? 100 : 0)
				[Event Player.spectatingIndex]) + World Vector Of(Vector(1 * Min(-2.500 / 2.500, -0.750), 0, 0), Sorted Array(All Players(
				Team 1), Event Player == Current Array Element ? 100 : 0)[Event Player.spectatingIndex], Rotation) + Facing Direction Of(
				Sorted Array(All Players(Team 1), Event Player == Current Array Element ? 100 : 0)[Event Player.spectatingIndex]) * -2.500,
				All Players(All Teams), Sorted Array(All Players(Team 1), Event Player == Current Array Element ? 100 : 0)
				[Event Player.spectatingIndex], False), Ray Cast Hit Position(Eye Position(Sorted Array(All Players(Team 1),
				Event Player == Current Array Element ? 100 : 0)[Event Player.spectatingIndex]), Eye Position(Sorted Array(All Players(Team 1),
				Event Player == Current Array Element ? 100 : 0)[Event Player.spectatingIndex]) + Facing Direction Of(Sorted Array(All Players(
				Team 1), Event Player == Current Array Element ? 100 : 0)[Event Player.spectatingIndex]) * 200, All Players(All Teams),
				Sorted Array(All Players(Team 1), Event Player == Current Array Element ? 100 : 0)[Event Player.spectatingIndex], False), 60);
			Big Message(All Players(All Teams), Custom String("{0} {1} needs to be revived!", Hero Icon String(Hero Of(Event Player)),
				Event Player));
			disabled Start Camera(Event Player, Event Player + World Vector Of(Vector(0, 6, -1), Event Player, Rotation), Event Player, 25);
			Disallow Button(Global.ReviveSettings[0] ? Event Player : Null, Button(Primary Fire));
			Disallow Button(Global.ReviveSettings[0] ? Event Player : Null, Button(Secondary Fire));
			Disallow Button(Global.ReviveSettings[0] ? Event Player : Null, Button(Melee));
			Start Holding Button(Global.ReviveSettings[0] ? Event Player : Null, Button(Crouch));
			disabled Start Camera(Event Player, Event Player + World Vector Of(Vector(0, 6, -1), Event Player, Rotation), Event Player, 25);
			Set Status(Global.ReviveSettings[0] ? Null : Event Player, Null, Knocked Down, 9999);
			Set Status(Event Player, Null, Invincible, 9999);
			Event Player.backupIsDown = True;
			Communicate(Event Player, Need Help);
			If(Event Player.SelfRevives == 0 && Number Of Players(Team 1) == 1);
				Kill(Event Player, Null);
			End;
			If(Event Player.SelfRevives >= 1);
				If(Global.PerkLossType == 0);
					Event Player.LastBoughtPerk = First Of(Event Player.Perks);
					If(Count Of(Event Player.Perks) >= 1);
						If(Event Player.LastBoughtPerk == Custom String("Juggernog"));
							Event Player.JuggLevel = 0;
						Else If(Event Player.LastBoughtPerk == Custom String("StaminUp"));
							Event Player.StaminLevel = 0;
						Else If(Event Player.LastBoughtPerk == Custom String("ElectricCherry"));
							Event Player.ElectricLevel = 0;
						Else If(Event Player.LastBoughtPerk == Custom String("QuickRevive"));
							Event Player.QuickLevel = 0;
						End;
						Modify Player Variable(Event Player, Perks, Remove From Array By Value, First Of(Event Player.Perks));
					End;
				Else If(Global.PerkLossType == 1);
					Event Player.Perks = Empty Array;
				End;
				If(Global.WeaponLossType == 1);
					Start Forcing Player To Be Hero(Event Player, Hero(D.Va));
				End;
				Event Player.SelfRevives -= 1;
				"Begin Self Revive"
				Event Player.backupRevivee = First Of(Sorted Array(Filtered Array(All Players(Team Of(Event Player)),
					Current Array Element.backupIsDown), Distance Between(Event Player, Current Array Element)));
				Event Player.backupRevivee.backupBeingRevived = True;
				Event Player.backupRevivee.backupReviveTimer = 0;
				While(Event Player.backupRevivee.backupReviveTimer <= Event Player.ReviveMaxTime);
					Wait(0.020, Abort When False);
					Event Player.backupRevivee.backupReviveTimer += 0.020;
				End;
				Event Player.backupRevivee.backupIsDown = False;
				Clear Status(Event Player.backupRevivee, Knocked Down);
				Event Player.backupRevivee.backupDownExpireTimer = Global.DeathMaxTime;
				Clear Status(Event Player.backupRevivee, Invincible);
				Play Effect(All Players(All Teams), Good Explosion, Color(White), Event Player.backupRevivee, 5);
				Stop Camera(Event Player.backupRevivee);
				Play Effect(All Players(All Teams), Brigitte Repair Pack Armor Effect, Color(White), Event Player.backupRevivee, 5);
				Event Player.backupRevivee.backupBeingRevived = False;
				Set Status(Event Player.backupRevivee, Null, Invincible, 5);
				Play Effect(All Players(All Teams), Junkrat RIP Tire Explosion Effect, Color(White), Event Player.backupRevivee, 5);
				Play Effect(All Players(All Teams), Junkrat RIP Tire Explosion Sound, Color(White), Event Player.backupRevivee, 100);
				Set Status(Players Within Radius(Event Player.backupRevivee, 5, Team 2, Off), Null, Stunned, 5);
				Big Message(All Players(All Teams), Custom String("{0} {1} was revived!", Hero Icon String(Hero Of(Event Player)), Event Player));
				Event Player.backupRevivee = Null;
			Else If(Event Player.SelfRevives <= 0);
				Event Player.LastBoughtPerk = First Of(Event Player.Perks);
				If(Count Of(Event Player.Perks) >= 1);
					If(Event Player.LastBoughtPerk == Custom String("Juggernog"));
						Event Player.JuggLevel = 0;
					Else If(Event Player.LastBoughtPerk == Custom String("StaminUp"));
						Event Player.StaminLevel = 0;
					Else If(Event Player.LastBoughtPerk == Custom String("ElectricCherry"));
						Event Player.ElectricLevel = 0;
					Else If(Event Player.LastBoughtPerk == Custom String("QuickRevive"));
						Event Player.QuickLevel = 0;
					End;
					Modify Player Variable(Event Player, Perks, Remove From Array By Value, First Of(Event Player.Perks));
				End;
			End;
			disabled Start Camera(Event Player, Event Player + World Vector Of(Vector(0, 6, -1), Event Player, Rotation), Event Player, 25);
			disabled Set Status(Event Player, Null, Knocked Down, 9999);
			disabled Set Status(Event Player, Null, Invincible, 9999);
			disabled Event Player.backupIsDown = True;
		Else If(Event Player.backupIsDown == True);
			Clear Status(Event Player, Knocked Down);
			Clear Status(Event Player, Invincible);
			Event Player.backupIsDown = False;
			Event Player.backupDownExpireTimer = Global.DeathMaxTime;
			Stop Camera(Event Player);
			Stop Holding Button(Global.ReviveSettings[0] ? Event Player : Null, Button(Crouch));
			Allow Button(Global.ReviveSettings[0] ? Event Player : Null, Button(Primary Fire));
			Allow Button(Global.ReviveSettings[0] ? Event Player : Null, Button(Secondary Fire));
			Allow Button(Global.ReviveSettings[0] ? Event Player : Null, Button(Melee));
	}
}

disabled rule("Rule 121")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Create HUD Text(Entity Exists(Event Player) ? Remove From Array(Filtered Array(All Players(Team 1),
			!Current Array Element.isHUDhidden), Event Player) : Null, Custom String("{2} {0}: {1}", Event Player, Event Player.Points,
			Event Player.backupIsDown ? Icon String(Halo) : (Is Dead(Event Player) ? Icon String(Skull) : Hero Icon String(Hero Of(
			Event Player)))), True ? Custom String("{0}{1}{2}", Event Player.PAPLevel == 0 ? Custom String("") : Custom String("{0}{1}",
			Icon String(Fire), Event Player.PAPLevel), Custom String("{0}{1}", Array Contains(Event Player.Perks, Custom String(
			"QuickRevive")) ? Custom String("{0}{1}", Icon String(Halo), Event Player.QuickLevel) : Custom String(""), Array Contains(
			Event Player.Perks, Custom String("Juggernog")) ? Custom String("{0}{1}", Icon String(Plus), Event Player.JuggLevel)
			: Custom String("")), Custom String("{0}{1}", Array Contains(Event Player.Perks, Custom String("ElectricCherry"))
			? Custom String("{0}{1}", Icon String(Dizzy), Event Player.ElectricLevel) : Custom String(""), Array Contains(
			Event Player.Perks, Custom String("StaminUp")) ? Custom String("{0}{1}", Icon String(Spiral), Event Player.StaminLevel)
			: Custom String(""))) : Custom String(""), Event Player.backupIsDown ? Custom String("Downed") : (Is Dead(Event Player)
			? Custom String("Dead") : Custom String("{1} {0}%", Round To Integer(Normalized Health(Event Player) * 100, To Nearest),
			Icon String(Heart))), Left, 11, Color(Red), Color(White), Is Dead(Event Player) || Event Player.backupIsDown ? Color(White) : (
			Normalized Health(Event Player) > 0.750 ? Color(Green) : (Normalized Health(Event Player) <= 0.750 && Normalized Health(
			Event Player) >= 0.450 ? Color(Yellow) : Color(Red))), Visible To String and Color, Default Visibility);
	}
}

rule("Another check if player is downed or dead")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		(Event Player.BotTarget.backupIsDown || Is Dead(Event Player.BotTarget)) == True;
	}

	actions
	{
		Call Subroutine(ChangeTarget);
	}
}

rule("Modifiers - Mystery Heroes")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Array Contains(Global.Modifiers, Custom String("Mystery Heroes")) == True;
		Global.Wave > 0;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Random Value In Array(Global.HeorWeapons));
		If(Event Player.PAPLevel >= 1);
			Set Max Ammo(Event Player, 0, Max Ammo(Event Player, 0) + Max Ammo(Event Player, 0));
			Set Max Ammo(Event Player, 1, Max Ammo(Event Player, 1) + Max Ammo(Event Player, 1));
			Set Ammo(Event Player, 0, Max Ammo(Event Player, 0));
			Set Ammo(Event Player, 1, Max Ammo(Event Player, 1));
		End;
	}
}

rule("Modifier - Security Measures")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Array Contains(Global.Modifiers, Custom String("Security Measures")) == True;
		Is True For Any(All Living Players(Team 2), Distance Between(Event Player, Current Array Element) < 5) == True;
	}

	actions
	{
		Wait(1, Abort When False);
		Set Status(Event Player, Null, Hacked, 3);
		Loop If Condition Is True;
	}
}

rule("Modifier - Mayhem")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Array Contains(Global.Modifiers, Custom String("Mayhem")) == True;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Set Ultimate Charge(Event Player, 100);
		Set Ability Cooldown(Event Player, Button(Ability 1), 0);
		Set Ability Cooldown(Event Player, Button(Ability 2), 0);
		Set Ability Cooldown(Event Player, Button(Secondary Fire), 0);
		Set Ability Cooldown(Event Player, Button(Primary Fire), 0);
		Set Ability Cooldown(Event Player, Button(Jump), 0);
		Set Ability Cooldown(Event Player, Button(Crouch), 0);
		Loop;
	}
}

rule("If Omnic gets Hacked")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Status(Event Player, Hacked) == True;
		Global.BossBot != Event Player;
		Distance Between(Event Player, Global.Barrier) < Global.BarrierRadius;
	}

	actions
	{
		Wait(5, Abort When False);
		Play Effect(All Players(All Teams), DVa Self Destruct Explosion Effect, Color(White), Event Player, 10);
		Play Effect(All Players(All Teams), DVa Self Destruct Explosion Sound, Color(White), Event Player, 200);
		Damage(Filtered Array(Players Within Radius(Event Player, 10, Team 2, Off), !Has Status(Current Array Element, Hacked)),
			Event Player, Count Of(Players Within Radius(Event Player, 10, Team 2, Off)) * 25);
		Apply Impulse(Filtered Array(Players Within Radius(Event Player, 10, Team 2, Off), !Has Status(Current Array Element, Hacked)),
			Vector(0, 8, -15), 30, To Player, Cancel Contrary Motion);
		Kill(Event Player, Event Player);
	}
}
