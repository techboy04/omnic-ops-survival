settings
{
	lobby
	{
		Allow Players Who Are In Queue: Yes
		Map Rotation: Paused
		Match Voice Chat: Enabled
		Max Team 1 Players: 4
		Max Team 2 Players: 0
		Return To Lobby: Never
		Swap Teams After Match: No
	}

	modes
	{
		Skirmish
		{
			enabled maps
			{
				Eichenwalde Halloween
			}
		}

		General
		{
			Allow Hero Switching: Off
			Game Mode Start: Immediately
			Hero Limit: Off
			Respawn As Random Hero: On
			Spawn Health Packs: Disabled
		}
	}

	heroes
	{
		Team 1
		{
			enabled heroes
			{
				D.Va
			}
		}

		Team 2
		{
			Orisa
			{
				Damage Received: 20%
				Health: 500%
				Projectile Speed: 95%
			}
		}

		General
		{
			D.Va
			{
				Spawn Without Mech: On
				Ultimate Ability Self-Destruct: Off
			}
		}
	}

	extensions
	{
		Beam Effects
		Play More Effects
		Spawn More Dummy Bots
	}
}

variables
{
	global:
		1: Wave
		2: ShowGameStart
		3: PowerLocation
		4: TrapActivator
		5: PlayerSpawn
		6: JugLocation
		7: StaminLocation
		8: ElectricLocation
		9: QuickReviveLocation
		10: Barrier
		11: Power
		12: PerkLocations
		13: ZombiesLeft
		14: BarrierRadius
		15: MysteryBox
		16: BoxOpen
		17: HeorWeapons
		18: DoublePointsActive
		19: StartDirector
		20: EnemySpawns
		21: RandomStartLines
		22: RandomLoseLines
		23: RandomExfilLines
		24: EnemyMaxHealth
		25: EnemyMaxDamage
		26: ExplosiveLines
		27: SniperLines
		28: AssaultLines
		30: QuickRevivePrice
		31: StaminupPrice
		32: JuggernogPrice
		33: ElectricCherryPrice
		34: PowerPrice
		35: MysteryBoxPrice
		36: TrapPrice
		37: TrapActivateLocation
		38: TrapTargetArea
		39: TrapActive
		40: PackAPunchLocation
		41: PackAPunchPrice
		42: MysteryBoxClass
		43: EE1Location
		44: EE2Location
		45: EE3Location
		46: AnomalyLocation
		47: EE1Active
		48: EE2Active
		49: EE3Active
		50: EERingEffects
		51: EE1Killcount
		52: EE2Killcount
		53: EE3Killcount
		54: KillcountLimit
		55: OpenAnomaly
		56: BossBot
		57: HasGameStarted
		58: StartBossLocation
		59: ActivateBoss
		60: GameOverMenu
		61: TimeElapsed
		62: StartTimer
		63: SpecialRoundEvents
		64: VictoryLines
		65: DidPlayersWin
		66: WaveLimit
		67: StartBonusEvent
		68: Event
		69: DisablePurchases
		70: DefuseBomb
		71: SpecialEventDescription
		72: SpecialEventHUD
		73: SpecialEventEffects
		74: WaveIncrement
		75: EnableSpecialEvents
		76: BombDefuseLocationArray
		77: ChosenBombDefuseLocation
		78: ActivateEELocation
		79: IsEEActivated
		80: MysteryBoxReward
		81: OrbsActivated
		82: ChallengesLocation
		83: Challenge
		84: ChallengeEffects
		85: IsChallengeActive
		86: ChallengeTimer
		87: ChallengeArea
		88: RewardLocation
		89: ChallengePrice
		90: ChallengeMaxTime
		91: UselessTips
		92: ChosenTip
		93: I
		95: PowerupTimer
		96: StartingPoints
		97: PerkLossType
		98: WeaponLossType
		99: BossStarted

	player:
		0: PingLocation
		1: Points
		2: Score
		3: Perks
		4: ElectricCherryReady
		5: ChallengeScore
		6: IfBotisStuck
		7: SelfRevives
		8: PackAPunched
		9: RewardType
		10: DeathmachineActive
		12: DeathmachineTimer
		13: GodActive
		14: GodTimer
		15: BotTarget
}

subroutines
{
	1: RespawnDummy
	2: NextRound
	3: ElectricCherryEffects
	5: ChangeTarget
	7: SpawnEnemyPortals
}

rule("Variables")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Power = False;
		Global.PerkLocations = Array(Global.JugLocation, Global.StaminLocation, Global.ElectricLocation, Global.QuickReviveLocation);
		Global.BarrierRadius = 45;
		Global.BoxOpen = False;
		Global.DoublePointsActive = True;
		Global.RandomStartLines = Array(Custom String("Alright team, survive as long as possible!"), Custom String(
			"Team, you need to survive as long as you can!"), Custom String(
			"Help is offline team! Survive as long as you can until they come online again!"));
		Global.RandomLoseLines = Array(Custom String("Team? TEAM?... Damn, they went dark."), Custom String(
			"Fallback! I repeat! Fallback!"), Custom String("Team became dark! I repeat, the team went dark!"));
		Global.RandomExfilLines = Array(Custom String("Exfil is on its way! Survive until then!"), Custom String(
			"You're lucky the chopper was near, hold off until they arrive!"), Custom String(
			"Help is on its way! Hold off until then team!"));
		Global.ExplosiveLines = Array(Custom String("An explosive weapon? Nice!"), Custom String("Kaboom! Hahaha!"), Custom String(
			"Robot parts are about to fly!"));
		Global.SniperLines = Array(Custom String("Sharpshooting weapon, sweet!"), Custom String(
			"Wonder how many heads I can pop with this thing!"), Custom String("A sniper? Sweet"));
		Global.AssaultLines = Array(Custom String("I could get some use out of this!"), Custom String("Watch out omnics! Here I come!"),
			Custom String("Hell yeah!"));
		disabled If(Global.MysteryBoxClass == Custom String("Default"));
		Global.HeorWeapons = Array(Hero(Hanzo), Hero(Junkrat), Hero(Mei), Hero(Reaper), Hero(McCree), Hero(Sombra), Hero(Soldier: 76));
		disabled Else If(Global.MysteryBoxClass == Custom String("Snipers Only"));
		disabled Global.HeorWeapons = Array(Hero(Hanzo), Hero(Ashe), Hero(Widowmaker));
		Global.HasGameStarted = False;
		Global.VictoryLines = Array(Custom String("Nice job team! Rounds on me!"), Custom String(
			"Mission Successful! Lets bring them home!"), Custom String("Nice work team! Lets meetup and debrief!"));
		Global.SpecialRoundEvents = Array(Custom String("Defuse the Bomb"), Custom String("Low Gravity"), Custom String(
			"Purchases Disabled"));
		Global.UselessTips = Array(Custom String("Every map has 1 unique perk!"), Custom String(
			"Play challenges to unlock unique rewards!"), Custom String("Special waves occur every 5 waves"), Custom String(
			"Dark portals show where the enemies will spawn"), Custom String("Some heroes give a better point advantage than others"));
	}
}

rule("Location Set")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Start Forcing Spawn Room(Team 1, 0);
		Start Forcing Spawn Room(Team 2, 1);
		Global.Barrier = Vector(82.901, Y Component Of(Global.Barrier) - 6, -86.310);
		Global.PlayerSpawn = Vector(80.282, 14.002, -92.422);
		Global.QuickReviveLocation = Vector(86.888, 14.235, -98.672);
		Global.JugLocation = Vector(100.255, 14.041, -104.681);
		Global.StaminLocation = Vector(57.861, 19.364, -82.995);
		Global.ElectricLocation = Vector(79.317, 13.985, -72.247);
		Global.PowerLocation = Vector(97.899, 14.052, -61.237);
		Global.MysteryBox = Vector(70.911, 14.053, -104.055);
		Global.EnemySpawns = Array(Vector(47.223, 9.752, -92), Vector(66.731, 17.220, -60.246), Vector(93.399, 14.041, -116.360), Vector(
			88.539, 14.027, -66.493));
		Global.TrapActivateLocation = Vector(60.814, 20.272, -96.224);
		Global.TrapTargetArea = Vector(88.056, 13.969, -68.027);
		Global.PackAPunchLocation = Vector(75.250, 14.042, -50.939);
		Global.EE1Location = Vector(52.385, 19.023, -102.326);
		Global.EE2Location = Vector(83.951, 14.197, -103.130);
		Global.EE3Location = Vector(102.537, 10.885, -91.327);
		Global.AnomalyLocation = Vector(87.982, 13.971, -67.875);
		Global.StartBossLocation = Vector(80.286, 14.077, -81.760);
		Global.BombDefuseLocationArray = Array(Vector(89.368, 14.043, -59.500), Vector(60.791, 8.042, -72.333), Vector(0, 0, 0));
		Global.ActivateEELocation = Vector(96.314, 13.273, -50.852);
		Global.RewardLocation = Vector(66.949, 13.977, -102.345);
		Global.ChallengeArea = Vector(78.759, 14.237, -99.165);
		Global.ChallengesLocation = Vector(64.393, 13.778, -101.312);
	}
}

rule("Spawn Effects")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Effect(All Players(All Teams), Sphere, Color(White), Global.Barrier, Global.BarrierRadius, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Ring, Global.Power == True ? Color(Aqua) : Color(Gray), Global.QuickReviveLocation, 1,
			Visible To Position Radius and Color);
		Create Effect(All Players(All Teams), Ring, Global.Power == True ? Color(Red) : Color(Gray), Global.JugLocation, 1,
			Visible To Position Radius and Color);
		Create Effect(All Players(All Teams), Ring, Global.Power == True ? Color(Orange) : Color(Gray), Global.StaminLocation, 1,
			Visible To Position Radius and Color);
		Create Effect(All Players(All Teams), Ring, Global.Power == True ? Color(Turquoise) : Color(Gray), Global.ElectricLocation, 1,
			Visible To Position Radius and Color);
		Create Effect(All Players(All Teams), Ring, Global.Power == True ? Color(Green) : Color(White), Global.PowerLocation, 1,
			Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), Icon String(Bolt), Global.PowerLocation, 2, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Orange), Global.MysteryBox, 1, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), Icon String(Question Mark), Global.MysteryBox, 2, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		Disable Death Spectate All Players(All Players(All Teams));
		Create Effect(All Players(All Teams), Ring, Global.Power == True ? Color(Sky Blue) : Color(Gray), Global.PackAPunchLocation, 1,
			Visible To Position Radius and Color);
		Create Effect(All Players(All Teams), Ring, Color(Lime Green), Global.ChallengesLocation, 1, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), Icon String(Club), Global.ChallengesLocation, 1, Do Not Clip,
			Visible To Position and String, Color(Lime Green), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Black), Global.RewardLocation, 1, Visible To Position and Radius);
		Create In-World Text(Global.Power == True ? All Players(All Teams) : Null, Custom String("Buy Juggernog - {0} Points",
			Global.JuggernogPrice), Vector(X Component Of(Global.JugLocation), Y Component Of(Global.JugLocation) - 0.500, Z Component Of(
			Global.JugLocation)), 1, Clip Against Surfaces, Visible To Position and String, Color(Red), Default Visibility);
		Create In-World Text(Global.Power == True ? All Players(All Teams) : Null, Icon String(Plus), Global.JugLocation, 2, Do Not Clip,
			Visible To Position and String, Color(Red), Default Visibility);
		Create In-World Text(Global.Power == True ? All Players(All Teams) : Null, Icon String(Dizzy), Global.ElectricLocation, 2,
			Do Not Clip, Visible To Position and String, Color(Turquoise), Default Visibility);
		Create In-World Text(Global.Power == True ? All Players(All Teams) : Null, Icon String(Halo), Global.QuickReviveLocation, 2,
			Do Not Clip, Visible To Position and String, Color(Aqua), Default Visibility);
		Create In-World Text(Global.Power == True ? All Players(All Teams) : Null, Icon String(Spiral), Global.StaminLocation, 2,
			Do Not Clip, Visible To Position and String, Color(Orange), Default Visibility);
		Create In-World Text(Global.Power == True ? All Players(All Teams) : Null, Icon String(Fire), Global.PackAPunchLocation, 2,
			Do Not Clip, Visible To Position and String, Color(Sky Blue), Default Visibility);
		Create In-World Text(Global.Power == True ? All Players(All Teams) : Null, Custom String("Buy Electric Cherry - {0} Points",
			Global.ElectricCherryPrice), Vector(X Component Of(Global.ElectricLocation), Y Component Of(Global.ElectricLocation) - 0.500,
			Z Component Of(Global.ElectricLocation)), 1, Clip Against Surfaces, Visible To Position and String, Color(Turquoise),
			Default Visibility);
		Create In-World Text(Global.Power == True ? All Players(All Teams) : Null, Custom String("Buy Quick Revive - {0} Points",
			Global.QuickRevivePrice), Vector(X Component Of(Global.QuickReviveLocation), Y Component Of(Global.QuickReviveLocation)
			- 0.500, Z Component Of(Global.QuickReviveLocation)), 1, Clip Against Surfaces, Visible To Position and String, Color(Aqua),
			Default Visibility);
		Create In-World Text(Global.Power == True ? All Players(All Teams) : Null, Custom String("Buy Staminup - {0} Points",
			Global.StaminupPrice), Vector(X Component Of(Global.StaminLocation), Y Component Of(Global.StaminLocation) - 0.500,
			Z Component Of(Global.StaminLocation)), 1, Clip Against Surfaces, Visible To Position and String, Color(Orange),
			Default Visibility);
		Create In-World Text(Global.Power == True ? All Players(All Teams) : Null, Custom String("Use Trap - {0} Points",
			Global.TrapPrice), Global.TrapActivateLocation, 1, Clip Against Surfaces, Visible To Position String and Color,
			Global.TrapActive ? Color(Red) : Color(Green), Default Visibility);
		Create In-World Text(Global.Power == True ? All Players(All Teams) : Null, Custom String("Upgrade your Weapon - {0} Points",
			Global.PackAPunchPrice), Vector(X Component Of(Global.PackAPunchLocation), Y Component Of(Global.PackAPunchLocation) - 0.500,
			Z Component Of(Global.PackAPunchLocation)), 1, Clip Against Surfaces, Visible To Position and String, Color(Sky Blue),
			Default Visibility);
	}
}

disabled rule("Teleport")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Teleport(Event Player, Global.PlayerSpawn);
	}
}

rule("Custom HUD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.ShowGameStart == True;
	}

	actions
	{
		disabled Create HUD Text(Event Player, Null, Custom String(
			" \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"),
			Null, Left, 3, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		disabled Create Progress Bar HUD Text(Event Player, Normalized Health(Event Player) * 100, Custom String("Health"), Left, 4, Color(White),
			Color(White), Visible To Values and Color, Default Visibility);
		Create Progress Bar In-World Text(All Players(Team Of(Event Player)), Normalized Health(Event Player) * 100, Custom String(""),
			Event Player, 0.500, Clip Against Surfaces, Color(Blue), Color(White), Visible To Position Values and Color,
			Default Visibility);
		Create Progress Bar In-World Text(All Players(Opposite Team Of(Team Of(Event Player))), Normalized Health(Event Player) * 100,
			Custom String(""), Event Player, 0.500, Clip Against Surfaces, Color(Red), Color(White), Visible To Position Values and Color,
			Default Visibility);
		disabled Disable Hero HUD(Event Player);
		disabled Create HUD Text(Event Player, Null, Custom String(
			" \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n "),
			Null, Left, 3, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		disabled Create HUD Text(Event Player, Null, Custom String(" \r\n \r\n \r\n \r\n "), Null, Left, 3, Color(White), Color(White), Color(
			White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Global.WaveLimit == 0 ? Custom String("Wave {0}", Global.Wave) : Custom String("Wave {0}/{1}",
			Global.Wave, Global.WaveLimit), Null, Null, Left, 0, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		disabled Create HUD Text(Event Player, Custom String("{0} - {1}", Ability Icon String(Hero Of(Event Player), Button(Primary Fire)), Ammo(
			Event Player, 0)), Null, Null, Left, 3, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Custom String("Points: {0}", Event Player.Points), Null, Null, Left, 10, Color(Rose), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Custom String("Enemies Left: {0}", Global.ZombiesLeft), Global.ZombiesLeft == 1 ? Custom String(
			"Distance - {0}", Distance Between(Event Player, All Living Players(Team 2))) : Custom String(""), Null, Left, 3, Color(Red),
			Color(Rose), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Custom String("Perks:"), Null, Null, Left, 5, Color(Gray), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Null, Custom String("{0}\r\n{1}", Custom String("{0}\r\n{1}", Event Player.Perks[1],
			Event Player.Perks[2]), Custom String("{0}\r\n{1}", Event Player.Perks[3], Event Player.Perks[4])), Left, 6, Color(Gray),
			Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Event Player.SelfRevives >= 1 ? Custom String("Self Revives: {0}", Event Player.SelfRevives)
			: Custom String(""), Null, Null, Left, 7, Color(Violet), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Create HUD Text(Global.IsChallengeActive == True ? Event Player : Null, Event Player.RewardType == 4 ? Custom String(
			"CLAIM YOUR REWARD - {0}", Global.ChallengeTimer) : Custom String("{0} - {1}s {2}", Global.Challenge, Global.ChallengeTimer,
			Event Player.ChallengeScore), Null, Null, Right, 6, Event Player.RewardType == 1 ? Color(Green) : (
			Event Player.RewardType == 2 ? Color(Purple) : (Event Player.RewardType == 3 ? Color(Rose) : (
			Event Player.RewardType == 4 ? Color(Orange) : Color(White)))), Color(White), Color(White), Visible To String and Color,
			Default Visibility);
		Create HUD Text(Remove From Array(All Players(Team 1), Event Player), Custom String("{0}: {1}", Event Player, Event Player.Points),
			Null, Null, Left, 11, Color(Red), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("{0}\r\n{1}\r\n{2}", Custom String(" "), Custom String(" "), Custom String(" ")),
			Null, Left, 9, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Disable Kill Feed(Event Player);
		Create Progress Bar HUD Text(Global.BossStarted == True ? Event Player : Null, Normalized Health(Global.BossBot) * 100,
			Custom String("Boss Health"), Top, -1, Color(Red), Color(Red), Visible To Values and Color, Default Visibility);
	}
}

disabled rule("Buy Message")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		If(Global.Power == True);
		Else;
			disabled Small Message(All Players(All Teams), Custom String("1"));
			"Jug"
			If(Distance Between(Event Player, Global.JugLocation) <= 2);
				Small Message(All Players(All Teams), Custom String("{0} {1} {2}", Custom String("Press"), Input Binding String(Button(Interact)),
					Custom String("to use")));
			"Quick"
			Else If(Distance Between(Event Player, Global.QuickReviveLocation) <= 2);
				Small Message(All Players(All Teams), Custom String("{0} {1} {2}", Custom String("Press"), Input Binding String(Button(Interact)),
					Custom String("to use")));
			"Double"
			Else If(Distance Between(Event Player, Global.ElectricLocation) <= 2);
				Small Message(All Players(All Teams), Custom String("{0} {1} {2}", Custom String("Press"), Input Binding String(Button(Interact)),
					Custom String("to use")));
			"Stamin"
			Else If(Distance Between(Event Player, Global.StaminLocation) <= 2);
				Small Message(All Players(All Teams), Custom String("{0} {1} {2}", Custom String("Press"), Input Binding String(Button(Interact)),
					Custom String("to use")));
			End;
		End;
		Wait(3, Ignore Condition);
		Wait Until(Distance Between(Event Player, Global.PerkLocations) <= 2, 99999);
		Loop;
	}
}

rule("Barrier")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.Barrier) >= Global.BarrierRadius + 1;
		Is In Spawn Room(Event Player) == False;
	}

	actions
	{
		Small Message(Event Player, Custom String("OUT OF BOUNDS! - 5 seconds"));
		Wait(1, Abort When False);
		Small Message(Event Player, Custom String("OUT OF BOUNDS! - 4 seconds"));
		Wait(1, Abort When False);
		Small Message(Event Player, Custom String("OUT OF BOUNDS! - 3 seconds"));
		Wait(1, Abort When False);
		Small Message(Event Player, Custom String("OUT OF BOUNDS! - 2 seconds"));
		Wait(1, Abort When False);
		Small Message(Event Player, Custom String("OUT OF BOUNDS! - 1 seconds"));
		Wait(1, Abort When False);
		Small Message(Event Player, Custom String("OUT OF BOUNDS! - 0 seconds"));
		Wait(1, Abort When False);
		Kill(Event Player, Null);
	}
}

rule("MysteryBox")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.MysteryBox) <= 2;
		Global.BoxOpen == False;
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.DisablePurchases != True;
	}

	actions
	{
		Global.BoxOpen = True;
		If(Event Player.Points >= 950);
			Event Player.Points -= 950;
			Global.MysteryBoxReward = Random Value In Array(Global.HeorWeapons);
			If(Global.MysteryBoxReward == Hero Of(Event Player));
				Big Message(Event Player, Custom String("BAD LUCK!"));
				Communicate(Event Player, Sorry);
			Else;
				Start Forcing Player To Be Hero(Event Player, Global.MysteryBoxReward);
				If(Event Player.PackAPunched == True);
					Set Max Ammo(Event Player, 0, Max Ammo(Event Player, 0) + Max Ammo(Event Player, 0));
					Set Max Ammo(Event Player, 1, Max Ammo(Event Player, 1) + Max Ammo(Event Player, 1));
				End;
			End;
		End;
		Wait(3, Ignore Condition);
		Global.BoxOpen = False;
	}
}

rule("Give Points - Kill")
{
	event
	{
		Player Earned Elimination;
		All;
		All;
	}

	actions
	{
		Event Player.Points += 100;
		Event Player.Score += 100;
		If(Global.DoublePointsActive == True);
			Event Player.Points += 100;
			Event Player.Score += 100;
		End;
	}
}

rule("Give Points - Damage")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	actions
	{
		Event Player.Points += 10;
		Event Player.Score += 10;
		If(Global.DoublePointsActive == True);
			Event Player.Points += 10;
			Event Player.Score += 10;
		End;
	}
}

rule("Start Game")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		disabled Wait Until(Number Of Living Players(Team 1) >= 1, 99999);
		Wait Until(Is Button Held(Host Player, Button(Interact)), 99999);
		Global.HasGameStarted = True;
		Wait(15, Ignore Condition);
		Destroy All HUD Text;
		Enable Hero HUD(All Players(All Teams));
		Enable Messages(All Players(All Teams));
		Global.ShowGameStart = True;
		Call Subroutine(SpawnEnemyPortals);
		Teleport(All Players(Team 1), Global.PlayerSpawn);
		Create Dummy Bot(Hero(Bastion), Team 2, -1, Random Value In Array(Global.EnemySpawns), Vector(0, 0, 0));
		Small Message(All Players(All Teams), Custom String("{0} \"{1}\"", Hero Icon String(Hero(Soldier: 76)), Random Value In Array(
			Global.RandomStartLines)));
		Global.StartDirector = True;
		Global.EnemyMaxDamage = 50;
		Global.EnemyMaxHealth = 20;
		Global.ZombiesLeft = 5;
		Global.Power = False;
		If(Number Of Players(Team 1) == 1);
			All Players(Team 1).SelfRevives = 3;
		End;
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(X Component Of(Global.EE2Location), Y Component Of(
			Global.EE2Location) - 2, Z Component Of(Global.EE2Location)), Vector(X Component Of(Global.EE2Location) + 0.001,
			Y Component Of(Global.EE2Location) + 2, Z Component Of(Global.EE2Location)), Color(White), None);
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(X Component Of(Global.EE3Location), Y Component Of(
			Global.EE3Location) - 2, Z Component Of(Global.EE3Location)), Vector(X Component Of(Global.EE3Location) + 0.001,
			Y Component Of(Global.EE3Location) + 2, Z Component Of(Global.EE3Location)), Color(White), None);
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(X Component Of(Global.EE1Location), Y Component Of(
			Global.EE1Location) - 2, Z Component Of(Global.EE1Location)), Vector(X Component Of(Global.EE1Location) + 0.001,
			Y Component Of(Global.EE1Location) + 2, Z Component Of(Global.EE1Location)), Color(White), None);
		Global.OpenAnomaly = False;
		Global.AnomalyLocation = Vector(X Component Of(Global.AnomalyLocation), Y Component Of(Global.AnomalyLocation) + 5, Z Component Of(
			Global.AnomalyLocation));
		Create In-World Text(All Players(All Teams), Custom String("Random Hero - {0} Points", Global.MysteryBoxPrice), Vector(
			X Component Of(Global.MysteryBox), Y Component Of(Global.MysteryBox) - 0.500, Z Component Of(Global.MysteryBox)), 1,
			Clip Against Surfaces, Visible To Position and String, Color(Orange), Default Visibility);
		Create In-World Text(All Players(All Teams), Custom String("Turn on Power - {0} Points", Global.PowerPrice), Vector(X Component Of(
			Global.PowerLocation), Y Component Of(Global.PowerLocation) - 0.500, Z Component Of(Global.PowerLocation)), 1,
			Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
		Global.HasGameStarted = True;
		Clear Status(All Players(All Teams), Stunned);
		Stop Camera(All Players(All Teams));
		Global.StartTimer = True;
		Pause Match Time;
		Create In-World Text(All Players(All Teams), Custom String("Play a Challenge - {0} Points", Global.ChallengePrice), Vector(
			X Component Of(Global.ChallengesLocation), Y Component Of(Global.ChallengesLocation) - 0.500, Z Component Of(
			Global.ChallengesLocation)), 1, Clip Against Surfaces, Visible To Position and String, Color(Lime Green), Default Visibility);
		All Players(Team 1).Points = Global.StartingPoints;
		Wait(5, Ignore Condition);
		Create Dummy Bot(Hero(Bastion), Team 2, -1, Random Value In Array(Global.EnemySpawns), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Bastion), Team 2, -1, Random Value In Array(Global.EnemySpawns), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Bastion), Team 2, -1, Random Value In Array(Global.EnemySpawns), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Bastion), Team 2, -1, Random Value In Array(Global.EnemySpawns), Vector(0, 0, 0));
	}
}

rule("Update Bots Difficulty on Repeat")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Set Max Health(Event Player, Global.EnemyMaxHealth);
		Set Damage Dealt(Event Player, Global.EnemyMaxDamage);
		Loop;
	}
}

rule("Bot Dies from Player")
{
	event
	{
		Player Dealt Final Blow;
		Team 1;
		All;
	}

	conditions
	{
		Victim != Null;
		Global.BossBot != Event Player;
		Event Was Environment != True;
	}

	actions
	{
		Global.ZombiesLeft -= 1;
		If(Global.ZombiesLeft < Number Of Players(Team 2));
			Disable Built-In Game Mode Respawning(Victim);
		Else;
			Enable Built-In Game Mode Respawning(All Players(Team 2));
			Wait(5, Ignore Condition);
			Respawn(Victim);
		End;
		If(Global.ZombiesLeft == 0);
			Call Subroutine(NextRound);
		End;
	}
}

rule("StartEnd Round")
{
	event
	{
		Subroutine;
		NextRound;
	}

	actions
	{
		Destroy HUD Text(Global.SpecialEventHUD);
		If(Global.Event == Custom String("Low Gravity"));
			Set Gravity(All Players(All Teams), 100);
		Else If(Global.Event == Custom String("Purchases Disabled"));
			Global.DisablePurchases = False;
		Else If(Global.Event == Custom String("Defuse the Bomb"));
			Global.DefuseBomb = False;
			Destroy Effect(Global.SpecialEventEffects[0]);
			Destroy Effect(Global.SpecialEventEffects[1]);
		End;
		Global.StartBonusEvent = False;
		Big Message(All Players(All Teams), Custom String("Wave Completed"));
		Respawn(All Dead Players(Team 1));
		Wait(5, Ignore Condition);
		If(Global.WaveLimit != 0);
			If(Global.Wave == Global.WaveLimit);
				Global.GameOverMenu = True;
			End;
		Else;
			Global.Wave += 1;
			Global.WaveIncrement += 1;
			Wait(0.250, Ignore Condition);
			Big Message(All Players(All Teams), Custom String("Wave {0}", Global.Wave));
			Global.ZombiesLeft = 6 + Global.Wave + 2;
			Global.EnemyMaxHealth += 10;
			Global.EnemyMaxDamage += 8;
			Wait(2, Ignore Condition);
			Respawn(All Players(Team 2));
			If(Global.WaveIncrement == 5);
				Global.WaveIncrement = 0;
				If(Global.EnableSpecialEvents == True);
					Global.StartBonusEvent = True;
				End;
			End;
			If(Global.Wave == 1);
				Create Dummy Bot(Hero(Bastion), Team 2, -1, Random Value In Array(Global.EnemySpawns), Vector(0, 0, 0));
				Create Dummy Bot(Hero(Bastion), Team 2, -1, Random Value In Array(Global.EnemySpawns), Vector(0, 0, 0));
				Create Dummy Bot(Hero(Bastion), Team 2, -1, Random Value In Array(Global.EnemySpawns), Vector(0, 0, 0));
			End;
	}
}

rule("Bot Falls Off")
{
	event
	{
		Player Died;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Event Was Environment == True;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Respawn(Event Player);
	}
}

rule("Player Dies")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == False;
		Event Player.SelfRevives >= 1;
	}

	actions
	{
		If(Global.PerkLossType == 0);
			If(Count Of(Event Player.Perks) >= 1);
				Event Player.Perks = Remove From Array(Event Player.Perks, Event Player.Perks[Count Of(Event Player.Perks) - 1]);
			End;
		Else If(Global.PerkLossType == 1);
			Event Player.Perks = Empty Array;
		End;
		Small Message(Event Player, Custom String("Respawning in 5 seconds..."));
		Wait(5, Abort When False);
		If(Global.WeaponLossType == 1);
			Start Forcing Player To Be Hero(Event Player, Hero(D.Va));
		End;
		Respawn(Event Player);
		Event Player.SelfRevives -= 1;
		Event Player.PackAPunched = False;
	}
}

rule("Buy Perk")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.Power == True;
		Global.DisablePurchases != True;
	}

	actions
	{
		If(Distance Between(Event Player, Global.QuickReviveLocation) <= 2);
			If(Array Contains(Event Player.Perks, Custom String("QuickRevive")));
				Small Message(Event Player, Custom String("You already have this perk!"));
			Else;
				If(Event Player.Points >= Global.QuickRevivePrice);
					Event Player.Points -= Global.QuickRevivePrice;
					Event Player.Perks = Append To Array(Event Player.Perks, Custom String("QuickRevive"));
				Else;
					Small Message(Event Player, Custom String("Insufficient Money!"));
				End;
			End;
		Else If(Distance Between(Event Player, Global.StaminLocation) <= 2);
			If(Array Contains(Event Player.Perks, Custom String("StaminUp")));
				Small Message(Event Player, Custom String("You already have this perk!"));
			Else;
				If(Event Player.Points >= Global.StaminupPrice);
					Event Player.Points -= Global.StaminupPrice;
					Event Player.Perks = Append To Array(Event Player.Perks, Custom String("StaminUp"));
				Else;
					Small Message(Event Player, Custom String("Insufficient Money!"));
				End;
			End;
		Else If(Distance Between(Event Player, Global.JugLocation) <= 2);
			If(Array Contains(Event Player.Perks, Custom String("Juggernog")));
				Small Message(Event Player, Custom String("You already have this perk!"));
			Else;
				If(Event Player.Points >= Global.JuggernogPrice);
					Event Player.Points -= Global.JuggernogPrice;
					Event Player.Perks = Append To Array(Event Player.Perks, Custom String("Juggernog"));
					Wait(0.250, Ignore Condition);
					Heal(Event Player, Null, 99999);
				Else;
					Small Message(Event Player, Custom String("Insufficient Money!"));
				End;
			End;
		Else If(Distance Between(Event Player, Global.ElectricLocation) <= 2);
			If(Array Contains(Event Player.Perks, Custom String("ElectricCherry")));
				Small Message(Event Player, Custom String("You already have this perk!"));
			Else;
				If(Event Player.Points >= Global.ElectricCherryPrice);
					Event Player.Points -= Global.ElectricCherryPrice;
					Event Player.Perks = Append To Array(Event Player.Perks, Custom String("ElectricCherry"));
					Event Player.ElectricCherryReady = True;
				Else;
					Small Message(Event Player, Custom String("Insufficient Money!"));
				End;
			End;
		Else If(Distance Between(Event Player, Global.PackAPunchLocation) <= 2);
			If(Event Player.PackAPunched == True);
				Small Message(Event Player, Custom String("You already Pack a Punched!"));
			Else;
				If(Event Player.Points >= Global.PackAPunchPrice);
					Event Player.Points -= Global.PackAPunchPrice;
					Event Player.PackAPunched = True;
					Set Damage Dealt(Event Player, 200);
					Set Max Ammo(Event Player, 0, Max Ammo(Event Player, 0) + Max Ammo(Event Player, 0));
					Set Max Ammo(Event Player, 1, Max Ammo(Event Player, 1) + Max Ammo(Event Player, 1));
				Else;
					Small Message(Event Player, Custom String("Insufficient Money!"));
				End;
			End;
	}
}

rule("Check Perks")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		If(Array Contains(Event Player.Perks, Custom String("StaminUp")));
			Set Move Speed(Event Player, 150);
		Else;
			Set Move Speed(Event Player, 100);
		End;
		If(Array Contains(Event Player.Perks, Custom String("Juggernog")));
			Set Max Health(Event Player, 150);
		Else;
			Set Max Health(Event Player, 100);
		End;
		If(Array Contains(Event Player.Perks, Custom String("ElectricCherry")));
			Wait Until(Is Reloading(Event Player), 99999);
			Call Subroutine(ElectricCherryEffects);
		End;
		Loop;
	}
}

rule("Electric Cherry")
{
	event
	{
		Subroutine;
		ElectricCherryEffects;
	}

	actions
	{
		If(Count Of(Players Within Radius(Event Player, 5, Opposite Team Of(Team Of(Event Player)), Surfaces)) >= 1);
			If(Event Player.ElectricCherryReady == True);
				Set Status(Players Within Radius(Event Player, 5, Opposite Team Of(Team Of(Event Player)), Surfaces), Null, Frozen, 5);
				Event Player.ElectricCherryReady = False;
				Wait(10, Abort When False);
				Event Player.ElectricCherryReady = True;
	}
}

rule("Power Animation")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Wait Until(Global.Power == True, 99999);
		disabled Create Effect(All Players(All Teams), Ring, Color(Aqua), Global.QuickReviveLocation, 1, Visible To Position and Radius);
		disabled Create Effect(All Players(All Teams), Ring, Color(Red), Global.JugLocation, 1, Visible To Position and Radius);
		disabled Create Effect(All Players(All Teams), Ring, Color(Orange), Global.StaminLocation, 1, Visible To Position and Radius);
		disabled Create Effect(All Players(All Teams), Ring, Color(Turquoise), Global.ElectricLocation, 1, Visible To Position and Radius);
		disabled Create In-World Text(Global.Power == True ? All Players(All Teams) : Null, Icon String(Plus), Global.JugLocation, 2, Do Not Clip,
			Visible To Position and String, Color(Red), Default Visibility);
		disabled Create In-World Text(Global.Power == True ? All Players(All Teams) : Null, Icon String(Dizzy), Global.ElectricLocation, 2,
			Do Not Clip, Visible To Position and String, Color(Turquoise), Default Visibility);
		disabled Create In-World Text(Global.Power == True ? All Players(All Teams) : Null, Icon String(Halo), Global.QuickReviveLocation, 2,
			Do Not Clip, Visible To Position and String, Color(Aqua), Default Visibility);
		disabled Create In-World Text(Global.Power == True ? All Players(All Teams) : Null, Icon String(Spiral), Global.StaminLocation, 2,
			Do Not Clip, Visible To Position and String, Color(Orange), Default Visibility);
		Big Message(All Players(All Teams), Custom String("Power is on! Perks are activated!"));
		Create Effect(All Players(All Teams), Sphere, Global.TrapActive == True ? Color(Red) : Color(Green), Global.TrapActivateLocation,
			0.300, Visible To Position Radius and Color);
		disabled Create In-World Text(Global.Power == True ? All Players(All Teams) : Null, Icon String(Fire), Global.PackAPunchLocation, 2,
			Do Not Clip, Visible To Position and String, Color(Sky Blue), Default Visibility);
		Create Effect(All Players(All Teams), Orb, Global.EE1Active == True ? Color(Purple) : Color(Gray), Vector(X Component Of(
			Global.EE1Location), Y Component Of(Global.EE1Location) + 2, Z Component Of(Global.EE1Location)), 0.500,
			Visible To Position Radius and Color);
		Create Effect(All Players(All Teams), Orb, Global.EE2Active == True ? Color(Purple) : Color(Gray), Vector(X Component Of(
			Global.EE2Location), Y Component Of(Global.EE2Location) + 2, Z Component Of(Global.EE2Location)), 0.500,
			Visible To Position Radius and Color);
		Create Effect(All Players(All Teams), Orb, Global.EE3Active == True ? Color(Purple) : Color(Gray), Vector(X Component Of(
			Global.EE3Location), Y Component Of(Global.EE3Location) + 2, Z Component Of(Global.EE3Location)), 0.500,
			Visible To Position Radius and Color);
		disabled Create In-World Text(Global.Power == True ? All Players(All Teams) : Null, Custom String("Buy Juggernog - {0} Points",
			Global.JuggernogPrice), Vector(X Component Of(Global.JugLocation), Y Component Of(Global.JugLocation) - 0.500, Z Component Of(
			Global.JugLocation)), 1, Clip Against Surfaces, Visible To Position and String, Color(Red), Default Visibility);
		disabled Create In-World Text(Global.Power == True ? All Players(All Teams) : Null, Custom String("Buy Electric Cherry - {0} Points",
			Global.ElectricCherryPrice), Vector(X Component Of(Global.ElectricLocation), Y Component Of(Global.ElectricLocation) - 0.500,
			Z Component Of(Global.ElectricLocation)), 1, Clip Against Surfaces, Visible To Position and String, Color(Turquoise),
			Default Visibility);
		disabled Create In-World Text(Global.Power == True ? All Players(All Teams) : Null, Custom String("Buy Quick Revive - {0} Points",
			Global.QuickRevivePrice), Vector(X Component Of(Global.QuickReviveLocation), Y Component Of(Global.QuickReviveLocation)
			- 0.500, Z Component Of(Global.QuickReviveLocation)), 1, Clip Against Surfaces, Visible To Position and String, Color(Aqua),
			Default Visibility);
		disabled Create In-World Text(Global.Power == True ? All Players(All Teams) : Null, Custom String("Buy Staminup - {0} Points",
			Global.StaminupPrice), Vector(X Component Of(Global.StaminLocation), Y Component Of(Global.StaminLocation) - 0.500,
			Z Component Of(Global.StaminLocation)), 1, Clip Against Surfaces, Visible To Position and String, Color(Orange),
			Default Visibility);
		disabled Create In-World Text(Global.Power == True ? All Players(All Teams) : Null, Custom String("Use Trap - {0} Points",
			Global.TrapPrice), Global.TrapActivateLocation, 1, Clip Against Surfaces, Visible To Position String and Color,
			Global.TrapActive ? Color(Red) : Color(Green), Default Visibility);
		disabled Create In-World Text(Global.Power == True ? All Players(All Teams) : Null, Custom String("Upgrade your Weapon - {0} Points",
			Global.PackAPunchPrice), Vector(X Component Of(Global.PackAPunchLocation), Y Component Of(Global.PackAPunchLocation) - 0.500,
			Z Component Of(Global.PackAPunchLocation)), 1, Clip Against Surfaces, Visible To Position and String, Color(Sky Blue),
			Default Visibility);
	}
}

rule("Flip Power")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.PowerLocation) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.DisablePurchases != True;
	}

	actions
	{
		If(Global.Power == True);
			Small Message(Event Player, Custom String("Power is already on!"));
		Else;
			If(Event Player.Points >= Global.PowerPrice);
				Event Player.Points -= Global.PowerPrice;
				Global.Power = True;
			Else;
				Small Message(Event Player, Custom String("Insufficient Money!"));
			End;
		End;
	}
}

rule("Workshop Settings")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.PowerPrice = Workshop Setting Integer(Custom String("Prices"), Custom String("Power Price"), 5000, 1000, 10000, 0);
		Global.MysteryBoxPrice = Workshop Setting Integer(Custom String("Prices"), Custom String("Mystery Box Price"), 950, 10, 5000, 1);
		Global.QuickRevivePrice = Workshop Setting Integer(Custom String("Prices"), Custom String("Quick Revive Price"), 1500, 1000, 10000,
			2);
		Global.StaminupPrice = Workshop Setting Integer(Custom String("Prices"), Custom String("Staminup Price"), 2000, 1000, 10000, 3);
		Global.JuggernogPrice = Workshop Setting Integer(Custom String("Prices"), Custom String("Juggernog Price"), 2500, 1000, 10000, 4);
		Global.ElectricCherryPrice = Workshop Setting Integer(Custom String("Prices"), Custom String("Electric Cherry Price"), 2000, 1000,
			10000, 5);
		Global.TrapPrice = Workshop Setting Integer(Custom String("Prices"), Custom String("Trap Price"), 1500, 500, 5000, 6);
		Global.PackAPunchPrice = Workshop Setting Integer(Custom String("Prices"), Custom String("Pack A Punch Price"), 5000, 500, 10000,
			7);
		Global.MysteryBoxClass = Workshop Setting Combo(Custom String("General Settings"), Custom String("Mystery Box Weapon Class"), 0,
			Array(Custom String("Default"), Custom String("Snipers Only")), 0);
		Global.KillcountLimit = Workshop Setting Integer(Custom String("Easter Egg"), Custom String("Soul Box Kill Limit"), 5, 0, 100, 0);
		Global.WaveLimit = Workshop Setting Integer(Custom String("General Settings"), Custom String("Wave Limit - 0=None"), 0, 0, 100, 0);
		Global.EnableSpecialEvents = Workshop Setting Toggle(Custom String("General Settings"), Custom String("Enable Special Waves"),
			True, 0);
		Global.ChallengePrice = Workshop Setting Integer(Custom String("Prices"), Custom String("Challenge Machine Price"), 600, 500,
			10000, 8);
		Global.ChallengeMaxTime = Workshop Setting Integer(Custom String("General Settings"), Custom String("Challenge start timer"), 0,
			100, 600, 0);
		Global.PowerupTimer = Workshop Setting Integer(Custom String("General Settings"), Custom String("Powerup Max Time"), 60, 0, 120,
			0);
		Global.StartingPoints = Workshop Setting Integer(Custom String("General Settings"), Custom String("Starting Points"), 0, 0,
			1000000, 0);
		Global.PerkLossType = Workshop Setting Combo(Custom String("General Settings"), Custom String("Perk Loss Upon Death"), 0, Array(
			Custom String("Last Bought Perk"), Custom String("All Perks"), Custom String("No Perks")), 0);
		Global.WeaponLossType = Workshop Setting Combo(Custom String("General Settings"), Custom String("Weapon Loss Upon Death"), 0,
			Array(Custom String("Keep Weapon"), Custom String("Back to Starter")), 0);
	}
}

rule("Use Trap")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.TrapActivateLocation) <= 2;
		Global.TrapActive == False;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.Points >= Global.TrapPrice;
		Global.DisablePurchases != True;
	}

	actions
	{
		Event Player.Points -= Global.TrapPrice;
		Global.TrapActivator = Event Player;
		Create Beam Effect(All Players(All Teams), Good Beam, Vector(X Component Of(Global.TrapTargetArea), Y Component Of(
			Global.TrapTargetArea) + 10, Z Component Of(Global.TrapTargetArea)), Vector(X Component Of(Global.TrapTargetArea),
			Y Component Of(Global.TrapTargetArea) - 1, Z Component Of(Global.TrapTargetArea)), Color(Red), Visible To Position and Radius);
		Global.TrapActive = True;
		Wait(5, Ignore Condition);
		Destroy Effect(Last Created Entity);
		Global.TrapActive = False;
		Global.TrapActivator = Null;
	}
}

rule("Trap Effects")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.TrapActive == True;
		Distance Between(Event Player, Global.TrapTargetArea) <= 5;
	}

	actions
	{
		Start Damage Over Time(Event Player, Global.TrapActivator, 10, 50);
	}
}

rule("GameOver")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Number Of Dead Players(Team 1) == Number Of Players(Team 1);
	}

	actions
	{
		Wait(7, Abort When False);
		Destroy All HUD Text;
		Disable Game Mode HUD(All Players(All Teams));
		Disable Hero HUD(All Players(All Teams));
		Respawn(All Players(Team 1));
		Set Status(All Players(All Teams), Null, Invincible, 9999);
		Global.DidPlayersWin = False;
		Global.GameOverMenu = True;
	}
}

disabled rule("Create Beams to Middle")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		disabled Create Beam Effect(All Players(All Teams), Bad Beam, Global.EE2Location, Global.EE2Location, Color(White),
			Visible To Position and Radius);
		disabled Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(X Component Of(Global.EE2Location), Y Component Of(
			Global.EE2Location) - 2, Z Component Of(Global.EE2Location)), Vector(X Component Of(Global.EE2Location), Y Component Of(
			Global.EE2Location) + 2, Z Component Of(Global.EE2Location)), Color(White), Visible To Position and Radius);
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(X Component Of(Global.EE2Location), Y Component Of(
			Global.EE2Location) - 2, Z Component Of(Global.EE2Location)), Vector(X Component Of(Global.EE2Location) + 0.001,
			Y Component Of(Global.EE2Location) + 2, Z Component Of(Global.EE2Location)), Color(White), None);
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(X Component Of(Global.EE3Location), Y Component Of(
			Global.EE3Location) - 2, Z Component Of(Global.EE3Location)), Vector(X Component Of(Global.EE3Location) + 0.001,
			Y Component Of(Global.EE3Location) + 2, Z Component Of(Global.EE3Location)), Color(White), None);
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(X Component Of(Global.EE1Location), Y Component Of(
			Global.EE1Location) - 2, Z Component Of(Global.EE1Location)), Vector(X Component Of(Global.EE1Location) + 0.001,
			Y Component Of(Global.EE1Location) + 2, Z Component Of(Global.EE1Location)), Color(White), None);
	}
}

rule("Start EE 1")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		All;
	}

	conditions
	{
		Global.EE1Active == False;
		Distance Between(Event Player, Global.EE1Location) <= 3;
		Global.Power == True;
		Global.IsEEActivated == True;
	}

	actions
	{
		Global.EE1Active = True;
		Create Effect(All Players(All Teams), Ring, Color(White), Global.EE1Location, 3, Visible To Position and Radius);
		Global.EERingEffects[0] = Last Created Entity;
	}
}

rule("EE 1 Progress")
{
	event
	{
		Player Earned Elimination;
		All;
		All;
	}

	conditions
	{
		Global.EE1Active == True;
		Distance Between(Event Player, Global.EE1Location) <= 3;
		Global.EE1Killcount < 5;
	}

	actions
	{
		Global.EE1Killcount += 1;
		If(Global.EE1Killcount >= 5);
			Destroy Effect(Global.EERingEffects[0]);
	}
}

rule("Start EE 2")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		All;
	}

	conditions
	{
		Global.EE2Active == False;
		Distance Between(Event Player, Global.EE2Location) <= 3;
		Global.Power == True;
		Global.IsEEActivated == True;
	}

	actions
	{
		Global.EE2Active = True;
		Create Effect(All Players(All Teams), Ring, Color(White), Global.EE2Location, 3, Visible To Position and Radius);
		Global.EERingEffects[1] = Last Created Entity;
	}
}

rule("EE 2 Progress")
{
	event
	{
		Player Earned Elimination;
		All;
		All;
	}

	conditions
	{
		Global.EE2Active == True;
		Distance Between(Event Player, Global.EE2Location) <= 3;
		Global.EE2Killcount < 5;
	}

	actions
	{
		Global.EE2Killcount += 1;
		If(Global.EE2Killcount >= 5);
			Destroy Effect(Global.EERingEffects[1]);
	}
}

rule("Start EE 3")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		All;
	}

	conditions
	{
		Global.EE3Active == False;
		Distance Between(Event Player, Global.EE3Location) <= 3;
		Global.Power == True;
		Global.IsEEActivated == True;
	}

	actions
	{
		Global.EE3Active = True;
		Create Effect(All Players(All Teams), Ring, Color(White), Global.EE3Location, 3, Visible To Position and Radius);
		Global.EERingEffects[2] = Last Created Entity;
	}
}

rule("EE 3 Progress")
{
	event
	{
		Player Earned Elimination;
		All;
		All;
	}

	conditions
	{
		Global.EE3Active == True;
		Distance Between(Event Player, Global.EE3Location) <= 3;
		Global.EE3Killcount < 5;
	}

	actions
	{
		Global.EE3Killcount += 1;
		If(Global.EE3Killcount >= 5);
			Destroy Effect(Global.EERingEffects[2]);
	}
}

rule("All EE is done")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.OrbsActivated == 3;
	}

	actions
	{
		Wait(5, Ignore Condition);
		Create Effect(All Players(All Teams), Good Aura, Color(Purple), Global.StartBossLocation, 1, Visible To Position and Radius);
		Global.EERingEffects[3] = Last Created Entity;
		Create In-World Text(All Players(All Teams), Custom String("Start Final Battle - There is no turning back!"),
			Global.StartBossLocation, 1, Clip Against Surfaces, Visible To Position and String, Color(Purple), Default Visibility);
		Global.EERingEffects[4] = Last Text ID;
		Create Effect(All Players(All Teams), Ring, Color(Purple), Global.StartBossLocation, 3, Visible To Position and Radius);
		Global.EERingEffects[5] = Last Created Entity;
		Global.ActivateBoss = True;
		Small Message(All Players(All Teams), Custom String("{1}: \"{0}\"", Random Value In Array(Array(Custom String(
			"We getting somewhere!"), Custom String("This looks good!"), Custom String("The strange thing is opened, look out team."))),
			Hero Icon String(Hero(Soldier: 76))));
	}
}

rule("When one of the EE is done")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.OpenAnomaly == True;
	}

	actions
	{
		Create Effect(All Players(All Teams), Bad Aura, Color(Violet), Global.AnomalyLocation, 5, Visible To Position and Radius);
		Small Message(All Players(All Teams), Custom String("{1}: \"{0}\"", Random Value In Array(Array(Custom String(
			"What... is that? Be careful!"), Custom String("This looks strange, this may be dangerous."), Custom String(
			"Look out team! That may be dangerous!"))), Hero Icon String(Hero(Soldier: 76))));
	}
}

rule("EasterEgg1Activate")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.EE1Killcount >= 5;
		Distance Between(Event Player, Global.EE1Location) <= 3;
		Global.EE1Active == True;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Global.OrbsActivated += 1;
		Create Beam Effect(All Players(All Teams), Good Beam, Vector(X Component Of(Global.EE1Location), Y Component Of(Global.EE1Location)
			+ 2, Z Component Of(Global.EE1Location)), Global.AnomalyLocation, Color(Purple), Visible To Position and Radius);
		If(Global.OpenAnomaly == False);
			Global.OpenAnomaly = True;
	}
}

rule("EasterEgg2Activate")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.EE2Killcount >= 5;
		Distance Between(Event Player, Global.EE2Location) <= 3;
		Global.EE2Active == True;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Global.OrbsActivated += 1;
		Create Beam Effect(All Players(All Teams), Good Beam, Vector(X Component Of(Global.EE2Location), Y Component Of(Global.EE2Location)
			+ 2, Z Component Of(Global.EE2Location)), Global.AnomalyLocation, Color(Purple), Visible To Position and Radius);
		If(Global.OpenAnomaly == False);
			Global.OpenAnomaly = True;
	}
}

rule("EasterEgg3Activate")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.EE3Killcount >= 5;
		Distance Between(Event Player, Global.EE3Location) <= 3;
		Global.EE3Active == True;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Global.OrbsActivated += 1;
		Create Beam Effect(All Players(All Teams), Good Beam, Vector(X Component Of(Global.EE3Location), Y Component Of(Global.EE3Location)
			+ 2, Z Component Of(Global.EE3Location)), Global.AnomalyLocation, Color(Purple), Visible To Position and Radius);
		If(Global.OpenAnomaly == False);
			Global.OpenAnomaly = True;
	}
}

rule("Camera")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.HasGameStarted == False;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Start Camera(Event Player, Global.AnomalyLocation, Global.Barrier, 0);
		Set Status(Event Player, Null, Stunned, 9999);
	}
}

rule("Start Boss")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.StartBossLocation) <= 3;
		Global.ActivateBoss == True;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Wait(1, Abort When False);
		Small Message(Event Player, Custom String("5"));
		Wait(1, Abort When False);
		Small Message(Event Player, Custom String("4"));
		Wait(1, Abort When False);
		Small Message(Event Player, Custom String("3"));
		Wait(1, Abort When False);
		Small Message(Event Player, Custom String("2"));
		Wait(1, Abort When False);
		Small Message(Event Player, Custom String("1"));
		Wait(1, Abort When False);
		Big Message(All Players(All Teams), Custom String("Defeat the Boss to win!"));
		Create Dummy Bot(Hero(Orisa), Team 2, -1, Global.AnomalyLocation, Vector(0, 0, 0));
		Wait(0.250, Ignore Condition);
		Global.BossBot = Last Created Entity;
		Start Scaling Player(Global.BossBot, 2, True);
		Start Scaling Barriers(Global.BossBot, 2, True);
		Set Move Speed(Global.BossBot, 0.100);
		disabled Create Progress Bar HUD Text(Global.BossStarted == True ? All Players(All Teams) : Null, Normalized Health(Global.BossBot) * 100,
			Custom String("Boss Health"), Top, -1, Color(Red), Color(Red), Visible To Values and Color, Default Visibility);
		Global.BossStarted = True;
		Global.ZombiesLeft = 99999;
		Kill(Players On Hero(Hero(Bastion), Team 2), Null);
	}
}

rule("Boss Dies")
{
	event
	{
		Player Died;
		Team 2;
		All;
	}

	conditions
	{
		Global.BossBot == Event Player;
	}

	actions
	{
		Global.StartDirector = False;
		Start Forcing Player To Be Hero(All Players(Team 1), Array(Null));
		Resurrect(All Players(Team 1));
		Big Message(All Players(All Teams), Custom String("BOSS IS DEAD"));
		Destroy All Effects;
		Destroy All HUD Text;
		Destroy All In-World Text;
		Destroy All Progress Bar In-World Text;
		Destroy All Progress Bar HUD Text;
		Wait(4, Ignore Condition);
		Global.GameOverMenu = True;
		Set Status(All Players(All Teams), Null, Frozen, 9999);
		Start Camera(All Players(All Teams), Global.PlayerSpawn, Global.AnomalyLocation, 0);
		Global.DidPlayersWin = True;
		Small Message(All Players(All Teams), Custom String("\"{0}\"", Random Value In Array(Global.VictoryLines)));
	}
}

rule("Game Over Screen")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.GameOverMenu == True;
	}

	actions
	{
		Set Status(All Players(All Teams), Null, Invincible, 9999);
		Destroy All Dummy Bots;
		Start Camera(All Players(All Teams), Global.AnomalyLocation, Global.PlayerSpawn, 0);
		Disable Hero HUD(All Players(All Teams));
		Global.StartTimer = False;
		Create HUD Text(Event Player, Custom String("GAME OVER"), Null, Null, Top, 0, Color(Red), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Null, Custom String("TIME: {0}", Global.TimeElapsed), Top, 1, Color(White), Color(White),
			Color(Red), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Custom String("Waves Survived: {0}", Global.Wave - 1), Null, Null, Top, 2, Color(Red), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Custom String("{0}:          {1}          {2}", Custom String("{0} {1}", Hero Icon String(Hero Of(
			Players In Slot(0, Team 1))), Players In Slot(0, Team 1)), Players In Slot(0, Team 1).Score, Player Stat(Players In Slot(0,
			Team 1), Eliminations)), Null, Null, Top, 3, Slot Of(Event Player) == 0 ? Color(Rose) : Color(Red), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Custom String("{0}:          {1}          {2}", Custom String("{0} {1}", Hero Icon String(Hero Of(
			Players In Slot(1, Team 1))), Players In Slot(1, Team 1)), Players In Slot(1, Team 1).Score, Player Stat(Players In Slot(1,
			Team 1), Eliminations)), Null, Null, Top, 4, Slot Of(Event Player) == 1 ? Color(Rose) : Color(Red), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Custom String("{0}:          {1}          {2}", Custom String("{0} {1}", Hero Icon String(Hero Of(
			Players In Slot(2, Team 1))), Players In Slot(2, Team 1)), Players In Slot(2, Team 1).Score, Player Stat(Players In Slot(2,
			Team 1), Eliminations)), Null, Null, Top, 5, Slot Of(Event Player) == 2 ? Color(Rose) : Color(Red), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Custom String("{0}:          {1}          {2}", Custom String("{0} {1}", Hero Icon String(Hero Of(
			Players In Slot(3, Team 1))), Players In Slot(3, Team 1)), Players In Slot(3, Team 1).Score, Player Stat(Players In Slot(3,
			Team 1), Eliminations)), Null, Null, Top, 6, Slot Of(Event Player) == 3 ? Color(Rose) : Color(Red), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Wait(10, Ignore Condition);
		If(Global.DidPlayersWin == True);
			Declare Team Victory(Team 1);
		Else;
			Declare Team Victory(Team 2);
		End;
		Wait(5, Ignore Condition);
		Restart Match;
	}
}

rule("Timer")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.StartTimer == True;
	}

	actions
	{
		Wait(1, Abort When False);
		Global.TimeElapsed += 1;
		Loop If Condition Is True;
	}
}

rule("Special Round")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.StartBonusEvent == True;
	}

	actions
	{
		Global.Event = Random Value In Array(Global.SpecialRoundEvents);
		Wait(0.250, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("BONUS EVENT: {0}", Global.Event));
		If(Global.Event == Custom String("Low Gravity"));
			Set Gravity(All Players(All Teams), 10);
			Global.SpecialEventDescription = Custom String("All Players and enemies get Low Gravity");
		Else If(Global.Event == Custom String("Purchases Disabled"));
			Global.DisablePurchases = True;
			Global.SpecialEventDescription = Custom String("All Purchases are temperarily disabled");
		Else If(Global.Event == Custom String("Defuse the Bomb"));
			Global.ChosenBombDefuseLocation = Random Value In Array(Global.BombDefuseLocationArray);
			Global.DefuseBomb = True;
			Global.SpecialEventDescription = Custom String("Find and defuse the bomb before time runs out");
			Create Effect(All Players(All Teams), Orb, Color(Black), Global.ChosenBombDefuseLocation, 0.500, Visible To Position and Radius);
			Global.SpecialEventEffects[0] = Last Created Entity;
			Create Effect(All Players(All Teams), Ring, Color(Black), Global.ChosenBombDefuseLocation, 3, Visible To Position and Radius);
			Global.SpecialEventEffects[1] = Last Created Entity;
		End;
		Wait(0.250, Ignore Condition);
		Create HUD Text(All Players(All Teams), Custom String("SPECIAL EVENT: {0}", Global.Event), Custom String("Event Description:"),
			Global.SpecialEventDescription, Top, 3, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Global.SpecialEventHUD = Last Text ID;
		Respawn(All Dead Players(Team 2));
	}
}

rule("Defuse Bomb Event")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.DefuseBomb == True;
		Global.Event == Custom String("Defuse the Bomb");
		Distance Between(Event Player, Global.ChosenBombDefuseLocation) <= 3;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Wait(1, Abort When False);
		Small Message(All Players(All Teams), Custom String("Defusing in 5..."));
		Wait(1, Abort When False);
		Small Message(All Players(All Teams), Custom String("Defusing in 4..."));
		Wait(1, Abort When False);
		Small Message(All Players(All Teams), Custom String("Defusing in 3..."));
		Wait(1, Abort When False);
		Small Message(All Players(All Teams), Custom String("Defusing in 2..."));
		Wait(1, Abort When False);
		Small Message(All Players(All Teams), Custom String("Defusing in 1..."));
		Wait(1, Abort When False);
		Small Message(All Players(All Teams), Custom String("Defused!"));
		Destroy Effect(Global.SpecialEventEffects[0]);
		Destroy Effect(Global.SpecialEventEffects[1]);
	}
}

rule("Activate Easter Egg")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.IsEEActivated != True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Distance Between(Event Player, Global.ActivateEELocation) <= 2;
		Global.Power == True;
	}

	actions
	{
		Global.IsEEActivated = True;
		Play Effect(All Players(All Teams), Good Explosion, Color(White), Event Player, 1);
		Wait(1, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("Power Orbs activated! Awaiting fuel..."));
		Wait(3, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("{1} \"{0}\"", Random Value In Array(Array(Custom String(
			"Looks like its looking for some kind of fuel to activate the orbs... But what fuels it up?"), Custom String(
			"Fuel? Last I checked there was nothing fuel related here."), Custom String(
			"Looking for some way to fuel the orbs... got it! It feeds on enemy kills!"))), Hero Icon String(Hero(Soldier: 76))));
	}
}

rule("QuickRevive Effects")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Array Contains(Event Player.Perks, Custom String("QuickRevive")) == True;
	}

	actions
	{
		Wait(1, Abort When False);
		Heal(Event Player, Null, 10);
		Loop If Condition Is True;
	}
}

disabled rule("test")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Create HUD Text(Event Player, Count Of(Remove From Array(Event Player.Perks, Null)), Null, Null, Right, 0, Color(White), Color(
			White), Color(White), Visible To and String, Default Visibility);
	}
}

rule("Enemy stuff")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	actions
	{
		Create Progress Bar In-World Text(Is Dead(Event Player) ? Null : All Players(All Teams), Normalized Health(Event Player) * 100,
			Null, Event Player, 0.500, Clip Against Surfaces, Color(Red), Color(White), Visible To Position Values and Color,
			Default Visibility);
		Disable Nameplates(Event Player, All Players(All Teams));
	}
}

rule("Start Challenge")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Distance Between(Event Player, Global.ChallengesLocation) <= 2;
		Global.IsChallengeActive != True;
		Event Player.Points >= Global.ChallengePrice;
	}

	actions
	{
		Global.IsChallengeActive = True;
		Global.ChallengeTimer = Global.ChallengeMaxTime;
		Event Player.Points -= Global.ChallengePrice;
		Global.Challenge = Random Value In Array(Array(Custom String("Get a kill while crouched"), Custom String("Get a critical kill"),
			Custom String("Get a kill within the area")));
		If(Global.Challenge == Custom String("Get a kill within the area"));
			Create Effect(All Players(All Teams), Ring, Color(Lime Green), Global.ChallengeArea, 5, Visible To Position and Radius);
			Global.ChallengeEffects[0] = Last Created Entity;
			Create In-World Text(Event Player, Custom String("{0} CHALLENGE {0}", Icon String(Arrow: Down), Distance Between(Event Player,
				Global.ChallengeArea)), Global.ChallengeArea, 1, Do Not Clip, Visible To Position String and Color, Color(White),
				Default Visibility);
			Global.ChallengeEffects[1] = Last Text ID;
	}
}

rule("Challenge - Kill")
{
	event
	{
		Player Dealt Final Blow;
		All;
		All;
	}

	conditions
	{
		Global.IsChallengeActive == True;
	}

	actions
	{
		If(Global.Challenge == Custom String("Get a kill while crouched"));
			If(Is Crouching(Event Player));
				Event Player.ChallengeScore += 1;
			End;
		Else If(Global.Challenge == Custom String("Get a kill within the area"));
			If(Distance Between(Event Player, Global.ChallengeArea) <= 5);
				Event Player.ChallengeScore += 1;
			End;
		Else If(Global.Challenge == Custom String("Get a critical kill"));
			If(Event Was Critical Hit == True);
				Event Player.ChallengeScore += 1;
			End;
	}
}

rule("Challenge End")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.IsChallengeActive != True;
	}

	actions
	{
		disabled Destroy HUD Text(Last Text ID);
		Big Message(Event Player, Custom String("Challenge Over!"));
		Destroy Effect(Global.ChallengeEffects[0]);
		Destroy In-World Text(Global.ChallengeEffects[1]);
	}
}

rule("Rewards")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		"Common Reward"
		If(Event Player.ChallengeScore == 10);
		"Uncommon Reward"
		Else If(Event Player.ChallengeScore == 15);
		"Rare Reward"
		Else If(Event Player.ChallengeScore == 20);
		"Legendary Reward"
		Else If(Event Player.ChallengeScore == 25);
	}
}

rule("Challenge Timer")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.IsChallengeActive == True;
		Global.ChallengeTimer > 0;
	}

	actions
	{
		Wait(1, Abort When False);
		Global.ChallengeTimer -= 1;
		Loop If Condition Is True;
		If(Global.ChallengeTimer <= 10);
			For Global Variable(A, 0, Count Of(All Players(Team 1)), 1);
				Play Effect(All Players(All Teams), Good Pickup Effect, Color(White), Position Of(Global.A), 100);
			End;
		End;
	}
}

rule("Timer reaches 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.IsChallengeActive == True;
		Global.ChallengeTimer == 0;
	}

	actions
	{
		Global.IsChallengeActive = False;
	}
}

rule("Reward Type")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		If(Event Player.ChallengeScore >= 10 && Event Player.ChallengeScore < 15);
			Event Player.RewardType = 1;
		Else If(Event Player.ChallengeScore >= 15 && Event Player.ChallengeScore < 20);
			Event Player.RewardType = 2;
		Else If(Event Player.ChallengeScore >= 20 && Event Player.ChallengeScore < 25);
			Event Player.RewardType = 3;
		Else If(Event Player.ChallengeScore == 25);
			Event Player.RewardType = 4;
		End;
		Loop;
	}
}

rule("ClaimReward")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.RewardLocation) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.RewardType != 0;
	}

	actions
	{
		If(Event Player.RewardType == 1);
			Event Player.Points += 500;
			Event Player.Score += 500;
		Else If(Event Player.RewardType == 2);
			Add Health Pool To Player(Event Player, Shields, 120, False, False);
		Else If(Event Player.RewardType == 3);
			Event Player.DeathmachineActive = True;
		Else If(Event Player.RewardType == 4);
			Event Player.GodActive = True;
		End;
		Event Player.ChallengeScore = 0;
		Event Player.RewardType = 0;
	}
}

rule("Spawn Reward Orb")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		Create Effect(Event Player.RewardType > 0 ? Event Player : Null, Orb, Event Player.RewardType == 1 ? Color(Green) : (
			Event Player.RewardType == 2 ? Color(Purple) : (Event Player.RewardType == 3 ? Color(Rose) : Color(Orange))),
			Global.RewardLocation, 0.500, Visible To Position Radius and Color);
		Event Player.DeathmachineTimer = Global.PowerupTimer;
		Event Player.GodTimer = Global.PowerupTimer;
		Disable Built-In Game Mode Respawning(Event Player);
		Disable Nameplates(Event Player, All Players(All Teams));
		Disable Game Mode HUD(Event Player);
		Set Respawn Max Time(Event Player, 9999);
	}
}

rule("Deathmachine")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.DeathmachineActive == True;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Event Player.DeathmachineTimer -= 1;
		If(Event Player.DeathmachineTimer == 0);
			Event Player.DeathmachineActive = False;
			Event Player.DeathmachineTimer = Global.PowerupTimer;
			Set Ammo(Event Player, 0, 0);
			Set Ammo(Event Player, 1, 0);
		Else;
			Set Ammo(Event Player, 0, 999);
			Set Ammo(Event Player, 1, 999);
			Loop;
	}
}

rule("Invince")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.GodActive == True;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Event Player.GodTimer -= 1;
		If(Event Player.GodTimer == 0);
			Event Player.GodTimer = False;
			Event Player.GodTimer = Global.PowerupTimer;
			Clear Status(Event Player, Invincible);
		Else;
			Set Status(Event Player, Null, Invincible, 2);
			Loop;
	}
}

rule("In spawn room")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Global.PlayerSpawn);
		If(Event Player.PackAPunched == True);
			Set Max Ammo(Event Player, 0, Max Ammo(Event Player, 0) + Max Ammo(Event Player, 0));
			Set Max Ammo(Event Player, 1, Max Ammo(Event Player, 1) + Max Ammo(Event Player, 1));
			Set Ammo(Event Player, 0, Ammo(Event Player, 0) + Ammo(Event Player, 0));
			Set Ammo(Event Player, 1, Ammo(Event Player, 1) + Ammo(Event Player, 1));
		End;
		Wait(0.250, Ignore Condition);
		Set Status(Event Player, Null, Invincible, 5);
	}
}

rule("Player Dies with no Self Revives")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.SelfRevives <= 0;
		Is Alive(Event Player) != True;
	}

	actions
	{
		If(Count Of(Event Player.Perks) >= 1);
			Event Player.Perks = Remove From Array(Event Player.Perks, Event Player.Perks[Count Of(Event Player.Perks) - 1]);
		End;
		Small Message(Event Player, Custom String("Respawning in 30 seconds..."));
		Wait(30, Abort When False);
		Respawn(Event Player);
	}
}

rule("Director - Fix Facing")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Global.StartDirector == True;
		disabled Hero Of(Event Player) == Hero(Bastion);
		Is In Alternate Form(Event Player) == False;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Event Player.BotTarget), To World);
		Loop;
	}
}

rule("Dummy Bot caught in spawn room")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		Wait(2, Abort When False);
		Call Subroutine(RespawnDummy);
	}
}

rule("Director - Fix dummy bot stuck glitch")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.IfBotisStuck == True;
		Hero Of(Event Player) == Hero(Bastion);
	}

	actions
	{
		Event Player.IfBotisStuck = False;
		Respawn(Event Player);
	}
}

rule("Director - Movement")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.StartDirector == True;
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player) == Hero(Bastion);
		Is In Alternate Form(Event Player) == False;
	}

	actions
	{
		Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.BotTarget)), 1,
			To World, Replace existing throttle, Direction and Magnitude);
	}
}

rule("Director - facing")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.StartDirector == True;
		Is Dummy Bot(Event Player) == True;
		disabled Hero Of(Event Player) == Hero(Bastion);
		Is In Alternate Form(Event Player) == False;
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.BotTarget)), 100, To World,
			Direction and Turn Rate);
	}
}

rule("Director - Shooting if range")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.StartDirector == True;
		Is Dummy Bot(Event Player) == True;
		Players in View Angle(Event Player, Team 1, 45) == True;
		Ray Cast Hit Player(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 6, All Players(
			Team 1), Event Player, True) == True;
		Hero Of(Event Player) == Hero(Bastion);
	}

	actions
	{
		Wait(0.500, Restart When True);
		Stop Throttle In Direction(Event Player);
		disabled Start Facing(Event Player, Facing Direction Of(Closest Player To(Eye Position(Event Player), Opposite Team Of(Team Of(
			Event Player)))), 1, To World, Direction and Turn Rate);
		Start Holding Button(Event Player, Button(Primary Fire));
		Wait(2, Ignore Condition);
		Stop Holding Button(Event Player, Button(Primary Fire));
		disabled Stop Facing(Event Player);
		Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.BotTarget)), 1,
			To World, Replace existing throttle, Direction and Magnitude);
		disabled Event Player.PingLocation = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * 100, All Players(All Teams), Event Player, True);
		Loop If Condition Is True;
	}
}

rule("Spawn in Dummy Bots")
{
	event
	{
		Subroutine;
		RespawnDummy;
	}

	actions
	{
		Enable Built-In Game Mode Respawning(All Players(Team 2));
		Kill(All Players(Team 2), Null);
	}
}

rule("Teleport in Dummy Bot on Spawn")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		If(Global.BossStarted == True);
			Teleport(Event Player, Random Value In Array(Global.AnomalyLocation));
		Else;
			Teleport(Event Player, Random Value In Array(Global.EnemySpawns));
	}
}

rule("Director - Change Target")
{
	event
	{
		Subroutine;
		ChangeTarget;
	}

	actions
	{
		If(Number Of Players(Team 1) > 1);
			Event Player.BotTarget = Random Value In Array(All Living Players(Team 1));
	}
}

rule("Director - Target is Dead")
{
	event
	{
		Player Earned Elimination;
		Team 2;
		All;
	}

	conditions
	{
		Victim == Event Player.BotTarget;
	}

	actions
	{
		Call Subroutine(ChangeTarget);
	}
}

rule("Dummy Bot Target Chooser at first spawn")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	actions
	{
		Event Player.BotTarget = Random Value In Array(All Players(Team 1));
	}
}

rule("Director - Boss Shooting")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.StartDirector == True;
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player) == Hero(Orisa);
	}

	actions
	{
		Start Holding Button(Event Player, Button(Primary Fire));
		Start Holding Button(Event Player, Button(Ultimate));
	}
}

rule("Change Target every few seconds")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.StartDirector == True;
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player) == Hero(Orisa);
	}

	actions
	{
		Wait(5, Ignore Condition);
		Call Subroutine(ChangeTarget);
		Loop If(Is Alive(Event Player) == True);
	}
}

rule("Dummy Bot Name")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		If(Hero Of(Event Player) == Hero(Bastion));
			Start Forcing Dummy Bot Name(Event Player, Custom String("Omnic"));
		Else If(Hero Of(Event Player) == Hero(Orisa));
			Start Forcing Dummy Bot Name(Event Player, Custom String("OR15"));
	}
}

rule("Settings HUD")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Create HUD Text(Event Player, Global.ChallengeMaxTime == 100 ? Custom String("Challenge Start Timer: 100 seconds") : Custom String(
			"Challenge Start Timer: {0} seconds - MODIFIED", Global.ChallengeMaxTime), Null, Null, Right, 1,
			Global.ChallengeMaxTime == 100 ? Color(Aqua) : Color(Sky Blue), Color(White), Color(White),
			Visible To Sort Order String and Color, Default Visibility);
		Create HUD Text(Event Player, Global.EnableSpecialEvents == True ? Custom String("Enable Special waves: On") : Custom String(
			"Enable Special waves: Off - MODIFIED"), Null, Null, Right, 2, Global.EnableSpecialEvents == True ? Color(Aqua) : Color(
			Sky Blue), Color(White), Color(White), Visible To Sort Order String and Color, Default Visibility);
		disabled Create HUD Text(Event Player, Global.MysteryBoxClass == 0 ? Custom String("Mystery Box Weapon Class -  Default") : Custom String(
			"Mystery Box Weapon Class - {0} - MODIFIED", Global.MysteryBoxClass), Null, Null, Right, 3,
			Global.MysteryBoxClass == 0 ? Color(Aqua) : Color(Sky Blue), Color(White), Color(White),
			Visible To Sort Order String and Color, Default Visibility);
		disabled Create HUD Text(Event Player, Global.StartTimer == 100 ? Custom String("Perk Loss Upon Death: Last Bought") : Custom String(
			"Perk Loss Upon Death: {0} - MODIFIED", Global.StartTimer), Null, Null, Right, 4, Global.StartTimer == 100 ? Color(Aqua)
			: Color(Sky Blue), Color(White), Color(White), Visible To Sort Order String and Color, Default Visibility);
		Create HUD Text(Event Player, Global.PowerupTimer == 60 ? Custom String("Powerup Max Time: 60 seconds") : Custom String(
			"Powerup Max Time: {0} seconds - MODIFIED", Global.PowerupTimer), Null, Null, Right, 5, Global.PowerupTimer == 60 ? Color(Aqua)
			: Color(Sky Blue), Color(White), Color(White), Visible To Sort Order String and Color, Default Visibility);
		Create HUD Text(Event Player, Global.StartingPoints == 0 ? Custom String("Starting Points: 0 points") : Custom String(
			"Starting Points: {0} points - MODIFIED", Global.StartingPoints), Null, Null, Right, 6, Global.StartingPoints == 0 ? Color(
			Aqua) : Color(Sky Blue), Color(White), Color(White), Visible To Sort Order String and Color, Default Visibility);
		Create HUD Text(Event Player, Global.WaveLimit == 0 ? Custom String("Wave Limit: None") : Custom String(
			"Wave Limit: {0} - MODIFIED", Global.WaveLimit), Null, Null, Right, 7, Global.WaveLimit == 0 ? Color(Aqua) : Color(Sky Blue),
			Color(White), Color(White), Visible To Sort Order String and Color, Default Visibility);
		Create HUD Text(Event Player, Global.WeaponLossType == 0 ? Custom String("Weapon Loss Upon Death: Keep Weapon") : Custom String(
			"Weapon Loss Upon Death: Default Weapon - MODIFIED"), Null, Null, Right, 8, Global.WeaponLossType == 0 ? Color(Aqua) : Color(
			Sky Blue), Color(White), Color(White), Visible To Sort Order String and Color, Default Visibility);
		"Prices"
		Create HUD Text(Event Player, Global.PowerPrice == 5000 ? Custom String("Power Price: 5000 points") : Custom String(
			"Power Price: {0} - MODIFIED", Global.PowerPrice), Null, Null, Right, 10, Global.PowerPrice == 5000 ? Color(Aqua) : Color(
			Sky Blue), Color(White), Color(White), Visible To Sort Order String and Color, Default Visibility);
		Create HUD Text(Event Player, Global.MysteryBoxPrice == 950 ? Custom String("Mystery Box Price: 950 points") : Custom String(
			"Mystery Box Price: {0} - MODIFIED", Global.MysteryBoxPrice), Null, Null, Right, 11, Global.MysteryBoxPrice == 950 ? Color(
			Aqua) : Color(Sky Blue), Color(White), Color(White), Visible To Sort Order String and Color, Default Visibility);
		Create HUD Text(Event Player, Global.QuickRevivePrice == 1500 ? Custom String("Quick Revive Price: 1500 points") : Custom String(
			"Quick Revive Price: {0} - MODIFIED", Global.QuickRevivePrice), Null, Null, Right, 12, Global.QuickRevivePrice == 1500 ? Color(
			Aqua) : Color(Sky Blue), Color(White), Color(White), Visible To Sort Order String and Color, Default Visibility);
		Create HUD Text(Event Player, Global.StaminupPrice == 2000 ? Custom String("Staminup Price: 2000 points") : Custom String(
			"Staminup Price: {0} - MODIFIED", Global.StaminupPrice), Null, Null, Right, 13, Global.StaminupPrice == 2000 ? Color(Aqua)
			: Color(Sky Blue), Color(White), Color(White), Visible To Sort Order String and Color, Default Visibility);
		Create HUD Text(Event Player, Global.JuggernogPrice == 2500 ? Custom String("Juggernog Price: 2500 points") : Custom String(
			"Quick Revive Price: {0} - MODIFIED", Global.JuggernogPrice), Null, Null, Right, 14, Global.JuggernogPrice == 2500 ? Color(
			Aqua) : Color(Sky Blue), Color(White), Color(White), Visible To Sort Order String and Color, Default Visibility);
		Create HUD Text(Event Player, Global.ElectricCherryPrice == 2000 ? Custom String("Electric Cherry Price: 2000 points")
			: Custom String("Electric Cherry Price: {0} - MODIFIED", Global.ElectricCherryPrice), Null, Null, Right, 15,
			Global.ElectricCherryPrice == 2000 ? Color(Aqua) : Color(Sky Blue), Color(White), Color(White),
			Visible To Sort Order String and Color, Default Visibility);
		Create HUD Text(Event Player, Global.TrapPrice == 1500 ? Custom String("Trap Price: 1500 points") : Custom String(
			"Trap Price: {0} - MODIFIED", Global.TrapPrice), Null, Null, Right, 16, Global.TrapPrice == 1500 ? Color(Aqua) : Color(
			Sky Blue), Color(White), Color(White), Visible To Sort Order String and Color, Default Visibility);
		Create HUD Text(Event Player, Global.PackAPunchPrice == 5000 ? Custom String("Pack a Punch Price: 5000 points") : Custom String(
			"Pack a Punch Price: {0} - MODIFIED", Global.PackAPunchPrice), Null, Null, Right, 17, Global.PackAPunchPrice == 5000 ? Color(
			Aqua) : Color(Sky Blue), Color(White), Color(White), Visible To Sort Order String and Color, Default Visibility);
		Create HUD Text(Event Player, Global.ChallengePrice == 600 ? Custom String("Challenge Machine Price: 600 points") : Custom String(
			"Challenge Machine Price: {0} - MODIFIED", Global.ChallengePrice), Null, Null, Right, 18, Global.ChallengePrice == 600 ? Color(
			Aqua) : Color(Sky Blue), Color(White), Color(White), Visible To Sort Order String and Color, Default Visibility);
	}
}

rule("Lobby Hud")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.HasGameStarted != True;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Event Player == Host Player ? Custom String("{0} - HOST", Event Player) : Event Player,
			Null, Null, Left, 3, Host Player == Event Player ? Color(Aqua) : Color(Sky Blue), Color(White), Null,
			Visible To Sort Order String and Color, Default Visibility);
		Create HUD Text(Event Player, Global.HasGameStarted == True ? Custom String("Game is starting...") : (
			Host Player == Event Player ? Custom String("Press {0} to start the game", Input Binding String(Button(Interact)))
			: Custom String("Waiting for host to start the game")), Null, Null, Top, 0, Global.HasGameStarted == True ? Color(Green)
			: Color(Red), Color(White), Color(White), Visible To Sort Order String and Color, Default Visibility);
		Create HUD Text(Event Player, Custom String("Useless Tips:\r\n{0}", Global.ChosenTip), Null, Null, Left, 1, Color(White), Color(
			White), Color(White), Visible To and String, Default Visibility);
		Disable Hero HUD(Event Player);
		Disable Messages(Event Player);
		Create HUD Text(Event Player, Null, Custom String("{0}\r\n{1}\r\n{2}", Custom String(" "), Custom String(" "), Custom String(" ")),
			Null, Left, 2, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("{0}\r\n{1}\r\n{2}", Custom String(" "), Custom String(" "), Custom String(" ")),
			Null, Left, 0, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
	}
}

rule("Tips")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.HasGameStarted != True;
	}

	actions
	{
		Global.ChosenTip = Random Value In Array(Global.UselessTips);
		Play Effect(All Players(All Teams), Good Pickup Effect, Color(White), Global.Barrier, 100);
		Wait(5, Abort When False);
		Loop If Condition Is True;
	}
}

rule("Spawn Enemy Portals")
{
	event
	{
		Subroutine;
		SpawnEnemyPortals;
	}

	actions
	{
		For Global Variable(I, 0, Count Of(Global.EnemySpawns), 1);
			Create Effect(Global.BossStarted != True ? All Players(All Teams) : Null, Bad Aura, Color(Purple),
				Global.EnemySpawns[Evaluate Once(Global.I)], 1, Visible To Position Radius and Color);
		End;
	}
}
